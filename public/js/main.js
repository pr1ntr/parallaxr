;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
/*!
 * VERSION: beta 1.8.1
 * DATE: 2013-01-29
 * JavaScript (ActionScript 3 and 2 also available)
 * UPDATES AND DOCS AT: http://www.greensock.com
 *
 * @license Copyright (c) 2008-2013, GreenSock. All rights reserved.
 * This work is subject to the terms in http://www.greensock.com/terms_of_use.html or for 
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
(function(a){"use strict";var e,f,g,h,b=a.GreenSockGlobals||a,c=function(a){var e,c=a.split("."),d=b;for(e=0;c.length>e;e++)d[c[e]]=d=d[c[e]]||{};return d},d=c("com.greensock"),i={},j=function(d,e,f,g){this.sc=i[d]?i[d].sc:[],i[d]=this,this.gsClass=null,this.func=f;var h=[];this.check=function(k){for(var n,o,p,q,l=e.length,m=l;--l>-1;)(n=i[e[l]]||new j(e[l],[])).gsClass?(h[l]=n.gsClass,m--):k&&n.sc.push(this);if(0===m&&f)for(o=("com.greensock."+d).split("."),p=o.pop(),q=c(o.join("."))[p]=this.gsClass=f.apply(f,h),g&&(b[p]=q,"function"==typeof define&&define.amd?define((a.GreenSockAMDPath?a.GreenSockAMDPath+"/":"")+d.split(".").join("/"),[],function(){return q}):"undefined"!=typeof module&&module.exports&&(module.exports=q)),l=0;this.sc.length>l;l++)this.sc[l].check()},this.check(!0)},k=a._gsDefine=function(a,b,c,d){return new j(a,b,c,d)},l=d._class=function(a,b,c){return b=b||function(){},k(a,[],function(){return b},c),b},m=[0,0,1,1],n=[],o=l("easing.Ease",function(a,b,c,d){this._func=a,this._type=c||0,this._power=d||0,this._params=b?m.concat(b):m},!0),p=o.map={},q=o.register=function(a,b,c,e){for(var i,j,k,m,f=b.split(","),g=f.length,h=(c||"easeIn,easeOut,easeInOut").split(",");--g>-1;)for(j=f[g],i=e?l("easing."+j,null,!0):d.easing[j]||{},k=h.length;--k>-1;)m=h[k],p[j+"."+m]=p[m+j]=i[m]=a.getRatio?a:a[m]||new a};for(g=o.prototype,g._calcEnd=!1,g.getRatio=function(a){if(this._func)return this._params[0]=a,this._func.apply(null,this._params);var b=this._type,c=this._power,d=1===b?1-a:2===b?a:.5>a?2*a:2*(1-a);return 1===c?d*=d:2===c?d*=d*d:3===c?d*=d*d*d:4===c&&(d*=d*d*d*d),1===b?1-d:2===b?d:.5>a?d/2:1-d/2},e=["Linear","Quad","Cubic","Quart","Quint,Strong"],f=e.length;--f>-1;)g=e[f]+",Power"+f,q(new o(null,null,1,f),g,"easeOut",!0),q(new o(null,null,2,f),g,"easeIn"+(0===f?",easeNone":"")),q(new o(null,null,3,f),g,"easeInOut");p.linear=d.easing.Linear.easeIn,p.swing=d.easing.Quad.easeInOut;var r=l("events.EventDispatcher",function(a){this._listeners={},this._eventTarget=a||this});g=r.prototype,g.addEventListener=function(a,b,c,d,e){e=e||0;var h,i,f=this._listeners[a],g=0;for(null==f&&(this._listeners[a]=f=[]),i=f.length;--i>-1;)h=f[i],h.c===b?f.splice(i,1):0===g&&e>h.pr&&(g=i+1);f.splice(g,0,{c:b,s:c,up:d,pr:e})},g.removeEventListener=function(a,b){var d,c=this._listeners[a];if(c)for(d=c.length;--d>-1;)if(c[d].c===b)return c.splice(d,1),void 0},g.dispatchEvent=function(a){var b=this._listeners[a];if(b)for(var e,c=b.length,d=this._eventTarget;--c>-1;)e=b[c],e.up?e.c.call(e.s||d,{type:a,target:d}):e.c.call(e.s||d)};var s=a.requestAnimationFrame,t=a.cancelAnimationFrame,u=Date.now||function(){return(new Date).getTime()};for(e=["ms","moz","webkit","o"],f=e.length;--f>-1&&!s;)s=a[e[f]+"RequestAnimationFrame"],t=a[e[f]+"CancelAnimationFrame"]||a[e[f]+"CancelRequestAnimationFrame"];l("Ticker",function(b,c){var g,h,i,j,k,d=this,e=u(),f=c!==!1&&s,l=function(){null!=i&&(f&&t?t(i):a.clearTimeout(i),i=null)},m=function(a){d.time=(u()-e)/1e3,(!g||d.time>=k||a===!0)&&(d.frame++,k=d.time>k?d.time+j-(d.time-k):d.time+j-.001,d.time+.001>k&&(k=d.time+.001),d.dispatchEvent("tick")),a!==!0&&(i=h(m))};r.call(d),this.time=this.frame=0,this.tick=function(){m(!0)},this.fps=function(a){return arguments.length?(g=a,j=1/(g||60),k=this.time+j,h=0===g?function(){}:f&&s?s:function(a){return setTimeout(a,1e3*(k-d.time)+1>>0||1)},l(),i=h(m),void 0):g},this.useRAF=function(a){return arguments.length?(l(),f=a,d.fps(g),void 0):f},d.fps(b),setTimeout(function(){f&&!i&&d.useRAF(!1)},1e3)}),g=d.Ticker.prototype=new d.events.EventDispatcher,g.constructor=d.Ticker;var v=l("core.Animation",function(a,b){if(this.vars=b||{},this._duration=this._totalDuration=a||0,this._delay=Number(this.vars.delay)||0,this._timeScale=1,this._active=this.vars.immediateRender===!0,this.data=this.vars.data,this._reversed=this.vars.reversed===!0,I){h||(w.tick(),h=!0);var c=this.vars.useFrames?H:I;c.add(this,c._time),this.vars.paused&&this.paused(!0)}}),w=v.ticker=new d.Ticker;g=v.prototype,g._dirty=g._gc=g._initted=g._paused=!1,g._totalTime=g._time=0,g._rawPrevTime=-1,g._next=g._last=g._onUpdate=g._timeline=g.timeline=null,g._paused=!1,g.play=function(a,b){return arguments.length&&this.seek(a,b),this.reversed(!1),this.paused(!1)},g.pause=function(a,b){return arguments.length&&this.seek(a,b),this.paused(!0)},g.resume=function(a,b){return arguments.length&&this.seek(a,b),this.paused(!1)},g.seek=function(a,b){return this.totalTime(Number(a),b!==!1)},g.restart=function(a,b){return this.reversed(!1),this.paused(!1),this.totalTime(a?-this._delay:0,b!==!1)},g.reverse=function(a,b){return arguments.length&&this.seek(a||this.totalDuration(),b),this.reversed(!0),this.paused(!1)},g.render=function(){},g.invalidate=function(){return this},g._enabled=function(a,b){return this._gc=!a,this._active=a&&!this._paused&&this._totalTime>0&&this._totalTime<this._totalDuration,b!==!0&&(a&&null==this.timeline?this._timeline.add(this,this._startTime-this._delay):a||null==this.timeline||this._timeline._remove(this,!0)),!1},g._kill=function(){return this._enabled(!1,!1)},g.kill=function(a,b){return this._kill(a,b),this},g._uncache=function(a){for(var b=a?this:this.timeline;b;)b._dirty=!0,b=b.timeline;return this},g.eventCallback=function(a,b,c,d){if(null==a)return null;if("on"===a.substr(0,2)){if(1===arguments.length)return this.vars[a];if(null==b)delete this.vars[a];else if(this.vars[a]=b,this.vars[a+"Params"]=c,this.vars[a+"Scope"]=d,c)for(var e=c.length;--e>-1;)"{self}"===c[e]&&(c=this.vars[a+"Params"]=c.concat(),c[e]=this);"onUpdate"===a&&(this._onUpdate=b)}return this},g.delay=function(a){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+a-this._delay),this._delay=a,this):this._delay},g.duration=function(a){return arguments.length?(this._duration=this._totalDuration=a,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==a&&this.totalTime(this._totalTime*(a/this._duration),!0),this):(this._dirty=!1,this._duration)},g.totalDuration=function(a){return this._dirty=!1,arguments.length?this.duration(a):this._totalDuration},g.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),a>this._duration&&(a=this._duration),this.totalTime(a,b)):this._time},g.totalTime=function(a,b){if(!arguments.length)return this._totalTime;if(this._timeline){if(0>a&&(a+=this.totalDuration()),this._timeline.smoothChildTiming&&(this._dirty&&this.totalDuration(),a>this._totalDuration&&(a=this._totalDuration),this._startTime=(this._paused?this._pauseTime:this._timeline._time)-(this._reversed?this._totalDuration-a:a)/this._timeScale,this._timeline._dirty||this._uncache(!1),!this._timeline._active))for(var c=this._timeline;c._timeline;)c.totalTime(c._totalTime,!0),c=c._timeline;this._gc&&this._enabled(!0,!1),this._totalTime!==a&&this.render(a,b,!1)}return this},g.startTime=function(a){return arguments.length?(a!==this._startTime&&(this._startTime=a,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,a-this._delay)),this):this._startTime},g.timeScale=function(a){if(!arguments.length)return this._timeScale;if(a=a||1e-6,this._timeline&&this._timeline.smoothChildTiming){var b=this._pauseTime||0===this._pauseTime?this._pauseTime:this._timeline._totalTime;this._startTime=b-(b-this._startTime)*this._timeScale/a}return this._timeScale=a,this._uncache(!1)},g.reversed=function(a){return arguments.length?(a!=this._reversed&&(this._reversed=a,this.totalTime(this._totalTime,!0)),this):this._reversed},g.paused=function(a){return arguments.length?(a!=this._paused&&this._timeline&&(!a&&this._timeline.smoothChildTiming&&(this._startTime+=this._timeline.rawTime()-this._pauseTime,this._uncache(!1)),this._pauseTime=a?this._timeline.rawTime():null,this._paused=a,this._active=!this._paused&&this._totalTime>0&&this._totalTime<this._totalDuration),this._gc&&(a||this._enabled(!0,!1)),this):this._paused};var x=l("core.SimpleTimeline",function(a){v.call(this,0,a),this.autoRemoveChildren=this.smoothChildTiming=!0});g=x.prototype=new v,g.constructor=x,g.kill()._gc=!1,g._first=g._last=null,g._sortChildren=!1,g.add=function(a,b){var e,f;if(a._startTime=Number(b||0)+a._delay,a._paused&&this!==a._timeline&&(a._pauseTime=a._startTime+(this.rawTime()-a._startTime)/a._timeScale),a.timeline&&a.timeline._remove(a,!0),a.timeline=a._timeline=this,a._gc&&a._enabled(!0,!0),e=this._last,this._sortChildren)for(f=a._startTime;e&&e._startTime>f;)e=e._prev;return e?(a._next=e._next,e._next=a):(a._next=this._first,this._first=a),a._next?a._next._prev=a:this._last=a,a._prev=e,this._timeline&&this._uncache(!0),this},g.insert=g.add,g._remove=function(a,b){return a.timeline===this&&(b||a._enabled(!1,!0),a.timeline=null,a._prev?a._prev._next=a._next:this._first===a&&(this._first=a._next),a._next?a._next._prev=a._prev:this._last===a&&(this._last=a._prev),this._timeline&&this._uncache(!0)),this},g.render=function(a,b){var e,d=this._first;for(this._totalTime=this._time=this._rawPrevTime=a;d;)e=d._next,(d._active||a>=d._startTime&&!d._paused)&&(d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,!1):d.render((a-d._startTime)*d._timeScale,b,!1)),d=e},g.rawTime=function(){return this._totalTime};var y=l("TweenLite",function(a,b,c){if(v.call(this,b,c),null==a)throw"Cannot tween an undefined reference.";this.target=a="string"!=typeof a?a:y.selector(a)||a,this._overwrite=null==this.vars.overwrite?G[y.defaultOverwrite]:"number"==typeof this.vars.overwrite?this.vars.overwrite>>0:G[this.vars.overwrite];var e,f,d=a.jquery||"function"==typeof a.each&&a[0]&&a[0].nodeType&&a[0].style;if((d||a instanceof Array)&&"number"!=typeof a[0])for(this._targets=d&&!a.slice?A(a):a.slice(0),this._propLookup=[],this._siblings=[],e=0;this._targets.length>e;e++)f=this._targets[e],f?"string"!=typeof f?"function"==typeof f.each&&f[0]&&f[0].nodeType&&f[0].style?(this._targets.splice(e--,1),this._targets=this._targets.concat(A(f))):(this._siblings[e]=J(f,this,!1),1===this._overwrite&&this._siblings[e].length>1&&K(f,this,null,1,this._siblings[e])):(f=this._targets[e--]=y.selector(f),"string"==typeof f&&this._targets.splice(e+1,1)):this._targets.splice(e--,1);else this._propLookup={},this._siblings=J(a,this,!1),1===this._overwrite&&this._siblings.length>1&&K(a,this,null,1,this._siblings);(this.vars.immediateRender||0===b&&0===this._delay&&this.vars.immediateRender!==!1)&&this.render(-this._delay,!1,!0)},!0),z=function(a){return"function"==typeof a.each&&a[0]&&a[0].nodeType&&a[0].style},A=function(a){var b=[];return a.each(function(){b.push(this)}),b},B=function(a){var c,b={};for(c in a)!F[c]&&(!C[c]||C[c]&&C[c]._autoCSS)&&(b[c]=a[c],delete a[c]);a.css=b};g=y.prototype=new v,g.constructor=y,g.kill()._gc=!1,g.ratio=0,g._firstPT=g._targets=g._overwrittenProps=null,g._notifyPluginsOfEnabled=!1,y.version="1.8.1",y.defaultEase=g._ease=new o(null,null,1,1),y.defaultOverwrite="auto",y.ticker=w,y.selector=a.$||a.jQuery||function(b){return a.$?(y.selector=a.$,a.$(b)):a.document?a.document.getElementById("#"===b.charAt(0)?b.substr(1):b):b};var C=y._plugins={},D=y._tweenLookup={},E=0,F={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,orientToBezier:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1},G={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,"true":1,"false":0},H=v._rootFramesTimeline=new x,I=v._rootTimeline=new x;I._startTime=w.time,H._startTime=w.frame,I._active=H._active=!0,v._updateRoot=function(){if(I.render((w.time-I._startTime)*I._timeScale,!1,!1),H.render((w.frame-H._startTime)*H._timeScale,!1,!1),!(w.frame%120)){var a,b,c;for(c in D){for(b=D[c].tweens,a=b.length;--a>-1;)b[a]._gc&&b.splice(a,1);0===b.length&&delete D[c]}}},w.addEventListener("tick",v._updateRoot);var J=function(a,b,c){var e,f,d=a._gsTweenID;if(D[d||(a._gsTweenID=d="t"+E++)]||(D[d]={target:a,tweens:[]}),b&&(e=D[d].tweens,e[f=e.length]=b,c))for(;--f>-1;)e[f]===b&&e.splice(f,1);return D[d].tweens},K=function(a,b,c,d,e){var f,g,h,i;if(1===d||d>=4){for(i=e.length,f=0;i>f;f++)if((h=e[f])!==b)h._gc||h._enabled(!1,!1)&&(g=!0);else if(5===d)break;return g}var n,j=b._startTime+1e-10,k=[],l=0,m=0===b._duration;for(f=e.length;--f>-1;)(h=e[f])===b||h._gc||h._paused||(h._timeline!==b._timeline?(n=n||L(b,0,m),0===L(h,n,m)&&(k[l++]=h)):j>=h._startTime&&h._startTime+h.totalDuration()/h._timeScale+1e-10>j&&((m||!h._initted)&&2e-10>=j-h._startTime||(k[l++]=h)));for(f=l;--f>-1;)h=k[f],2===d&&h._kill(c,a)&&(g=!0),(2!==d||!h._firstPT&&h._initted)&&h._enabled(!1,!1)&&(g=!0);return g},L=function(a,b,c){for(var d=a._timeline,e=d._timeScale,f=a._startTime;d._timeline;){if(f+=d._startTime,e*=d._timeScale,d._paused)return-100;d=d._timeline}return f/=e,f>b?f-b:c&&f===b||!a._initted&&2e-10>f-b?1e-10:(f+=a.totalDuration()/a._timeScale/e)>b?0:f-b-1e-10};g._init=function(){var c,d,e,a=this.vars,b=a.ease;if(a.startAt&&(a.startAt.overwrite=0,a.startAt.immediateRender=!0,y.to(this.target,0,a.startAt)),this._ease=b?b instanceof o?a.easeParams instanceof Array?b.config.apply(b,a.easeParams):b:"function"==typeof b?new o(b,a.easeParams):p[b]||y.defaultEase:y.defaultEase,this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(c=this._targets.length;--c>-1;)this._initProps(this._targets[c],this._propLookup[c]={},this._siblings[c],this._overwrittenProps?this._overwrittenProps[c]:null)&&(d=!0);else d=this._initProps(this.target,this._propLookup,this._siblings,this._overwrittenProps);if(d&&y._onPluginEvent("_onInitAllProps",this),this._overwrittenProps&&null==this._firstPT&&"function"!=typeof this.target&&this._enabled(!1,!1),a.runBackwards)for(e=this._firstPT;e;)e.s+=e.c,e.c=-e.c,e=e._next;this._onUpdate=a.onUpdate,this._initted=!0},g._initProps=function(a,b,c,d){var e,f,g,h,i,j,k;if(null==a)return!1;this.vars.css||a.style&&a.nodeType&&C.css&&this.vars.autoCSS!==!1&&B(this.vars);for(e in this.vars){if(F[e]){if(("onStartParams"===e||"onUpdateParams"===e||"onCompleteParams"===e||"onReverseCompleteParams"===e||"onRepeatParams"===e)&&(i=this.vars[e]))for(f=i.length;--f>-1;)"{self}"===i[f]&&(i=this.vars[e]=i.concat(),i[f]=this)}else if(C[e]&&(h=new C[e])._onInitTween(a,this.vars[e],this)){for(this._firstPT=j={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:!0,n:e,pg:!0,pr:h._priority},f=h._overwriteProps.length;--f>-1;)b[h._overwriteProps[f]]=this._firstPT;(h._priority||h._onInitAllProps)&&(g=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0)}else this._firstPT=b[e]=j={_next:this._firstPT,t:a,p:e,f:"function"==typeof a[e],n:e,pg:!1,pr:0},j.s=j.f?a[e.indexOf("set")||"function"!=typeof a["get"+e.substr(3)]?e:"get"+e.substr(3)]():parseFloat(a[e]),k=this.vars[e],j.c="string"==typeof k&&"="===k.charAt(1)?parseInt(k.charAt(0)+"1",10)*Number(k.substr(2)):Number(k)-j.s||0;j&&j._next&&(j._next._prev=j)}return d&&this._kill(d,a)?this._initProps(a,b,c,d):this._overwrite>1&&this._firstPT&&c.length>1&&K(a,this,b,this._overwrite,c)?(this._kill(b,a),this._initProps(a,b,c,d)):g},g.render=function(a,b,c){var e,f,g,d=this._time;if(a>=this._duration)this._totalTime=this._time=this._duration,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(e=!0,f="onComplete"),0===this._duration&&((0===a||0>this._rawPrevTime)&&this._rawPrevTime!==a&&(c=!0),this._rawPrevTime=a);else if(0>=a)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==d||0===this._duration&&this._rawPrevTime>0)&&(f="onReverseComplete",e=this._reversed),0>a?(this._active=!1,0===this._duration&&(this._rawPrevTime>=0&&(c=!0),this._rawPrevTime=a)):this._initted||(c=!0);else if(this._totalTime=this._time=a,this._easeType){var h=a/this._duration,i=this._easeType,j=this._easePower;(1===i||3===i&&h>=.5)&&(h=1-h),3===i&&(h*=2),1===j?h*=h:2===j?h*=h*h:3===j?h*=h*h*h:4===j&&(h*=h*h*h*h),this.ratio=1===i?1-h:2===i?h:.5>a/this._duration?h/2:1-h/2}else this.ratio=this._ease.getRatio(a/this._duration);if(this._time!==d||c){for(this._initted||(this._init(),!e&&this._time&&(this.ratio=this._ease.getRatio(this._time/this._duration))),this._active||this._paused||(this._active=!0),0===d&&this.vars.onStart&&(0!==this._time||0===this._duration)&&(b||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||n)),g=this._firstPT;g;)g.f?g.t[g.p](g.c*this.ratio+g.s):g.t[g.p]=g.c*this.ratio+g.s,g=g._next;this._onUpdate&&(b||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||n)),f&&(this._gc||(e&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),b||this.vars[f]&&this.vars[f].apply(this.vars[f+"Scope"]||this,this.vars[f+"Params"]||n)))}},g._kill=function(a,b){if("all"===a&&(a=null),null==a&&(null==b||b===this.target))return this._enabled(!1,!1);b="string"!=typeof b?b||this._targets||this.target:y.selector(b)||b;var c,d,e,f,g,h,i,j;if((b instanceof Array||z(b))&&"number"!=typeof b[0])for(c=b.length;--c>-1;)this._kill(a,b[c])&&(h=!0);else{if(this._targets){for(c=this._targets.length;--c>-1;)if(b===this._targets[c]){g=this._propLookup[c]||{},this._overwrittenProps=this._overwrittenProps||[],d=this._overwrittenProps[c]=a?this._overwrittenProps[c]||{}:"all";break}}else{if(b!==this.target)return!1;g=this._propLookup,d=this._overwrittenProps=a?this._overwrittenProps||{}:"all"}if(g){i=a||g,j=a!==d&&"all"!==d&&a!==g&&(null==a||a._tempKill!==!0);for(e in i)(f=g[e])&&(f.pg&&f.t._kill(i)&&(h=!0),f.pg&&0!==f.t._overwriteProps.length||(f._prev?f._prev._next=f._next:f===this._firstPT&&(this._firstPT=f._next),f._next&&(f._next._prev=f._prev),f._next=f._prev=null),delete g[e]),j&&(d[e]=1)}}return h},g.invalidate=function(){return this._notifyPluginsOfEnabled&&y._onPluginEvent("_onDisable",this),this._firstPT=null,this._overwrittenProps=null,this._onUpdate=null,this._initted=this._active=this._notifyPluginsOfEnabled=!1,this._propLookup=this._targets?{}:[],this},g._enabled=function(a,b){if(a&&this._gc)if(this._targets)for(var c=this._targets.length;--c>-1;)this._siblings[c]=J(this._targets[c],this,!0);else this._siblings=J(this.target,this,!0);return v.prototype._enabled.call(this,a,b),this._notifyPluginsOfEnabled&&this._firstPT?y._onPluginEvent(a?"_onEnable":"_onDisable",this):!1},y.to=function(a,b,c){return new y(a,b,c)},y.from=function(a,b,c){return c.runBackwards=!0,c.immediateRender!==!1&&(c.immediateRender=!0),new y(a,b,c)},y.fromTo=function(a,b,c,d){return d.startAt=c,c.immediateRender&&(d.immediateRender=!0),new y(a,b,d)},y.delayedCall=function(a,b,c,d,e){return new y(b,0,{delay:a,onComplete:b,onCompleteParams:c,onCompleteScope:d,onReverseComplete:b,onReverseCompleteParams:c,onReverseCompleteScope:d,immediateRender:!1,useFrames:e,overwrite:0})},y.set=function(a,b){return new y(a,0,b)},y.killTweensOf=y.killDelayedCallsTo=function(a,b){for(var c=y.getTweensOf(a),d=c.length;--d>-1;)c[d]._kill(b,a)},y.getTweensOf=function(a){if(null!=a){a="string"!=typeof a?a:y.selector(a)||a;var b,c,d,e;if((a instanceof Array||z(a))&&"number"!=typeof a[0]){for(b=a.length,c=[];--b>-1;)c=c.concat(y.getTweensOf(a[b]));for(b=c.length;--b>-1;)for(e=c[b],d=b;--d>-1;)e===c[d]&&c.splice(b,1)}else for(c=J(a).concat(),b=c.length;--b>-1;)c[b]._gc&&c.splice(b,1);return c}};var M=l("plugins.TweenPlugin",function(a,b){this._overwriteProps=(a||"").split(","),this._propName=this._overwriteProps[0],this._priority=b||0},!0);if(g=M.prototype,M.version=12,M.API=2,g._firstPT=null,g._addTween=function(a,b,c,d,e,f){var g,h;null!=d&&(g="number"==typeof d||"="!==d.charAt(1)?Number(d)-c:parseInt(d.charAt(0)+"1",10)*Number(d.substr(2)))&&(this._firstPT=h={_next:this._firstPT,t:a,p:b,s:c,c:g,f:"function"==typeof a[b],n:e||b,r:f},h._next&&(h._next._prev=h))},g.setRatio=function(a){for(var c,b=this._firstPT;b;)c=b.c*a+b.s,b.r&&(c=c+(c>0?.5:-.5)>>0),b.f?b.t[b.p](c):b.t[b.p]=c,b=b._next},g._kill=function(a){if(null!=a[this._propName])this._overwriteProps=[];else for(var b=this._overwriteProps.length;--b>-1;)null!=a[this._overwriteProps[b]]&&this._overwriteProps.splice(b,1);for(var c=this._firstPT;c;)null!=a[c.n]&&(c._next&&(c._next._prev=c._prev),c._prev?(c._prev._next=c._next,c._prev=null):this._firstPT===c&&(this._firstPT=c._next)),c=c._next;return!1},g._roundProps=function(a,b){for(var c=this._firstPT;c;)(a[this._propName]||null!=c.n&&a[c.n.split(this._propName+"_").join("")])&&(c.r=b),c=c._next},y._onPluginEvent=function(a,b){var d,c=b._firstPT;if("_onInitAllProps"===a){for(var e,f,g,h;c;){for(h=c._next,e=f;e&&e.pr>c.pr;)e=e._next;(c._prev=e?e._prev:g)?c._prev._next=c:f=c,(c._next=e)?e._prev=c:g=c,c=h}c=b._firstPT=f}for(;c;)c.pg&&"function"==typeof c.t[a]&&c.t[a]()&&(d=!0),c=c._next;return d},M.activate=function(a){for(var b=a.length;--b>-1;)a[b].API===M.API&&(y._plugins[(new a[b])._propName]=a[b]);return!0},e=a._gsQueue){for(f=0;e.length>f;f++)e[f]();for(g in i)i[g].func||a.console.log("GSAP encountered missing dependency: com.greensock."+g)}h=!1})(window);
},{}],2:[function(require,module,exports){
/*!
 * VERSION: beta 1.8.1
 * DATE: 2013-01-29
 * JavaScript (ActionScript 3 and 2 also available)
 * UPDATES AND DOCS AT: http://www.greensock.com
 * 
 * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, easing.EasePack, plugins.CSSPlugin, plugins.RoundPropsPlugin, plugins.BezierPlugin
 *
 * @license Copyright (c) 2008-2013, GreenSock. All rights reserved.
 * This work is subject to the terms in http://www.greensock.com/terms_of_use.html or for 
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
(window._gsQueue||(window._gsQueue=[])).push(function(){_gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(a,b,c){var d=function(a,b,d){c.call(this,a,b,d),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0},e=d.prototype=c.to({},.1,{}),f=[];d.version="1.8.1",e.constructor=d,e.kill()._gc=!1,d.killTweensOf=d.killDelayedCallsTo=c.killTweensOf,d.getTweensOf=c.getTweensOf,d.ticker=c.ticker,e.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),c.prototype.invalidate.call(this)},e.updateTo=function(a,b){var e,d=this.ratio;b&&null!=this.timeline&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(e in a)this.vars[e]=a[e];if(this._initted)if(b)this._initted=!1;else if(this._notifyPluginsOfEnabled&&this._firstPT&&c._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var f=this._time;this.render(0,!0,!1),this._initted=!1,this.render(f,!0,!1)}else if(this._time>0){this._initted=!1,this._init();for(var i,g=1/(1-d),h=this._firstPT;h;)i=h.s+h.c,h.c*=g,h.s=i-h.c,h=h._next}return this},e.render=function(a,b,c){var i,j,k,d=this._dirty?this.totalDuration():this._totalDuration,e=this._time,g=this._totalTime,h=this._cycle;if(a>=d)this._totalTime=d,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=this._duration,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(i=!0,j="onComplete"),0===this._duration&&((0===a||0>this._rawPrevTime)&&this._rawPrevTime!==a&&(c=!0),this._rawPrevTime=a);else if(0>=a)this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==g||0===this._duration&&this._rawPrevTime>0)&&(j="onReverseComplete",i=this._reversed),0>a?(this._active=!1,0===this._duration&&(this._rawPrevTime>=0&&(c=!0),this._rawPrevTime=a)):this._initted||(c=!0);else{if(this._totalTime=this._time=a,0!==this._repeat){var l=this._duration+this._repeatDelay;this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=this._duration-this._time),this._time>this._duration?this._time=this._duration:0>this._time&&(this._time=0)}if(this._easeType){var m=this._time/this._duration,n=this._easeType,o=this._easePower;(1===n||3===n&&m>=.5)&&(m=1-m),3===n&&(m*=2),1===o?m*=m:2===o?m*=m*m:3===o?m*=m*m*m:4===o&&(m*=m*m*m*m),this.ratio=1===n?1-m:2===n?m:.5>this._time/this._duration?m/2:1-m/2}else this.ratio=this._ease.getRatio(this._time/this._duration)}if(e===this._time&&!c)return g!==this._totalTime&&this._onUpdate&&(b||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||f)),void 0;for(this._initted||(this._init(),!i&&this._time&&(this.ratio=this._ease.getRatio(this._time/this._duration))),this._active||this._paused||(this._active=!0),0===g&&this.vars.onStart&&(0!==this._totalTime||0===this._duration)&&(b||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||f)),k=this._firstPT;k;)k.f?k.t[k.p](k.c*this.ratio+k.s):k.t[k.p]=k.c*this.ratio+k.s,k=k._next;this._onUpdate&&(b||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||f)),this._cycle!==h&&(b||this._gc||this.vars.onRepeat&&this.vars.onRepeat.apply(this.vars.onRepeatScope||this,this.vars.onRepeatParams||f)),j&&(this._gc||(i&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),b||this.vars[j]&&this.vars[j].apply(this.vars[j+"Scope"]||this,this.vars[j+"Params"]||f)))},d.to=function(a,b,c){return new d(a,b,c)},d.from=function(a,b,c){return c.runBackwards=!0,c.immediateRender!==!1&&(c.immediateRender=!0),new d(a,b,c)},d.fromTo=function(a,b,c,e){return e.startAt=c,c.immediateRender&&(e.immediateRender=!0),new d(a,b,e)},d.staggerTo=d.allTo=function(a,b,c,e,f,g,h){e=e||0;var l,m,n,i=[],j=a.length,k=c.delay||0;for(m=0;j>m;m++){l={};for(n in c)l[n]=c[n];l.delay=k,m===j-1&&f&&(l.onComplete=function(){c.onComplete&&c.onComplete.apply(c.onCompleteScope,c.onCompleteParams),f.apply(h,g)}),i[m]=new d(a[m],b,l),k+=e}return i},d.staggerFrom=d.allFrom=function(a,b,c,e,f,g,h){return c.runBackwards=!0,c.immediateRender!==!1&&(c.immediateRender=!0),d.staggerTo(a,b,c,e,f,g,h)},d.staggerFromTo=d.allFromTo=function(a,b,c,e,f,g,h,i){return e.startAt=c,c.immediateRender&&(e.immediateRender=!0),d.staggerTo(a,b,e,f,g,h,i)},d.delayedCall=function(a,b,c,e,f){return new d(b,0,{delay:a,onComplete:b,onCompleteParams:c,onCompleteScope:e,onReverseComplete:b,onReverseCompleteParams:c,onReverseCompleteScope:e,immediateRender:!1,useFrames:f,overwrite:0})},d.set=function(a,b){return new d(a,0,b)},d.isTweening=function(a){for(var e,b=c.getTweensOf(a),d=b.length;--d>-1;)if((e=b[d])._active||e._startTime===e.timeline._time&&e.timeline._active)return!0;return!1};var g=function(a,b){for(var d=[],e=0,f=a._first;f;)f instanceof c?d[e++]=f:(b&&(d[e++]=f),d=d.concat(g(f,b)),e=d.length),f=f._next;return d},h=d.getAllTweens=function(b){var c=g(a._rootTimeline,b);return c.concat(g(a._rootFramesTimeline,b))};d.killAll=function(a,c,d,e){null==c&&(c=!0),null==d&&(d=!0);var j,k,l,f=h(0!=e),g=f.length,i=c&&d&&e;for(l=0;g>l;l++)k=f[l],(i||k instanceof b||(j=k.target===k.vars.onComplete)&&d||c&&!j)&&(a?k.totalTime(k.totalDuration()):k._enabled(!1,!1))},d.killChildTweensOf=function(a,b){if(null!=a){if(a.jquery)return a.each(function(a,c){d.killChildTweensOf(c,b)}),void 0;var g,h,i,j,e=c._tweenLookup,f=[];for(h in e)for(g=e[h].target.parentNode;g;)g===a&&(f=f.concat(e[h].tweens)),g=g.parentNode;for(j=f.length,i=0;j>i;i++)b&&f[i].totalTime(f[i].totalDuration()),f[i]._enabled(!1,!1)}},d.pauseAll=function(a,b,c){i(!0,a,b,c)},d.resumeAll=function(a,b,c){i(!1,a,b,c)};var i=function(a,c,d,e){void 0===c&&(c=!0),void 0===d&&(d=!0);for(var j,k,f=h(e),g=c&&d&&e,i=f.length;--i>-1;)k=f[i],(g||k instanceof b||(j=k.target===k.vars.onComplete)&&d||c&&!j)&&k.paused(a)};return e.progress=function(a){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-a:a)+this._cycle*(this._duration+this._repeatDelay),!1):this._time/this.duration()},e.totalProgress=function(a){return arguments.length?this.totalTime(this.totalDuration()*a,!1):this._totalTime/this.totalDuration()},e.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),a>this._duration&&(a=this._duration),this._yoyo&&0!==(1&this._cycle)?a=this._duration-a+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(a+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(a,b)):this._time},e.totalDuration=function(a){return arguments.length?-1===this._repeat?this:this.duration((a-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},e.repeat=function(a){return arguments.length?(this._repeat=a,this._uncache(!0)):this._repeat},e.repeatDelay=function(a){return arguments.length?(this._repeatDelay=a,this._uncache(!0)):this._repeatDelay},e.yoyo=function(a){return arguments.length?(this._yoyo=a,this):this._yoyo},d},!0),_gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(a,b,c){"use strict";var d=function(a){b.call(this,a),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;for(var d,f,c=e.length;--c>-1;)if(f=this.vars[e[c]])for(d=f.length;--d>-1;)"{self}"===f[d]&&(f=this.vars[e[c]]=f.concat(),f[d]=this);this.vars.tweens instanceof Array&&this.add(this.vars.tweens,0,this.vars.align,this.vars.stagger)},e=["onStartParams","onUpdateParams","onCompleteParams","onReverseCompleteParams","onRepeatParams"],f=[],g=function(a){var c,b={};for(c in a)b[c]=a[c];return b},h=d.prototype=new b;return d.version="1.8.0",h.constructor=d,h.kill()._gc=!1,h.to=function(a,b,d,e){return this.add(new c(a,b,d),e)},h.from=function(a,b,d,e){return this.add(c.from(a,b,d),e)},h.fromTo=function(a,b,d,e,f){return this.add(c.fromTo(a,b,d,e),f)},h.staggerTo=function(a,b,e,f,h,i,j,k){var l=new d({onComplete:i,onCompleteParams:j,onCompleteScope:k});f=f||0;for(var m=0;a.length>m;m++)null!=e.startAt&&(e.startAt=g(e.startAt)),l.add(new c(a[m],b,g(e)),m*f);return this.add(l,h)},h.staggerFrom=function(a,b,c,d,e,f,g,h){return null==c.immediateRender&&(c.immediateRender=!0),c.runBackwards=!0,this.staggerTo(a,b,c,d,e,f,g,h)},h.staggerFromTo=function(a,b,c,d,e,f,g,h,i){return d.startAt=c,c.immediateRender&&(d.immediateRender=!0),this.staggerTo(a,b,d,e,f,g,h,i)},h.call=function(a,b,d,e){return this.add(c.delayedCall(0,a,b,d),e)},h.set=function(a,b,d){return b.immediateRender=!1,this.add(new c(a,0,b),d)},d.exportRoot=function(a,b){a=a||{},null==a.smoothChildTiming&&(a.smoothChildTiming=!0);var e=new d(a),f=e._timeline;null==b&&(b=!0),f._remove(e,!0),e._startTime=0,e._rawPrevTime=e._time=e._totalTime=f._time;for(var h,g=f._first;g;)h=g._next,b&&g instanceof c&&g.target===g.vars.onComplete||e.add(g,g._startTime-g._delay),g=h;return f.add(e,0),e},h.add=function(e,f,g,h){if("number"!=typeof f&&(f=this._parseTimeOrLabel(f,0,!0,e)),e instanceof a);else{if(e instanceof Array){g=g||"normal",h=h||0;var k,l,i=f,j=e.length;for(k=0;j>k;k++)(l=e[k])instanceof Array&&(l=new d({tweens:l})),this.add(l,i),"string"!=typeof l&&"function"!=typeof l&&("sequence"===g?i=l._startTime+l.totalDuration()/l._timeScale:"start"===g&&(l._startTime-=l.delay())),i+=h;return this._uncache(!0)}if("string"==typeof e)return this.addLabel(e,f);if("function"!=typeof e)throw"Cannot add "+e+" into the TimelineLite/Max: it is neither a tween, timeline, function, nor a String.";e=c.delayedCall(0,e)}if(b.prototype.add.call(this,e,f),this._gc&&!this._paused&&this._time===this._duration&&this._time<this.duration())for(var m=this;m._gc&&m._timeline;)m._timeline.smoothChildTiming?m.totalTime(m._totalTime,!0):m._enabled(!0,!1),m=m._timeline;return this},h.remove=function(b){if(b instanceof a)return this._remove(b,!1);if(b instanceof Array){for(var c=b.length;--c>-1;)this.remove(b[c]);return this}return"string"==typeof b?this.removeLabel(b):this.kill(null,b)},h.append=function(a,b){return this.add(a,this._parseTimeOrLabel(null,b,!0,a))},h.insert=h.insertMultiple=function(a,b,c,d){return this.add(a,b||0,c,d)},h.appendMultiple=function(a,b,c,d){return this.add(a,this._parseTimeOrLabel(null,b,!0,a),c,d)},h.addLabel=function(a,b){return this._labels[a]=this._parseTimeOrLabel(b),this},h.removeLabel=function(a){return delete this._labels[a],this},h.getLabelTime=function(a){return null!=this._labels[a]?this._labels[a]:-1},h._parseTimeOrLabel=function(b,c,d,e){var f;if(e instanceof a&&e.timeline===this)this.remove(e);else if(e instanceof Array)for(f=e.length;--f>-1;)e[f]instanceof a&&e[f].timeline===this&&this.remove(e[f]);if("string"==typeof c)return this._parseTimeOrLabel(c,d&&"number"==typeof b&&null==this._labels[c]?b-this.duration():0,d);if(c=c||0,"string"!=typeof b||!isNaN(b)&&null==this._labels[b])null==b&&(b=this.duration());else{if(f=b.indexOf("="),-1===f)return null==this._labels[b]?d?this._labels[b]=this.duration()+c:c:this._labels[b]+c;c=parseInt(b.charAt(f-1)+"1",10)*Number(b.substr(f+1)),b=f>1?this._parseTimeOrLabel(b.substr(0,f-1),0,d):this.duration()}return Number(b)+c},h.seek=function(a,b){return this.totalTime("number"==typeof a?a:this._parseTimeOrLabel(a),b!==!1)},h.stop=function(){return this.paused(!0)},h.gotoAndPlay=function(a,c){return b.prototype.play.call(this,a,c)},h.gotoAndStop=function(a,b){return this.pause(a,b)},h.render=function(a,b,c){this._gc&&this._enabled(!0,!1),this._active=!this._paused;var j,k,l,m,d=this._dirty?this.totalDuration():this._totalDuration,e=this._time,g=this._startTime,h=this._timeScale,i=this._paused;if(a>=d?(this._totalTime=this._time=d,this._reversed||this._hasPausedChild()||(k=!0,m="onComplete",0===this._duration&&(0===a||0>this._rawPrevTime)&&this._rawPrevTime!==a&&(c=!0)),this._rawPrevTime=a,a=d+1e-6):0>=a?(this._totalTime=this._time=0,(0!==e||0===this._duration&&this._rawPrevTime>0)&&(m="onReverseComplete",k=this._reversed),0>a?(this._active=!1,0===this._duration&&this._rawPrevTime>=0&&(c=!0)):this._initted||(c=!0),this._rawPrevTime=a,a=-1e-6):this._totalTime=this._time=this._rawPrevTime=a,this._time!==e||c){if(this._initted||(this._initted=!0),0===e&&this.vars.onStart&&0!==this._time&&(b||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||f)),this._time>e)for(j=this._first;j&&(l=j._next,!this._paused||i);)(j._active||j._startTime<=this._time&&!j._paused&&!j._gc)&&(j._reversed?j.render((j._dirty?j.totalDuration():j._totalDuration)-(a-j._startTime)*j._timeScale,b,!1):j.render((a-j._startTime)*j._timeScale,b,!1)),j=l;else for(j=this._last;j&&(l=j._prev,!this._paused||i);)(j._active||e>=j._startTime&&!j._paused&&!j._gc)&&(j._reversed?j.render((j._dirty?j.totalDuration():j._totalDuration)-(a-j._startTime)*j._timeScale,b,!1):j.render((a-j._startTime)*j._timeScale,b,!1)),j=l;this._onUpdate&&(b||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||f)),m&&(this._gc||(g===this._startTime||h!=this._timeScale)&&(0===this._time||d>=this.totalDuration())&&(k&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),b||this.vars[m]&&this.vars[m].apply(this.vars[m+"Scope"]||this,this.vars[m+"Params"]||f)))}},h._hasPausedChild=function(){for(var a=this._first;a;){if(a._paused||a instanceof d&&a._hasPausedChild())return!0;a=a._next}return!1},h.getChildren=function(a,b,d,e){e=e||-9999999999;for(var f=[],g=this._first,h=0;g;)e>g._startTime||(g instanceof c?b!==!1&&(f[h++]=g):(d!==!1&&(f[h++]=g),a!==!1&&(f=f.concat(g.getChildren(!0,b,d)),h=f.length))),g=g._next;return f},h.getTweensOf=function(a,b){for(var d=c.getTweensOf(a),e=d.length,f=[],g=0;--e>-1;)(d[e].timeline===this||b&&this._contains(d[e]))&&(f[g++]=d[e]);return f},h._contains=function(a){for(var b=a.timeline;b;){if(b===this)return!0;b=b.timeline}return!1},h.shiftChildren=function(a,b,c){c=c||0;for(var d=this._first;d;)d._startTime>=c&&(d._startTime+=a),d=d._next;if(b)for(var e in this._labels)this._labels[e]>=c&&(this._labels[e]+=a);return this._uncache(!0)},h._kill=function(a,b){if(null==a&&null==b)return this._enabled(!1,!1);for(var c=null==b?this.getChildren(!0,!0,!1):this.getTweensOf(b),d=c.length,e=!1;--d>-1;)c[d]._kill(a,b)&&(e=!0);return e},h.clear=function(a){var b=this.getChildren(!1,!0,!0),c=b.length;for(this._time=this._totalTime=0;--c>-1;)b[c]._enabled(!1,!1);return a!==!1&&(this._labels={}),this._uncache(!0)},h.invalidate=function(){for(var a=this._first;a;)a.invalidate(),a=a._next;return this},h._enabled=function(a,c){if(a===this._gc)for(var d=this._first;d;)d._enabled(a,!0),d=d._next;return b.prototype._enabled.call(this,a,c)},h.progress=function(a){return arguments.length?this.totalTime(this.duration()*a,!1):this._time/this.duration()},h.duration=function(a){return arguments.length?(0!==this.duration()&&0!==a&&this.timeScale(this._duration/a),this):(this._dirty&&this.totalDuration(),this._duration)},h.totalDuration=function(a){if(!arguments.length){if(this._dirty){for(var e,f,b=0,c=this._first,d=-999999999999;c;)e=c._next,d>c._startTime&&this._sortChildren?this.add(c,c._startTime-c._delay):d=c._startTime,0>c._startTime&&(b-=c._startTime,this.shiftChildren(-c._startTime,!1,-9999999999)),f=c._startTime+(c._dirty?c.totalDuration():c._totalDuration)/c._timeScale,f>b&&(b=f),c=e;this._duration=this._totalDuration=b,this._dirty=!1}return this._totalDuration}return 0!==this.totalDuration()&&0!==a&&this.timeScale(this._totalDuration/a),this},h.usesFrames=function(){for(var b=this._timeline;b._timeline;)b=b._timeline;return b===a._rootFramesTimeline},h.rawTime=function(){return this._paused||0!==this._totalTime&&this._totalTime!==this._totalDuration?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},d},!0),_gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(a,b,c){var d=function(b){a.call(this,b),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},e=[],f=new c(null,null,1,0),g=function(a){for(;a;){if(a._paused)return!0;a=a._timeline}return!1},h=d.prototype=new a;return h.constructor=d,h.kill()._gc=!1,d.version="1.8.0",h.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),a.prototype.invalidate.call(this)},h.addCallback=function(a,c,d,e){return this.add(b.delayedCall(0,a,d,e),c)},h.removeCallback=function(a,b){if(null==b)this._kill(null,a);else for(var c=this.getTweensOf(a,!1),d=c.length,e=this._parseTimeOrLabel(b);--d>-1;)c[d]._startTime===e&&c[d]._enabled(!1,!1);return this},h.tweenTo=function(a,c){c=c||{};var g,h,d={ease:f,overwrite:2,useFrames:this.usesFrames(),immediateRender:!1};for(g in c)d[g]=c[g];return d.time=this._parseTimeOrLabel(a),h=new b(this,Math.abs(Number(d.time)-this._time)/this._timeScale||.001,d),d.onStart=function(){h.target.paused(!0),h.vars.time!==h.target.time()&&h.duration(Math.abs(h.vars.time-h.target.time())/h.target._timeScale),c.onStart&&c.onStart.apply(c.onStartScope||h,c.onStartParams||e)},h},h.tweenFromTo=function(a,b,c){c=c||{},c.startAt={time:this._parseTimeOrLabel(a)};var d=this.tweenTo(b,c);return d.duration(Math.abs(d.vars.time-d.vars.startAt.time)/this._timeScale||.001)},h.render=function(a,b,c){this._gc&&this._enabled(!0,!1),this._active=!this._paused;var m,n,o,q,d=this._dirty?this.totalDuration():this._totalDuration,f=this._time,g=this._totalTime,h=this._startTime,i=this._timeScale,j=this._rawPrevTime,k=this._paused,l=this._cycle;if(a>=d)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(n=!0,q="onComplete",0===this._duration&&(0===a||0>this._rawPrevTime)&&this._rawPrevTime!==a&&(c=!0)),this._rawPrevTime=a,this._yoyo&&0!==(1&this._cycle)?(this._time=0,a=-1e-6):(this._time=this._duration,a=this._duration+1e-6);else if(0>=a)this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==f||0===this._duration&&this._rawPrevTime>0&&!this._locked)&&(q="onReverseComplete",n=this._reversed),0>a?(this._active=!1,0===this._duration&&this._rawPrevTime>=0&&(c=!0)):this._initted||(c=!0),this._rawPrevTime=a,a=0===this._duration?0:-1e-6;else if(this._time=this._rawPrevTime=a,!this._locked&&(this._totalTime=a,0!==this._repeat)){var r=this._duration+this._repeatDelay;this._cycle=this._totalTime/r>>0,0!==this._cycle&&this._cycle===this._totalTime/r&&this._cycle--,this._time=this._totalTime-this._cycle*r,this._yoyo&&0!==(1&this._cycle)&&(this._time=this._duration-this._time),this._time>this._duration?(this._time=this._duration,a=this._duration+1e-6):0>this._time?this._time=a=0:a=this._time}if(this._cycle!==l&&!this._locked){var s=this._yoyo&&0!==(1&l),t=s===(this._yoyo&&0!==(1&this._cycle)),u=this._totalTime,v=this._cycle,w=this._rawPrevTime,x=this._time;this._totalTime=l*this._duration,l>this._cycle?s=!s:this._totalTime+=this._duration,this._time=f,this._rawPrevTime=0===this._duration?j-1e-5:j,this._cycle=l,this._locked=!0,f=s?0:this._duration,this.render(f,b,0===this._duration),b||this._gc||this.vars.onRepeat&&this.vars.onRepeat.apply(this.vars.onRepeatScope||this,this.vars.onRepeatParams||e),t&&(f=s?this._duration+1e-6:-1e-6,this.render(f,!0,!1)),this._time=x,this._totalTime=u,this._cycle=v,this._rawPrevTime=w,this._locked=!1}if(this._time===f&&!c)return g!==this._totalTime&&this._onUpdate&&(b||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||e)),void 0;if(this._initted||(this._initted=!0),0===g&&this.vars.onStart&&0!==this._totalTime&&(b||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||e)),this._time>f)for(m=this._first;m&&(o=m._next,!this._paused||k);)(m._active||m._startTime<=this._time&&!m._paused&&!m._gc)&&(m._reversed?m.render((m._dirty?m.totalDuration():m._totalDuration)-(a-m._startTime)*m._timeScale,b,!1):m.render((a-m._startTime)*m._timeScale,b,!1)),m=o;else for(m=this._last;m&&(o=m._prev,!this._paused||k);)(m._active||f>=m._startTime&&!m._paused&&!m._gc)&&(m._reversed?m.render((m._dirty?m.totalDuration():m._totalDuration)-(a-m._startTime)*m._timeScale,b,!1):m.render((a-m._startTime)*m._timeScale,b,!1)),m=o;this._onUpdate&&(b||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||e)),q&&(this._locked||this._gc||(h===this._startTime||i!==this._timeScale)&&(0===this._time||d>=this.totalDuration())&&(n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),b||this.vars[q]&&this.vars[q].apply(this.vars[q+"Scope"]||this,this.vars[q+"Params"]||e)))},h.getActive=function(a,b,c){null==a&&(a=!0),null==b&&(b=!0),null==c&&(c=!1);var i,j,d=[],e=this.getChildren(a,b,c),f=0,h=e.length;for(i=0;h>i;i++)j=e[i],j._paused||j._timeline._time>=j._startTime&&j._timeline._time<j._startTime+j._totalDuration/j._timeScale&&(g(j._timeline)||(d[f++]=j));return d},h.getLabelAfter=function(a){a||0!==a&&(a=this._time);var d,b=this.getLabelsArray(),c=b.length;for(d=0;c>d;d++)if(b[d].time>a)return b[d].name;return null},h.getLabelBefore=function(a){null==a&&(a=this._time);for(var b=this.getLabelsArray(),c=b.length;--c>-1;)if(a>b[c].time)return b[c].name;return null},h.getLabelsArray=function(){var c,a=[],b=0;for(c in this._labels)a[b++]={time:this._labels[c],name:c};return a.sort(function(a,b){return a.time-b.time}),a},h.progress=function(a){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-a:a)+this._cycle*(this._duration+this._repeatDelay),!1):this._time/this.duration()},h.totalProgress=function(a){return arguments.length?this.totalTime(this.totalDuration()*a,!1):this._totalTime/this.totalDuration()},h.totalDuration=function(b){return arguments.length?-1===this._repeat?this:this.duration((b-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(a.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},h.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),a>this._duration&&(a=this._duration),this._yoyo&&0!==(1&this._cycle)?a=this._duration-a+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(a+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(a,b)):this._time},h.repeat=function(a){return arguments.length?(this._repeat=a,this._uncache(!0)):this._repeat},h.repeatDelay=function(a){return arguments.length?(this._repeatDelay=a,this._uncache(!0)):this._repeatDelay},h.yoyo=function(a){return arguments.length?(this._yoyo=a,this):this._yoyo},h.currentLabel=function(a){return arguments.length?this.seek(a,!0):this.getLabelBefore(this._time+1e-8)},d},!0),_gsDefine("plugins.BezierPlugin",["plugins.TweenPlugin"],function(a){var b=function(){a.call(this,"bezier",-1),this._overwriteProps.pop(),this._func={},this._round={}},c=b.prototype=new a("bezier",1),d=180/Math.PI,e=Math.PI/180,f=[],g=[],h=[],i={},j=function j(a,b,c,d){this.a=a,this.b=b,this.c=c,this.d=d,this.da=d-a,this.ca=c-a,this.ba=b-a},k=",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",l=b.bezierThrough=function(a,b,c,d,e,j){var q,r,s,t,u,v,w,x,l={},m=[],p=j||a[0];e="string"==typeof e?","+e+",":k,null==b&&(b=1);for(r in a[0])m.push(r);if(a.length>1){for(x=a[a.length-1],w=!0,q=m.length;--q>-1;)if(r=m[q],Math.abs(p[r]-x[r])>.05){w=!1;break}w&&(a=a.concat(),j&&a.unshift(j),a.push(a[1]),j=a[a.length-3])}for(f.length=g.length=h.length=0,q=m.length;--q>-1;)r=m[q],i[r]=-1!==e.indexOf(","+r+","),l[r]=n(a,r,i[r],j);for(q=f.length;--q>-1;)f[q]=Math.sqrt(f[q]),g[q]=Math.sqrt(g[q]);if(!d){for(q=m.length;--q>-1;)if(i[r])for(s=l[m[q]],v=s.length-1,t=0;v>t;t++)u=s[t+1].da/g[t]+s[t].da/f[t],h[t]=(h[t]||0)+u*u;for(q=h.length;--q>-1;)h[q]=Math.sqrt(h[q])}for(q=m.length,t=c?4:1;--q>-1;)r=m[q],s=l[r],o(s,b,c,d,i[r]),w&&(s.splice(0,t),s.splice(s.length-t,t));return l},m=function(a,b,c){b=b||"soft";var h,i,k,l,m,n,o,p,q,r,s,d={},e="cubic"===b?3:2,f="soft"===b,g=[];if(f&&c&&(a=[c].concat(a)),null==a||e+1>a.length)throw"invalid Bezier data";for(q in a[0])g.push(q);for(n=g.length;--n>-1;){for(q=g[n],d[q]=m=[],r=0,p=a.length,o=0;p>o;o++)h=null==c?a[o][q]:"string"==typeof(s=a[o][q])&&"="===s.charAt(1)?c[q]+Number(s.charAt(0)+s.substr(2)):Number(s),f&&o>1&&p-1>o&&(m[r++]=(h+m[r-2])/2),m[r++]=h;for(p=r-e+1,r=0,o=0;p>o;o+=e)h=m[o],i=m[o+1],k=m[o+2],l=2===e?0:m[o+3],m[r++]=s=3===e?new j(h,i,k,l):new j(h,(2*i+h)/3,(2*i+k)/3,k);m.length=r}return d},n=function(a,b,c,d){var h,i,k,l,m,n,e=[];if(d)for(a=[d].concat(a),i=a.length;--i>-1;)"string"==typeof(n=a[i][b])&&"="===n.charAt(1)&&(a[i][b]=d[b]+Number(n.charAt(0)+n.substr(2)));if(h=a.length-2,0>h)return e[0]=new j(a[0][b],0,0,a[-1>h?0:1][b]),e;for(i=0;h>i;i++)k=a[i][b],l=a[i+1][b],e[i]=new j(k,0,0,l),c&&(m=a[i+2][b],f[i]=(f[i]||0)+(l-k)*(l-k),g[i]=(g[i]||0)+(m-l)*(m-l));return e[i]=new j(a[i][b],0,0,a[i+1][b]),e},o=function(a,b,c,d,e){var l,m,n,o,q,r,s,t,u,v,w,x,y,i=a.length-1,j=0,k=a[0].a;for(l=0;i>l;l++)q=a[j],m=q.a,n=q.d,o=a[j+1].d,e?(w=f[l],x=g[l],y=.25*(x+w)*b/(d?.5:h[l]||.5),r=n-(n-m)*(d?.5*b:y/w),s=n+(o-n)*(d?.5*b:y/x),t=n-(r+(s-r)*(3*w/(w+x)+.5)/4)):(r=n-.5*(n-m)*b,s=n+.5*(o-n)*b,t=n-(r+s)/2),r+=t,s+=t,q.c=u=r,q.b=0!==l?k:k=q.a+.6*(q.c-q.a),q.da=n-m,q.ca=u-m,q.ba=k-m,c?(v=p(m,k,u,n),a.splice(j,1,v[0],v[1],v[2],v[3]),j+=4):j++,k=s;q=a[j],q.b=k,q.c=k+.4*(q.d-k),q.da=q.d-q.a,q.ca=q.c-q.a,q.ba=k-q.a,c&&(v=p(q.a,k,q.c,q.d),a.splice(j,1,v[0],v[1],v[2],v[3]))},p=b.cubicToQuadratic=function(a,b,c,d){var e={a:a},f={},g={},h={c:d},i=(a+b)/2,j=(b+c)/2,k=(c+d)/2,l=(i+j)/2,m=(j+k)/2,n=(m-l)/8;return e.b=i+(a-i)/4,f.b=l+n,e.c=f.a=(e.b+f.b)/2,f.c=g.a=(l+m)/2,g.b=m-n,h.b=k+(d-k)/4,g.c=h.a=(g.b+h.b)/2,[e,f,g,h]},q=function(a,b){b=b>>0||6;var j,k,l,m,c=[],d=[],e=0,f=0,g=b-1,h=[],i=[];for(j in a)r(a[j],c,b);for(l=c.length,k=0;l>k;k++)e+=Math.sqrt(c[k]),m=k%b,i[m]=e,m===g&&(f+=e,m=k/b>>0,h[m]=i,d[m]=f,e=0,i=[]);return{length:f,lengths:d,segments:h}},r=function(a,b,c){for(var f,g,h,i,j,k,l,m,n,o,p,d=1/c,e=a.length;--e>-1;)for(o=a[e],h=o.a,i=o.d-h,j=o.c-h,k=o.b-h,f=g=0,m=1;c>=m;m++)l=d*m,n=1-l,f=g-(g=(l*l*i+3*n*(l*j+n*k))*l),p=e*c+m-1,b[p]=(b[p]||0)+f*f};return c.constructor=b,b.API=2,b._autoCSS=!0,b.quadraticToCubic=function(a,b,c){return new j(a,(2*b+a)/3,(2*b+c)/3,c)},b._cssRegister=function(){var a=(window.GreenSockGlobals||window).com.greensock.plugins.CSSPlugin;if(a){var c=a._internals,d=c._parseToProxy,f=c._setPluginRatio,g=c.CSSPropTween;c._registerComplexSpecialProp("bezier",null,function(a,c,h,i,j,k){c instanceof Array&&(c={values:c}),k=new b;var p,q,r,l=c.values,m=l.length-1,n=[],o={};if(0>m)return j;for(p=0;m>=p;p++)r=d(a,l[p],i,j,k,m!==p),n[p]=r.end;for(q in c)o[q]=c[q];return o.values=n,j=new g(a,"bezier",0,0,r.pt,2),j.data=r,j.plugin=k,j.setRatio=f,0===o.autoRotate&&(o.autoRotate=!0),o.autoRotate&&(o.autoRotate instanceof Array||(p=o.autoRotate===!0?0:Number(o.autoRotate)*e,o.autoRotate=null!=r.end.left?[["left","top","rotation",p,!0]]:null!=r.end.x?[["x","y","rotation",p,!0]]:!1)),o.autoRotate&&(i._transform||i._enableTransforms(!1),r.autoRotate=i._target._gsTransform),k._onInitTween(r.proxy,o,i._tween),j})}},c._onInitTween=function(a,b,c){this._target=a,b instanceof Array&&(b={values:b}),this._props=[],this._timeRes=null==b.timeResolution?6:parseInt(b.timeResolution,10);var h,i,j,k,n,d=b.values||[],e={},f=d[0],g=b.autoRotate||c.vars.orientToBezier;this._autoRotate=g?g instanceof Array?g:[["x","y","rotation",g===!0?0:Number(g)||0]]:null;for(h in f)this._props.push(h);for(j=this._props.length;--j>-1;)h=this._props[j],this._overwriteProps.push(h),i=this._func[h]="function"==typeof a[h],e[h]=i?a[h.indexOf("set")||"function"!=typeof a["get"+h.substr(3)]?h:"get"+h.substr(3)]():parseFloat(a[h]),n||e[h]!==d[0][h]&&(n=e);if(this._beziers="cubic"!==b.type&&"quadratic"!==b.type&&"soft"!==b.type?l(d,isNaN(b.curviness)?1:b.curviness,!1,"thruBasic"===b.type,b.correlate,n):m(d,b.type,e),this._segCount=this._beziers[h].length,this._timeRes){var o=q(this._beziers,this._timeRes);this._length=o.length,this._lengths=o.lengths,this._segments=o.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(g=this._autoRotate)for(g[0]instanceof Array||(this._autoRotate=g=[g]),j=g.length;--j>-1;)for(k=0;3>k;k++)h=g[j][k],this._func[h]="function"==typeof a[h]?a[h.indexOf("set")||"function"!=typeof a["get"+h.substr(3)]?h:"get"+h.substr(3)]:!1;return!0},c.setRatio=function(a){var f,g,h,i,j,k,l,m,n,o,b=this._segCount,c=this._func,e=this._target;if(this._timeRes){if(n=this._lengths,o=this._curSeg,a*=this._length,h=this._li,a>this._l2&&b-1>h){for(m=b-1;m>h&&a>=(this._l2=n[++h]););this._l1=n[h-1],this._li=h,this._curSeg=o=this._segments[h],this._s2=o[this._s1=this._si=0]}else if(this._l1>a&&h>0){for(;h>0&&(this._l1=n[--h])>=a;);0===h&&this._l1>a?this._l1=0:h++,this._l2=n[h],this._li=h,this._curSeg=o=this._segments[h],this._s1=o[(this._si=o.length-1)-1]||0,this._s2=o[this._si]}if(f=h,a-=this._l1,h=this._si,a>this._s2&&o.length-1>h){for(m=o.length-1;m>h&&a>=(this._s2=o[++h]););this._s1=o[h-1],this._si=h}else if(this._s1>a&&h>0){for(;h>0&&(this._s1=o[--h])>=a;);0===h&&this._s1>a?this._s1=0:h++,this._s2=o[h],this._si=h}k=(h+(a-this._s1)/(this._s2-this._s1))*this._prec}else f=0>a?0:a>=1?b-1:b*a>>0,k=(a-f*(1/b))*b;for(g=1-k,h=this._props.length;--h>-1;)i=this._props[h],j=this._beziers[i][f],l=(k*k*j.da+3*g*(k*j.ca+g*j.ba))*k+j.a,this._round[i]&&(l=l+(l>0?.5:-.5)>>0),c[i]?e[i](l):e[i]=l;if(this._autoRotate){var q,r,s,t,u,v,w,p=this._autoRotate;for(h=p.length;--h>-1;)i=p[h][2],v=p[h][3]||0,w=p[h][4]===!0?1:d,j=this._beziers[p[h][0]][f],q=this._beziers[p[h][1]][f],r=j.a+(j.b-j.a)*k,t=j.b+(j.c-j.b)*k,r+=(t-r)*k,t+=(j.c+(j.d-j.c)*k-t)*k,s=q.a+(q.b-q.a)*k,u=q.b+(q.c-q.b)*k,s+=(u-s)*k,u+=(q.c+(q.d-q.c)*k-u)*k,l=Math.atan2(u-s,t-r)*w+v,c[i]?c[i].call(e,l):e[i]=l}},c._roundProps=function(a,b){for(var c=this._overwriteProps,d=c.length;--d>-1;)(a[c[d]]||a.bezier||a.bezierThrough)&&(this._round[c[d]]=b)},c._kill=function(b){var d,e,c=this._props;for(d in this._beziers)if(d in b)for(delete this._beziers[d],delete this._func[d],e=c.length;--e>-1;)c[e]===d&&c.splice(e,1);return a.prototype._kill.call(this,b)},a.activate([b]),b},!0),_gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(a){"use strict";var d,e,f,g,c=function(){a.call(this,"css"),this._overwriteProps.length=0},h={},i=c.prototype=new a("css");i.constructor=c,c.version="1.8.1",c.API=2,c.defaultTransformPerspective=0,i="px",c.suffixMap={top:i,right:i,bottom:i,left:i,width:i,height:i,fontSize:i,padding:i,margin:i,perspective:i};var G,H,I,J,K,L,j=/(?:\d|\-\d|\.\d|\-\.\d)+/g,k=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,l=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,m=/[^\d\-\.]/g,n=/(?:\d|\-|\+|=|#|\.)*/g,o=/opacity *= *([^)]*)/,p=/opacity:([^;]*)/,q=/alpha\(opacity *=.+?\)/i,r=/([A-Z])/g,s=/-([a-z])/gi,t=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,u=function(a,b){return b.toUpperCase()},v=/(?:Left|Right|Width)/i,w=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,x=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,y=Math.PI/180,z=180/Math.PI,A={},B=document,C=B.createElement("div"),D=B.createElement("img"),E=c._internals={_specialProps:h},F=navigator.userAgent,M=function(){var c,a=F.indexOf("Android"),b=B.createElement("div");
return I=-1!==F.indexOf("Safari")&&-1===F.indexOf("Chrome")&&(-1===a||Number(F.substr(a+8,1))>3),K=I&&6>Number(F.substr(F.indexOf("Version/")+8,1)),J=-1!==F.indexOf("Firefox"),/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(F),L=parseFloat(RegExp.$1),b.innerHTML="<a style='top:1px;opacity:.55;'>a</a>",c=b.getElementsByTagName("a")[0],c?/^0.55/.test(c.style.opacity):!1}(),N=function(a){return o.test("string"==typeof a?a:(a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100:1},O=function(a){window.console&&console.log(a)},P="",Q="",R=function(a,b){b=b||C;var d,e,c=b.style;if(void 0!==c[a])return a;for(a=a.charAt(0).toUpperCase()+a.substr(1),d=["O","Moz","ms","Ms","Webkit"],e=5;--e>-1&&void 0===c[d[e]+a];);return e>=0?(Q=3===e?"ms":d[e],P="-"+Q.toLowerCase()+"-",Q+a):null},S=B.defaultView?B.defaultView.getComputedStyle:function(){},T=c.getStyle=function(a,b,c,d,e){var f;return M||"opacity"!==b?(!d&&a.style[b]?f=a.style[b]:(c=c||S(a,null))?(a=c.getPropertyValue(b.replace(r,"-$1").toLowerCase()),f=a||c.length?a:c[b]):a.currentStyle&&(c=a.currentStyle,f=c[b]),null==e||f&&"none"!==f&&"auto"!==f&&"auto auto"!==f?f:e):N(a)},U=function(a,b,c){var f,g,d={},e=a._gsOverwrittenClassNamePT;if(e&&!c){for(;e;)e.setRatio(0),e=e._next;a._gsOverwrittenClassNamePT=null}if(b=b||S(a,null))if(f=b.length)for(;--f>-1;)d[b[f].replace(s,u)]=b.getPropertyValue(b[f]);else for(f in b)d[f]=b[f];else if(b=a.currentStyle||a.style)for(f in b)d[f.replace(s,u)]=b[f];return M||(d.opacity=N(a)),g=wb(a,b,!1),d.rotation=g.rotation*z,d.skewX=g.skewX*z,d.scaleX=g.scaleX,d.scaleY=g.scaleY,d.x=g.x,d.y=g.y,vb&&(d.z=g.z,d.rotationX=g.rotationX*z,d.rotationY=g.rotationY*z,d.scaleZ=g.scaleZ),d.filters&&delete d.filters,d},V=function(a,b,c,d){var g,h,i,e={},f=a.style;for(h in c)"cssText"!==h&&"length"!==h&&isNaN(h)&&b[h]!==(g=c[h])&&-1===h.indexOf("Origin")&&("number"==typeof g||"string"==typeof g)&&(e[h]=""!==g&&"auto"!==g&&"none"!==g||"string"!=typeof b[h]||""===b[h].replace(m,"")?g:0,void 0!==f[h]&&(i=new jb(f,h,f[h],i)));if(d)for(h in d)"className"!==h&&(e[h]=d[h]);return{difs:e,firstMPT:i}},W={width:["Left","Right"],height:["Top","Bottom"]},X=["marginLeft","marginRight","marginTop","marginBottom"],Y=function(a,b,c){var d=parseFloat("width"===b?a.offsetWidth:a.offsetHeight),e=W[b],f=e.length;for(c=c||S(a,null);--f>-1;)d-=parseFloat(T(a,"padding"+e[f],c,!0))||0,d-=parseFloat(T(a,"border"+e[f]+"Width",c,!0))||0;return d},Z=function(a,b,c,d,e){if("px"===d||!d)return c;if("auto"===d||!c)return 0;var j,f=v.test(b),g=a,h=C.style,i=0>c;return i&&(c=-c),"%"===d&&-1!==b.indexOf("border")?j=c/100*(f?a.clientWidth:a.clientHeight):(h.cssText="border-style:solid; border-width:0; position:absolute; line-height:0;","%"!==d&&"em"!==d&&g.appendChild?h[f?"borderLeftWidth":"borderTopWidth"]=c+d:(g=a.parentNode||B.body,h[f?"width":"height"]=c+d),g.appendChild(C),j=parseFloat(C[f?"offsetWidth":"offsetHeight"]),g.removeChild(C),0!==j||e||(j=Z(a,b,c,d,!0))),i?-j:j},$=function(a,b){(null==a||""===a||"auto"===a||"auto auto"===a)&&(a="0 0");var c=a.split(" "),d=-1!==a.indexOf("left")?"0%":-1!==a.indexOf("right")?"100%":c[0],e=-1!==a.indexOf("top")?"0%":-1!==a.indexOf("bottom")?"100%":c[1];return null==e?e="0":"center"===e&&(e="50%"),("center"===d||isNaN(parseFloat(d)))&&(d="50%"),b&&(b.oxp=-1!==d.indexOf("%"),b.oyp=-1!==e.indexOf("%"),b.oxr="="===d.charAt(1),b.oyr="="===e.charAt(1),b.ox=parseFloat(d.replace(m,"")),b.oy=parseFloat(e.replace(m,""))),d+" "+e+(c.length>2?" "+c[2]:"")},_=function(a,b){return"string"==typeof a&&"="===a.charAt(1)?parseInt(a.charAt(0)+"1",10)*parseFloat(a.substr(2)):parseFloat(a)-parseFloat(b)},ab=function(a,b){return null==a?b:"string"==typeof a&&"="===a.charAt(1)?parseInt(a.charAt(0)+"1",10)*Number(a.substr(2))+b:parseFloat(a)},bb=function(a,b){if(null==a)return b;var c=-1===a.indexOf("rad")?y:1,d="="===a.charAt(1);return a=Number(a.replace(m,""))*c,d?a+b:a},cb=function(a,b){var c="number"==typeof a?a*y:bb(a,b),d=(c-b)%(2*Math.PI);return d!==d%Math.PI&&(d+=Math.PI*(0>d?2:-2)),b+d},db={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},eb=function(a){if(!a||""===a)return db.black;if(db[a])return db[a];if("number"==typeof a)return[a>>16,255&a>>8,255&a];if("#"===a.charAt(0)){if(4===a.length){var b=a.charAt(1),c=a.charAt(2),d=a.charAt(3);a="#"+b+b+c+c+d+d}return a=parseInt(a.substr(1),16),[a>>16,255&a>>8,255&a]}return a=a.match(j)||db.transparent,a[0]=Number(a[0]),a[1]=Number(a[1]),a[2]=Number(a[2]),a.length>3&&(a[3]=Number(a[3])),a},fb="(?:\\b(?:(?:rgb|rgba)\\(.+?\\))|\\B#.+?\\b";for(i in db)fb+="|"+i+"\\b";fb=RegExp(fb+")","gi");var gb=function(a,b,c){if(null==a)return function(a){return a};var d=b?(a.match(fb)||[""])[0]:"",e=a.split(d).join("").match(l)||[],f=a.substr(0,a.indexOf(e[0])),g=")"===a.charAt(a.length-1)?")":"",h=-1!==a.indexOf(" ")?" ":",",i=e.length,k=i>0?e[0].replace(j,""):"";return b?function(a){"number"==typeof a&&(a+=k);var b=(a.match(fb)||[d])[0],j=a.split(b).join("").match(l)||[],m=j.length;if(i>m--)for(;i>++m;)j[m]=c?j[(m-1)/2>>0]:e[m];return f+j.join(h)+h+b+g}:function(a){"number"==typeof a&&(a+=k);var b=a.match(l)||[],d=b.length;if(i>d--)for(;i>++d;)b[d]=c?b[(d-1)/2>>0]:e[d];return f+b.join(h)+g}},hb=function(a){return a=a.split(","),function(b,c,d,e,f,g,h){var j,i=(c+"").split(" ");for(h={},j=0;4>j;j++)h[a[j]]=i[j]=i[j]||i[(j-1)/2>>0];return e.parse(b,h,f,g)}},jb=(E._setPluginRatio=function(a){this.plugin.setRatio(a);for(var f,g,h,i,b=this.data,c=b.proxy,d=b.firstMPT,e=1e-6;d;)f=c[d.v],d.r?f=f>0?f+.5>>0:f-.5>>0:e>f&&f>-e&&(f=0),d.t[d.p]=f,d=d._next;if(b.autoRotate&&(b.autoRotate.rotation=c.rotation),1===a)for(d=b.firstMPT;d;){if(g=d.t,g.type){if(1===g.type){for(i=g.xs0+g.s+g.xs1,h=1;g.l>h;h++)i+=g["xn"+h]+g["xs"+(h+1)];g.e=i}}else g.e=g.s+g.xs0;d=d._next}},function(a,b,c,d,e){this.t=a,this.p=b,this.v=c,this.r=e,d&&(d._prev=this,this._next=d)}),lb=(E._parseToProxy=function(a,b,c,d,e,f){var l,m,n,o,p,g=d,h={},i={},j=c._transform,k=A;for(c._transform=null,A=b,d=p=c.parse(a,b,d,e),A=k,f&&(c._transform=j,g&&(g._prev=null,g._prev&&(g._prev._next=null)));d&&d!==g;){if(1>=d.type&&(m=d.p,i[m]=d.s+d.c,h[m]=d.s,f||(o=new jb(d,"s",m,o,d.r),d.c=0),1===d.type))for(l=d.l;--l>0;)n="xn"+l,m=d.p+"_"+n,i[m]=d.data[n],h[m]=d[n],f||(o=new jb(d,n,m,o,d.rxp[n]));d=d._next}return{proxy:h,end:i,firstMPT:o,pt:p}},E.CSSPropTween=function(a,b,c,e,f,h,i,j,k,l,m){this.t=a,this.p=b,this.s=c,this.c=e,this.n=i||"css_"+b,a instanceof lb||g.push(this.n),this.r=j,this.type=h||0,k&&(this.pr=k,d=!0),this.b=void 0===l?c:l,this.e=void 0===m?c+e:m,f&&(this._next=f,f._prev=this)}),mb=c.parseComplex=function(a,b,c,d,e,f,g,h,i,l){g=new lb(a,b,0,0,g,l?2:1,null,!1,h,c,d);var q,r,s,t,u,v,w,x,y,z,A,B,m=c.split(", ").join(",").split(" "),n=(d+"").split(", ").join(",").split(" "),o=m.length,p=G!==!1;for(o!==n.length&&(m=(f||"").split(" "),o=m.length),g.plugin=i,g.setRatio=l,q=0;o>q;q++)if(t=m[q],u=n[q],x=parseFloat(t),x||0===x)g.appendXtra("",x,_(u,x),u.replace(k,""),p&&-1!==u.indexOf("px"),!0);else if(e&&("#"===t.charAt(0)||0===t.indexOf("rgb")||db[t]))t=eb(t),u=eb(u),y=t.length+u.length>6,y&&!M&&0===u[3]?(g["xs"+g.l]+=g.l?" transparent":"transparent",g.e=g.e.split(n[q]).join("transparent")):(M||(y=!1),g.appendXtra(y?"rgba(":"rgb(",t[0],u[0]-t[0],",",!0,!0).appendXtra("",t[1],u[1]-t[1],",",!0).appendXtra("",t[2],u[2]-t[2],y?",":")",!0),y&&(t=4>t.length?1:t[3],g.appendXtra("",t,(4>u.length?1:u[3])-t,")",!1)));else if(v=t.match(j)){if(w=u.match(k),!w||w.length!==v.length)return g;for(s=0,r=0;v.length>r;r++)A=v[r],z=t.indexOf(A,s),g.appendXtra(t.substr(s,z-s),Number(A),_(w[r],A),"",p&&"px"===t.substr(z+A.length,2),0===r),s=z+A.length;g["xs"+g.l]+=t.substr(s)}else g["xs"+g.l]+=g.l?" "+t:t;if(-1!==d.indexOf("=")&&g.data){for(B=g.xs0+g.data.s,q=1;g.l>q;q++)B+=g["xs"+q]+g.data["xn"+q];g.e=B+g["xs"+q]}return g.l||(g.type=-1,g.xs0=g.e),g.xfirst||g},nb=9;for(i=lb.prototype,i.l=i.pr=0;--nb>0;)i["xn"+nb]=0,i["xs"+nb]="";i.xs0="",i._next=i._prev=i.xfirst=i.data=i.plugin=i.setRatio=i.rxp=null,i.appendXtra=function(a,b,c,d,e,f){var g=this,h=g.l;return g["xs"+h]+=f&&h?" "+a:a||"",c||0===h||g.plugin?(g.l++,g.type=g.setRatio?2:1,g["xs"+g.l]=d||"",h>0?(g.data["xn"+h]=b+c,g.rxp["xn"+h]=e,g["xn"+h]=b,g.plugin||(g.xfirst=new lb(g,"xn"+h,b,c,g.xfirst||g,0,g.n,e,g.pr),g.xfirst.xs0=0),g):(g.data={s:b+c},g.rxp={},g.s=b,g.c=c,g.r=e,g)):(g["xs"+h]+=b+(d||""),g)};var ob=function(a,b,c,d,e,f,g){this.p=d?R(a)||a:a,h[a]=h[this.p]=this,this.format=f||gb(b,e),c&&(this.parse=c),this.clrs=e,this.dflt=b,this.pr=g||0},pb=E._registerComplexSpecialProp=function(a,b,c,d,e,f,g){for(var k,h=a.split(","),i=b instanceof Array?b:[b],j=h.length;--j>-1;)k=new ob(h[j],i[j],c,d&&0===j,e,f,g)},qb=function(a){if(!h[a]){var b=a.charAt(0).toUpperCase()+a.substr(1)+"Plugin";pb(a,null,function(a,c,d,e,f,g,i){var j=(window.GreenSockGlobals||window).com.greensock.plugins[b];return j?(j._cssRegister(),h[d].parse(a,c,d,e,f,g,i)):(O("Error: "+b+" js file not loaded."),f)})}};i=ob.prototype,i.parseComplex=function(a,b,c,d,e,f){return mb(a,this.p,b,c,this.clrs,this.dflt,d,this.pr,e,f)},i.parse=function(a,b,c,d,e,g){return this.parseComplex(a.style,this.format(T(a,c,f,!1,this.dflt)),this.format(b),e,g)},c.registerSpecialProp=function(a,b,c){pb(a,null,function(a,d,e,f,g,h){var j=new lb(a,e,0,0,g,2,e,!1,c);return j.plugin=h,j.setRatio=b(a,d,f._tween,e),j},!1,!1,null,c)};var rb=["scaleX","scaleY","scaleZ","x","y","z","skewX","rotation","rotationX","rotationY","perspective"],sb=R("transform"),tb=P+"transform",ub=R("transformOrigin"),vb=null!==R("perspective"),wb=function(a,b,d){var l,m,n,o,p,q,r,s,t,u,v,x,e=d?a._gsTransform||{skewY:0}:{skewY:0},f=0>e.scaleX,g=2e-5,h=1e5,i=-Math.PI+1e-4,j=Math.PI-1e-4,k=vb?parseFloat(T(a,ub,b,!1,"0 0 0").split(" ")[2])||e.zOrigin||0:0;for(sb?l=T(a,tb,b,!0):a.currentStyle&&(l=a.currentStyle.filter.match(w),l=l&&4===l.length?l[0].substr(4)+","+Number(l[2].substr(4))+","+Number(l[1].substr(4))+","+l[3].substr(4)+","+(e?e.x:0)+","+(e?e.y:0):null),m=(l||"").match(/(?:\-|\b)[\d\-\.e]+\b/gi)||[],n=m.length;--n>-1;)o=Number(m[n]),m[n]=(o*h+(0>o?-.5:.5)>>0)/h;if(16===m.length){var y=m[8],z=m[9],A=m[10],B=m[12],C=m[13],D=m[14];if(e.zOrigin&&(D=-e.zOrigin,B=y*D-m[12],C=z*D-m[13],D=A*D+e.zOrigin-m[14]),!d||B!==e.x||C!==e.y||D!==e.z){var P,Q,R,S,U,V,W,X,E=m[0],F=m[1],G=m[2],H=m[3],I=m[4],J=m[5],K=m[6],L=m[7],M=m[11],N=e.rotationX=Math.atan2(K,A),O=i>N||N>j;N&&(U=Math.cos(-N),V=Math.sin(-N),P=I*U+y*V,Q=J*U+z*V,R=K*U+A*V,S=L*U+M*V,y=I*-V+y*U,z=J*-V+z*U,A=K*-V+A*U,M=L*-V+M*U,I=P,J=Q,K=R),N=e.rotationY=Math.atan2(y,E),N&&(W=i>N||N>j,U=Math.cos(-N),V=Math.sin(-N),P=E*U-y*V,Q=F*U-z*V,R=G*U-A*V,S=H*U-M*V,z=F*V+z*U,A=G*V+A*U,M=H*V+M*U,E=P,F=Q,G=R),N=e.rotation=Math.atan2(F,J),N&&(X=i>N||N>j,U=Math.cos(-N),V=Math.sin(-N),E=E*U+I*V,Q=F*U+J*V,J=F*-V+J*U,K=G*-V+K*U,F=Q),X&&O?e.rotation=e.rotationX=0:X&&W?e.rotation=e.rotationY=0:W&&O&&(e.rotationY=e.rotationX=0),e.scaleX=(Math.sqrt(E*E+F*F)*h+.5>>0)/h,e.scaleY=(Math.sqrt(J*J+z*z)*h+.5>>0)/h,e.scaleZ=(Math.sqrt(K*K+A*A)*h+.5>>0)/h,e.skewX=0,e.perspective=M?1/M:0,e.x=B,e.y=C,e.z=D}}else if(!vb||0===m.length||e.x!==m[4]||e.y!==m[5]||!e.rotationX&&!e.rotationY){var Y=m.length>=6,Z=Y?m[0]:1,$=m[1]||0,_=m[2]||0,ab=Y?m[3]:1;e.x=m[4]||0,e.y=m[5]||0,p=Math.sqrt(Z*Z+$*$),q=Math.sqrt(ab*ab+_*_),r=Z||$?Math.atan2($,Z):e.rotation||0,s=_||ab?Math.atan2(_,ab)+r:e.skewX||0,t=p-Math.abs(e.scaleX||0),u=q-Math.abs(e.scaleY||0),Math.abs(s)>Math.PI/2&&Math.abs(s)<1.5*Math.PI&&(f?(p*=-1,s+=0>=r?Math.PI:-Math.PI,r+=0>=r?Math.PI:-Math.PI):(q*=-1,s+=0>=s?Math.PI:-Math.PI)),v=(r-e.rotation)%Math.PI,x=(s-e.skewX)%Math.PI,(void 0===e.skewX||t>g||-g>t||u>g||-g>u||v>i&&j>v&&0!==v*h>>0||x>i&&j>x&&0!==x*h>>0)&&(e.scaleX=p,e.scaleY=q,e.rotation=r,e.skewX=s),vb&&(e.rotationX=e.rotationY=e.z=0,e.perspective=parseFloat(c.defaultTransformPerspective)||0,e.scaleZ=1)}e.zOrigin=k;for(n in e)g>e[n]&&e[n]>-g&&(e[n]=0);return d&&(a._gsTransform=e),e},xb=function(a){var l,m,b=this.data,c=-b.rotation,d=c+b.skewX,e=1e5,f=(Math.cos(c)*b.scaleX*e>>0)/e,g=(Math.sin(c)*b.scaleX*e>>0)/e,h=(Math.sin(d)*-b.scaleY*e>>0)/e,i=(Math.cos(d)*b.scaleY*e>>0)/e,j=this.t.style,k=this.t.currentStyle;if(k){m=g,g=-h,h=-m,l=k.filter,j.filter="";var v,w,p=this.t.offsetWidth,q=this.t.offsetHeight,r="absolute"!==k.position,s="progid:DXImageTransform.Microsoft.Matrix(M11="+f+", M12="+g+", M21="+h+", M22="+i,t=b.x,u=b.y;if(null!=b.ox&&(v=(b.oxp?.01*p*b.ox:b.ox)-p/2,w=(b.oyp?.01*q*b.oy:b.oy)-q/2,t+=v-(v*f+w*g),u+=w-(v*h+w*i)),r)v=p/2,w=q/2,s+=", Dx="+(v-(v*f+w*g)+t)+", Dy="+(w-(v*h+w*i)+u)+")";else{var z,A,B,y=8>L?1:-1;for(v=b.ieOffsetX||0,w=b.ieOffsetY||0,b.ieOffsetX=Math.round((p-((0>f?-f:f)*p+(0>g?-g:g)*q))/2+t),b.ieOffsetY=Math.round((q-((0>i?-i:i)*q+(0>h?-h:h)*p))/2+u),nb=0;4>nb;nb++)A=X[nb],z=k[A],m=-1!==z.indexOf("px")?parseFloat(z):Z(this.t,A,parseFloat(z),z.replace(n,""))||0,B=m!==b[A]?2>nb?-b.ieOffsetX:-b.ieOffsetY:2>nb?v-b.ieOffsetX:w-b.ieOffsetY,j[A]=(b[A]=Math.round(m-B*(0===nb||2===nb?1:y)))+"px";s+=", sizingMethod='auto expand')"}j.filter=-1!==l.indexOf("DXImageTransform.Microsoft.Matrix(")?l.replace(x,s):s+" "+l,(0===a||1===a)&&1===f&&0===g&&0===h&&1===i&&(r&&-1===s.indexOf("Dx=0, Dy=0")||o.test(l)&&100!==parseFloat(RegExp.$1)||-1===l.indexOf("gradient(")&&j.removeAttribute("filter"))}},yb=function(){var x,y,z,A,B,C,D,E,F,b=this.data,c=this.t.style,d=b.perspective,e=b.scaleX,f=0,g=0,h=0,i=0,j=b.scaleY,k=0,l=0,m=0,n=0,o=b.scaleZ,p=0,q=0,r=0,s=d?-1/d:0,t=b.rotation,u=b.zOrigin,v=",",w=1e5;J&&(D=T(this.t,"top",null,!1,"0"),E=parseFloat(D)||0,F=D.substr((E+"").length),b._ffFix=!b._ffFix,c.top=(b._ffFix?E+.05:E-.05)+(""===F?"px":F)),(t||b.skewX)&&(z=e*Math.cos(t),A=j*Math.sin(t),t-=b.skewX,f=e*-Math.sin(t),j*=Math.cos(t),e=z,i=A),t=b.rotationY,t&&(x=Math.cos(t),y=Math.sin(t),z=e*x,A=i*x,B=o*-y,C=s*-y,g=e*y,k=i*y,o*=x,s*=x,e=z,i=A,m=B,q=C),t=b.rotationX,t&&(x=Math.cos(t),y=Math.sin(t),z=f*x+g*y,A=j*x+k*y,B=n*x+o*y,C=r*x+s*y,g=f*-y+g*x,k=j*-y+k*x,o=n*-y+o*x,s=r*-y+s*x,f=z,j=A,n=B,r=C),u&&(p-=u,h=g*p,l=k*p,p=o*p+u),h+=b.x,l+=b.y,p=((p+b.z)*w>>0)/w,c[sb]="matrix3d("+(e*w>>0)/w+v+(i*w>>0)/w+v+(m*w>>0)/w+v+(q*w>>0)/w+v+(f*w>>0)/w+v+(j*w>>0)/w+v+(n*w>>0)/w+v+(r*w>>0)/w+v+(g*w>>0)/w+v+(k*w>>0)/w+v+(o*w>>0)/w+v+(s*w>>0)/w+v+(h*w>>0)/w+v+(l*w>>0)/w+v+p+v+(d?1+-p/d:1)+")"},zb=function(){var d,e,f,g,h,i,j,k,b=this.data,c=this.t;J&&(d=T(c,"top",null,!1,"0"),e=parseFloat(d)||0,f=d.substr((e+"").length),b._ffFix=!b._ffFix,c.style.top=(b._ffFix?e+.05:e-.05)+(""===f?"px":f)),b.rotation||b.skewX?(g=b.rotation,h=g-b.skewX,i=1e5,j=b.scaleX*i,k=b.scaleY*i,c.style[sb]="matrix("+(Math.cos(g)*j>>0)/i+","+(Math.sin(g)*j>>0)/i+","+(Math.sin(h)*-k>>0)/i+","+(Math.cos(h)*k>>0)/i+","+b.x+","+b.y+")"):c.style[sb]="matrix("+b.scaleX+",0,0,"+b.scaleY+","+b.x+","+b.y+")"};pb("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,transformPerspective",null,function(a,b,c,d,e,g,h){if(d._transform)return e;var n,o,p,q,r,s,t,i=d._transform=wb(a,f,!0),j=a.style,k=1e-6,l=rb.length,m=h;for("string"==typeof m.transform&&sb?(q=j[sb],j[sb]=m.transform,n=wb(a,null,!1),j[sb]=q):"object"==typeof m&&(o=null!=m.rotation?m.rotation:null!=m.rotationZ?m.rotationZ:i.rotation*z,n={scaleX:ab(null!=m.scaleX?m.scaleX:m.scale,i.scaleX),scaleY:ab(null!=m.scaleY?m.scaleY:m.scale,i.scaleY),scaleZ:ab(null!=m.scaleZ?m.scaleZ:m.scale,i.scaleZ),x:ab(m.x,i.x),y:ab(m.y,i.y),z:ab(m.z,i.z),perspective:ab(m.transformPerspective,i.perspective)},n.rotation=null!=m.shortRotation||null!=m.shortRotationZ?cb(m.shortRotation||m.shortRotationZ||0,i.rotation):"number"==typeof o?o*y:bb(o,i.rotation),vb&&(n.rotationX=null!=m.shortRotationX?cb(m.shortRotationX,i.rotationX):"number"==typeof m.rotationX?m.rotationX*y:bb(m.rotationX,i.rotationX),n.rotationY=null!=m.shortRotationY?cb(m.shortRotationY,i.rotationY):"number"==typeof m.rotationY?m.rotationY*y:bb(m.rotationY,i.rotationY),k>n.rotationX&&n.rotationX>-k&&(n.rotationX=0),k>n.rotationY&&n.rotationY>-k&&(n.rotationY=0)),n.skewX=null==m.skewX?i.skewX:"number"==typeof m.skewX?m.skewX*y:bb(m.skewX,i.skewX),n.skewY=null==m.skewY?i.skewY:"number"==typeof m.skewY?m.skewY*y:bb(m.skewY,i.skewY),(p=n.skewY-i.skewY)&&(n.skewX+=p,n.rotation+=p),k>n.skewY&&n.skewY>-k&&(n.skewY=0),k>n.skewX&&n.skewX>-k&&(n.skewX=0),k>n.rotation&&n.rotation>-k&&(n.rotation=0)),s=i.z||i.rotationX||i.rotationY||n.z||n.rotationX||n.rotationY||n.perspective,s||null==n.scale||(n.scaleZ=1);--l>-1;)c=rb[l],r=n[c]-i[c],(r>k||-k>r||null!=A[c])&&(t=!0,e=new lb(i,c,i[c],r,e),e.xs0=0,e.plugin=g,d._overwriteProps.push(e.n));return r=m.transformOrigin,(r||vb&&s&&i.zOrigin)&&(sb?(t=!0,r=(r||T(a,c,f,!1,"50% 50%"))+"",c=ub,e=new lb(j,c,0,0,e,-1,"css_transformOrigin"),e.b=j[c],e.plugin=g,vb?(q=i.zOrigin,r=r.split(" "),i.zOrigin=(r.length>2?parseFloat(r[2]):q)||0,e.xs0=e.e=j[c]=r[0]+" "+(r[1]||"50%")+" 0px",e=new lb(i,"zOrigin",0,0,e,-1,e.n),e.b=q,e.xs0=e.e=i.zOrigin):e.xs0=e.e=j[c]=r):$(r+"",i)),t&&(d._transformType=s||3===this._transformType?3:2),e},!0),pb("boxShadow","0px 0px 0px 0px #999",function(a,b,c,d,e,g){var h=-1!==(b+"").indexOf("inset")?" inset":"";return this.parseComplex(a.style,this.format(T(a,this.p,f,!1,this.dflt))+h,this.format(b)+h,e,g)},!0,!0),pb("borderRadius","0px",function(a,b,c,d,g){b=this.format(b);var k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,i=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],j=a.style;for(s=parseFloat(a.offsetWidth),t=parseFloat(a.offsetHeight),k=b.split(" "),l=0;i.length>l;l++)this.p.indexOf("border")&&(i[l]=R(i[l])),o=n=T(a,i[l],f,!1,"0px"),-1!==o.indexOf(" ")&&(n=o.split(" "),o=n[0],n=n[1]),p=m=k[l],q=parseFloat(o),v=o.substr((q+"").length),w="="===p.charAt(1),w?(r=parseInt(p.charAt(0)+"1",10),p=p.substr(2),r*=parseFloat(p),u=p.substr((r+"").length-(0>r?1:0))||""):(r=parseFloat(p),u=p.substr((r+"").length)),""===u&&(u=e[c]||v),u!==v&&(x=Z(a,"borderLeft",q,v),y=Z(a,"borderTop",q,v),"%"===u?(o=100*(x/s)+"%",n=100*(y/t)+"%"):"em"===u?(z=Z(a,"borderLeft",1,"em"),o=x/z+"em",n=y/z+"em"):(o=x+"px",n=y+"px"),w&&(p=parseFloat(o)+r+u,m=parseFloat(n)+r+u)),g=mb(j,i[l],o+" "+n,p+" "+m,!1,"0px",g);return g},!0,!1,gb("0px 0px 0px 0px",!1,!0)),pb("backgroundPosition","0 0",function(a,b,c,d,e,g){var l,m,n,o,p,h="background-position",i=f||S(a,null),j=this.format((i?L?i.getPropertyValue(h+"-x")+" "+i.getPropertyValue(h+"-y"):i.getPropertyValue(h):a.currentStyle.backgroundPositionX+" "+a.currentStyle.backgroundPositionY)||"0 0"),k=this.format(b);if(-1!==j.indexOf("%")!=(-1!==k.indexOf("%"))){for(l=j.split(" "),m=k.split(" "),D.setAttribute("src",T(a,"backgroundImage").replace(t,"")),n=2;--n>-1;)j=l[n],o=-1!==j.indexOf("%"),o!==(-1!==m[n].indexOf("%"))&&(p=0===n?a.offsetWidth-D.width:a.offsetHeight-D.height,l[n]=o?parseFloat(j)/100*p+"px":100*(parseFloat(j)/p)+"%");j=l.join(" ")}return this.parseComplex(a.style,j,k,e,g)},!1,!1,$),pb("backgroundSize","0 0",null,!1,!1,$),pb("perspective","0px",null,!0),pb("perspectiveOrigin","50% 50%",null,!0),pb("transformStyle","preserve-3d",null,!0),pb("backfaceVisibility","visible",null,!0),pb("margin",null,hb("marginTop,marginRight,marginBottom,marginLeft")),pb("padding",null,hb("paddingTop,paddingRight,paddingBottom,paddingLeft")),pb("clip","rect(0px,0px,0px,0px)"),pb("textShadow","0px 0px 0px #999",null,!1,!0),pb("autoRound,strictUnits",null,function(a,b,c,d,e){return e}),pb("border","0px solid #000",function(a,b,c,d,e,g){return this.parseComplex(a.style,this.format(T(a,"borderTopWidth",f,!1,"0px")+" "+T(a,"borderTopStyle",f,!1,"solid")+" "+T(a,"borderTopColor",f,!1,"#000")),this.format(b),e,g)},!1,!0,function(a){var b=a.split(" ");return b[0]+" "+(b[1]||"solid")+" "+(a.match(fb)||["#000"])[0]});var Ab=function(a){var e,b=this.t,c=b.filter,d=this.s+this.c*a>>0;100===d&&(-1===c.indexOf("atrix(")&&-1===c.indexOf("radient(")?(b.removeAttribute("filter"),e=!T(this.data,"filter")):(b.filter=c.replace(q,""),e=!0)),e||(this.xn1&&(b.filter=c=c||"alpha(opacity=100)"),-1===c.indexOf("opacity")?b.filter+=" alpha(opacity="+d+")":b.filter=c.replace(o,"opacity="+d))};pb("opacity,alpha,autoAlpha","1",function(a,b,c,d,e,g){var j,h=parseFloat(T(a,"opacity",f,!1,"1")),i=a.style;return b=parseFloat(b),"autoAlpha"===c&&(j=T(a,"visibility",f),1===h&&"hidden"===j&&0!==b&&(h=0),e=new lb(i,"visibility",0,0,e,-1,null,!1,0,0!==h?"visible":"hidden",0===b?"hidden":"visible"),e.xs0="visible",d._overwriteProps.push(e.n)),M?e=new lb(i,"opacity",h,b-h,e):(e=new lb(i,"opacity",100*h,100*(b-h),e),e.xn1="autoAlpha"===c?1:0,i.zoom=1,e.type=2,e.b="alpha(opacity="+e.s+")",e.e="alpha(opacity="+(e.s+e.c)+")",e.data=a,e.plugin=g,e.setRatio=Ab),e});var Bb=function(a){if(1===a||0===a){this.t.className=1===a?this.e:this.b;for(var b=this.data,c=this.t.style,d=c.removeProperty?"removeProperty":"removeAttribute";b;)b.v?c[b.p]=b.v:c[d](b.p.replace(r,"-$1").toLowerCase()),b=b._next}else this.t.className!==this.b&&(this.t.className=this.b)};for(pb("className",null,function(a,b,c,d,e,g,h){var k,l,i=a.className,j=a.style.cssText;return e=d._classNamePT=new lb(a,c,0,0,e,2),e.setRatio=Bb,e.b=i,e.e="="!==b.charAt(1)?b:"+"===b.charAt(0)?i+" "+b.substr(2):i.split(b.substr(2)).join(""),d._tween._duration&&(l=U(a,f,!0),a.className=e.e,k=V(a,l,U(a),h),a.className=i,e.data=k.firstMPT,a.style.cssText=j,e=e.xfirst=d.parse(a,k.difs,e,g)),e}),i="bezier,throwProps,physicsProps,physics2D".split(","),nb=i.length;nb--;)qb(i[nb]);return i=c.prototype,i._firstPT=null,i._onInitTween=function(a,b,h){if(!a.nodeType)return!1;this._target=a,this._tween=h,this._vars=b,G=b.autoRound,d=!1,e=b.suffixMap||c.suffixMap,f=S(a,""),g=this._overwriteProps;var j,k,l,m,n,o,q,r,s,i=a.style;if(H&&""===i.zIndex&&(j=T(a,"zIndex",f),("auto"===j||""===j)&&(i.zIndex=0)),"string"==typeof b&&(m=i.cssText,j=U(a,f),i.cssText=m+";"+b,j=V(a,j,U(a)).difs,!M&&p.test(b)&&(j.opacity=parseFloat(RegExp.$1)),b=j,i.cssText=m),this._firstPT=k=this.parse(a,b,null),this._transformType){for(s=3===this._transformType,sb?I&&(H=!0,""===i.zIndex&&(q=T(a,"zIndex",f),("auto"===q||""===q)&&(i.zIndex=0)),K&&(i.WebkitBackfaceVisibility=this._vars.WebkitBackfaceVisibility||(s?"visible":"hidden"))):i.zoom=1,l=k;l&&l._next;)l=l._next;r=new lb(a,"transform",0,0,null,2),this._linkCSSP(r,null,l),r.setRatio=s&&vb?yb:sb?zb:xb,r.data=this._transform||wb(a,f,!0),g.pop()}if(d){for(;k;){for(o=k._next,l=m;l&&l.pr>k.pr;)l=l._next;(k._prev=l?l._prev:n)?k._prev._next=k:m=k,(k._next=l)?l._prev=k:n=k,k=o}this._firstPT=m}return!0},i.parse=function(a,b,c,d){var i,j,k,l,m,n,o,p,q,r,g=a.style;for(i in b)n=b[i],j=h[i],j?c=j.parse(a,n,i,this,c,d,b):(m=T(a,i,f)+"",q="string"==typeof n,"color"===i||"fill"===i||"stroke"===i||-1!==i.indexOf("Color")||q&&!n.indexOf("rgb")?(q||(n=eb(n),n=(n.length>3?"rgba(":"rgb(")+n.join(",")+")"),c=mb(g,i,m,n,!0,"transparent",c,0,d)):!q||-1===n.indexOf(" ")&&-1===n.indexOf(",")?(k=parseFloat(m),o=k||0===k?m.substr((k+"").length):"",(""===m||"auto"===m)&&("width"===i||"height"===i?(k=Y(a,i,f),o="px"):(k="opacity"!==i?0:1,o="")),r=q&&"="===n.charAt(1),r?(l=parseInt(n.charAt(0)+"1",10),n=n.substr(2),l*=parseFloat(n),p=n.substr((l+"").length-(0>l?1:0))||""):(l=parseFloat(n),p=q?n.substr((l+"").length)||"":""),""===p&&(p=e[i]||o),n=l||0===l?(r?l+k:l)+p:b[i],o!==p&&""!==p&&(l||0===l)&&(k||0===k)&&(k=Z(a,i,k,o),"%"===p?(k/=Z(a,i,100,"%")/100,k>100&&(k=100),b.strictUnits!==!0&&(m=k+"%")):"em"===p?k/=Z(a,i,1,"em"):(l=Z(a,i,l,p),p="px"),r&&(l||0===l)&&(n=l+k+p)),r&&(l+=k),!k&&0!==k||!l&&0!==l?n||"NaN"!=n+""&&null!=n?(c=new lb(g,i,l||k||0,0,c,-1,"css_"+i,!1,0,m,n),c.xs0="display"===i&&"none"===n?m:n):O("invalid "+i+" tween value. "):(c=new lb(g,i,k,l-k,c,0,"css_"+i,G!==!1&&("px"===p||"zIndex"===i),0,m,n),c.xs0=p)):c=mb(g,i,m,n,!0,null,c,0,d)),d&&c&&!c.plugin&&(c.plugin=d);return c},i.setRatio=function(a){var d,e,f,b=this._firstPT,c=1e-6;if(1!==a||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(a||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;b;){if(d=b.c*a+b.s,b.r?d=d>0?d+.5>>0:d-.5>>0:c>d&&d>-c&&(d=0),b.type)if(1===b.type)if(f=b.l,2===f)b.t[b.p]=b.xs0+d+b.xs1+b.xn1+b.xs2;else if(3===f)b.t[b.p]=b.xs0+d+b.xs1+b.xn1+b.xs2+b.xn2+b.xs3;else if(4===f)b.t[b.p]=b.xs0+d+b.xs1+b.xn1+b.xs2+b.xn2+b.xs3+b.xn3+b.xs4;else if(5===f)b.t[b.p]=b.xs0+d+b.xs1+b.xn1+b.xs2+b.xn2+b.xs3+b.xn3+b.xs4+b.xn4+b.xs5;else{for(e=b.xs0+d+b.xs1,f=1;b.l>f;f++)e+=b["xn"+f]+b["xs"+(f+1)];b.t[b.p]=e}else-1===b.type?b.t[b.p]=b.xs0:b.setRatio&&b.setRatio(a);else b.t[b.p]=d+b.xs0;b=b._next}else for(;b;)2!==b.type?b.t[b.p]=b.b:b.setRatio(a),b=b._next;else for(;b;)2!==b.type?b.t[b.p]=b.e:b.setRatio(a),b=b._next},i._enableTransforms=function(a){this._transformType=a||3===this._transformType?3:2},i._linkCSSP=function(a,b,c,d){return a&&(b&&(b._prev=a),a._next&&(a._next._prev=a._prev),c?c._next=a:d||null!==this._firstPT||(this._firstPT=a),a._prev?a._prev._next=a._next:this._firstPT===a&&(this._firstPT=a._next),a._next=b,a._prev=c),a},i._kill=function(b){var e,f,g,c=b,d=!1;if(b.css_autoAlpha||b.css_alpha){c={};for(f in b)c[f]=b[f];c.css_opacity=1,c.css_autoAlpha&&(c.css_visibility=1)}return b.css_className&&(e=this._classNamePT)&&(g=e.xfirst,g&&g._prev?this._linkCSSP(g._prev,e._next,g._prev._prev):g===this._firstPT&&(this._firstPT=null),e._next&&this._linkCSSP(e._next,e._next._next,g._prev),this._target._gsOverwrittenClassNamePT=this._linkCSSP(e,this._target._gsOverwrittenClassNamePT),this._classNamePT=null,d=!0),a.prototype._kill.call(this,c)||d},a.activate([c]),c},!0),_gsDefine("plugins.RoundPropsPlugin",["plugins.TweenPlugin"],function(a){var b=function(){a.call(this,"roundProps",-1),this._overwriteProps.length=0},c=b.prototype=new a("roundProps",-1);return c.constructor=b,b.API=2,c._onInitTween=function(a,b,c){return this._tween=c,!0},c._onInitAllProps=function(){for(var f,g,h,a=this._tween,b=a.vars.roundProps instanceof Array?a.vars.roundProps:a.vars.roundProps.split(","),c=b.length,d={},e=a._propLookup.roundProps;--c>-1;)d[b[c]]=1;for(c=b.length;--c>-1;)for(f=b[c],g=a._firstPT;g;)h=g._next,g.pg?g.t._roundProps(d,!0):g.n===f&&(this._add(g.t,f,g.s,g.c),h&&(h._prev=g._prev),g._prev?g._prev._next=h:a._firstPT===g&&(a._firstPT=h),g._next=g._prev=null,a._propLookup[f]=e),g=h;return!1},c._add=function(a,b,c,d){this._addTween(a,b,c,c+d,b,!0),this._overwriteProps.push(b)},a.activate([b]),b},!0),_gsDefine("easing.Back",["easing.Ease"],function(a){var n,o,b=window.GreenSockGlobals||window,c=b.com.greensock,d=2*Math.PI,e=Math.PI/2,f=c._class,g=function(b,c){var d=f("easing."+b,function(){},!0),e=d.prototype=new a;return e.constructor=d,e.getRatio=c,d},h=a.register||function(){},i=function(a,b,c,d){var g=f("easing."+a,{easeOut:new b,easeIn:new c,easeInOut:new d},!0);return h(g,a),g},j=function(b,c){var d=f("easing."+b,function(a){this._p1=a||0===a?a:1.70158,this._p2=1.525*this._p1},!0),e=d.prototype=new a;return e.constructor=d,e.getRatio=c,e.config=function(a){return new d(a)},d},k=i("Back",j("BackOut",function(a){return(a-=1)*a*((this._p1+1)*a+this._p1)+1}),j("BackIn",function(a){return a*a*((this._p1+1)*a-this._p1)}),j("BackInOut",function(a){return 1>(a*=2)?.5*a*a*((this._p2+1)*a-this._p2):.5*((a-=2)*a*((this._p2+1)*a+this._p2)+2)})),l=f("easing.SlowMo",function(a,b,c){b=b||0===b?b:.7,null==a?a=.7:a>1&&(a=1),this._p=1!==a?b:0,this._p1=(1-a)/2,this._p2=a,this._p3=this._p1+this._p2,this._calcEnd=c===!0},!0),m=l.prototype=new a;return m.constructor=l,m.getRatio=function(a){var b=a+(.5-a)*this._p;return this._p1>a?this._calcEnd?1-(a=1-a/this._p1)*a:b-(a=1-a/this._p1)*a*a*a*b:a>this._p3?this._calcEnd?1-(a=(a-this._p3)/this._p1)*a:b+(a-b)*(a=(a-this._p3)/this._p1)*a*a*a:this._calcEnd?1:b},l.ease=new l(.7,.7),m.config=l.config=function(a,b,c){return new l(a,b,c)},n=f("easing.SteppedEase",function(a){a=a||1,this._p1=1/a,this._p2=a+1},!0),m=n.prototype=new a,m.constructor=n,m.getRatio=function(a){return 0>a?a=0:a>=1&&(a=.999999999),(this._p2*a>>0)*this._p1},m.config=n.config=function(a){return new n(a)},i("Bounce",g("BounceOut",function(a){return 1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375}),g("BounceIn",function(a){return 1/2.75>(a=1-a)?1-7.5625*a*a:2/2.75>a?1-(7.5625*(a-=1.5/2.75)*a+.75):2.5/2.75>a?1-(7.5625*(a-=2.25/2.75)*a+.9375):1-(7.5625*(a-=2.625/2.75)*a+.984375)}),g("BounceInOut",function(a){var b=.5>a;return a=b?1-2*a:2*a-1,a=1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375,b?.5*(1-a):.5*a+.5})),i("Circ",g("CircOut",function(a){return Math.sqrt(1-(a-=1)*a)}),g("CircIn",function(a){return-(Math.sqrt(1-a*a)-1)}),g("CircInOut",function(a){return 1>(a*=2)?-.5*(Math.sqrt(1-a*a)-1):.5*(Math.sqrt(1-(a-=2)*a)+1)})),o=function(b,c,e){var g=f("easing."+b,function(a,b){this._p1=a||1,this._p2=b||e,this._p3=this._p2/d*(Math.asin(1/this._p1)||0)},!0),h=g.prototype=new a;return h.constructor=g,h.getRatio=c,h.config=function(a,b){return new g(a,b)},g},i("Elastic",o("ElasticOut",function(a){return this._p1*Math.pow(2,-10*a)*Math.sin((a-this._p3)*d/this._p2)+1},.3),o("ElasticIn",function(a){return-(this._p1*Math.pow(2,10*(a-=1))*Math.sin((a-this._p3)*d/this._p2))},.3),o("ElasticInOut",function(a){return 1>(a*=2)?-.5*this._p1*Math.pow(2,10*(a-=1))*Math.sin((a-this._p3)*d/this._p2):.5*this._p1*Math.pow(2,-10*(a-=1))*Math.sin((a-this._p3)*d/this._p2)+1},.45)),i("Expo",g("ExpoOut",function(a){return 1-Math.pow(2,-10*a)}),g("ExpoIn",function(a){return Math.pow(2,10*(a-1))-.001}),g("ExpoInOut",function(a){return 1>(a*=2)?.5*Math.pow(2,10*(a-1)):.5*(2-Math.pow(2,-10*(a-1)))})),i("Sine",g("SineOut",function(a){return Math.sin(a*e)}),g("SineIn",function(a){return-Math.cos(a*e)+1}),g("SineInOut",function(a){return-.5*(Math.cos(Math.PI*a)-1)})),f("easing.EaseLookup",{find:function(b){return a.map[b]}},!0),h(b.SlowMo,"SlowMo","ease,"),h(n,"SteppedEase","ease,"),k},!0)}),function(a){"use strict";var e,f,g,h,b=a.GreenSockGlobals||a,c=function(a){var e,c=a.split("."),d=b;for(e=0;c.length>e;e++)d[c[e]]=d=d[c[e]]||{};return d},d=c("com.greensock"),i={},j=function(d,e,f,g){this.sc=i[d]?i[d].sc:[],i[d]=this,this.gsClass=null,this.func=f;var h=[];this.check=function(k){for(var n,o,p,q,l=e.length,m=l;--l>-1;)(n=i[e[l]]||new j(e[l],[])).gsClass?(h[l]=n.gsClass,m--):k&&n.sc.push(this);if(0===m&&f)for(o=("com.greensock."+d).split("."),p=o.pop(),q=c(o.join("."))[p]=this.gsClass=f.apply(f,h),g&&(b[p]=q,"function"==typeof define&&define.amd?define((a.GreenSockAMDPath?a.GreenSockAMDPath+"/":"")+d.split(".").join("/"),[],function(){return q}):"undefined"!=typeof module&&module.exports&&(module.exports=q)),l=0;this.sc.length>l;l++)this.sc[l].check()},this.check(!0)},k=a._gsDefine=function(a,b,c,d){return new j(a,b,c,d)},l=d._class=function(a,b,c){return b=b||function(){},k(a,[],function(){return b},c),b},m=[0,0,1,1],n=[],o=l("easing.Ease",function(a,b,c,d){this._func=a,this._type=c||0,this._power=d||0,this._params=b?m.concat(b):m},!0),p=o.map={},q=o.register=function(a,b,c,e){for(var i,j,k,m,f=b.split(","),g=f.length,h=(c||"easeIn,easeOut,easeInOut").split(",");--g>-1;)for(j=f[g],i=e?l("easing."+j,null,!0):d.easing[j]||{},k=h.length;--k>-1;)m=h[k],p[j+"."+m]=p[m+j]=i[m]=a.getRatio?a:a[m]||new a};for(g=o.prototype,g._calcEnd=!1,g.getRatio=function(a){if(this._func)return this._params[0]=a,this._func.apply(null,this._params);var b=this._type,c=this._power,d=1===b?1-a:2===b?a:.5>a?2*a:2*(1-a);return 1===c?d*=d:2===c?d*=d*d:3===c?d*=d*d*d:4===c&&(d*=d*d*d*d),1===b?1-d:2===b?d:.5>a?d/2:1-d/2},e=["Linear","Quad","Cubic","Quart","Quint,Strong"],f=e.length;--f>-1;)g=e[f]+",Power"+f,q(new o(null,null,1,f),g,"easeOut",!0),q(new o(null,null,2,f),g,"easeIn"+(0===f?",easeNone":"")),q(new o(null,null,3,f),g,"easeInOut");
p.linear=d.easing.Linear.easeIn,p.swing=d.easing.Quad.easeInOut;var r=l("events.EventDispatcher",function(a){this._listeners={},this._eventTarget=a||this});g=r.prototype,g.addEventListener=function(a,b,c,d,e){e=e||0;var h,i,f=this._listeners[a],g=0;for(null==f&&(this._listeners[a]=f=[]),i=f.length;--i>-1;)h=f[i],h.c===b?f.splice(i,1):0===g&&e>h.pr&&(g=i+1);f.splice(g,0,{c:b,s:c,up:d,pr:e})},g.removeEventListener=function(a,b){var d,c=this._listeners[a];if(c)for(d=c.length;--d>-1;)if(c[d].c===b)return c.splice(d,1),void 0},g.dispatchEvent=function(a){var b=this._listeners[a];if(b)for(var e,c=b.length,d=this._eventTarget;--c>-1;)e=b[c],e.up?e.c.call(e.s||d,{type:a,target:d}):e.c.call(e.s||d)};var s=a.requestAnimationFrame,t=a.cancelAnimationFrame,u=Date.now||function(){return(new Date).getTime()};for(e=["ms","moz","webkit","o"],f=e.length;--f>-1&&!s;)s=a[e[f]+"RequestAnimationFrame"],t=a[e[f]+"CancelAnimationFrame"]||a[e[f]+"CancelRequestAnimationFrame"];l("Ticker",function(b,c){var g,h,i,j,k,d=this,e=u(),f=c!==!1&&s,l=function(){null!=i&&(f&&t?t(i):a.clearTimeout(i),i=null)},m=function(a){d.time=(u()-e)/1e3,(!g||d.time>=k||a===!0)&&(d.frame++,k=d.time>k?d.time+j-(d.time-k):d.time+j-.001,d.time+.001>k&&(k=d.time+.001),d.dispatchEvent("tick")),a!==!0&&(i=h(m))};r.call(d),this.time=this.frame=0,this.tick=function(){m(!0)},this.fps=function(a){return arguments.length?(g=a,j=1/(g||60),k=this.time+j,h=0===g?function(){}:f&&s?s:function(a){return setTimeout(a,1e3*(k-d.time)+1>>0||1)},l(),i=h(m),void 0):g},this.useRAF=function(a){return arguments.length?(l(),f=a,d.fps(g),void 0):f},d.fps(b),setTimeout(function(){f&&!i&&d.useRAF(!1)},1e3)}),g=d.Ticker.prototype=new d.events.EventDispatcher,g.constructor=d.Ticker;var v=l("core.Animation",function(a,b){if(this.vars=b||{},this._duration=this._totalDuration=a||0,this._delay=Number(this.vars.delay)||0,this._timeScale=1,this._active=this.vars.immediateRender===!0,this.data=this.vars.data,this._reversed=this.vars.reversed===!0,I){h||(w.tick(),h=!0);var c=this.vars.useFrames?H:I;c.add(this,c._time),this.vars.paused&&this.paused(!0)}}),w=v.ticker=new d.Ticker;g=v.prototype,g._dirty=g._gc=g._initted=g._paused=!1,g._totalTime=g._time=0,g._rawPrevTime=-1,g._next=g._last=g._onUpdate=g._timeline=g.timeline=null,g._paused=!1,g.play=function(a,b){return arguments.length&&this.seek(a,b),this.reversed(!1),this.paused(!1)},g.pause=function(a,b){return arguments.length&&this.seek(a,b),this.paused(!0)},g.resume=function(a,b){return arguments.length&&this.seek(a,b),this.paused(!1)},g.seek=function(a,b){return this.totalTime(Number(a),b!==!1)},g.restart=function(a,b){return this.reversed(!1),this.paused(!1),this.totalTime(a?-this._delay:0,b!==!1)},g.reverse=function(a,b){return arguments.length&&this.seek(a||this.totalDuration(),b),this.reversed(!0),this.paused(!1)},g.render=function(){},g.invalidate=function(){return this},g._enabled=function(a,b){return this._gc=!a,this._active=a&&!this._paused&&this._totalTime>0&&this._totalTime<this._totalDuration,b!==!0&&(a&&null==this.timeline?this._timeline.add(this,this._startTime-this._delay):a||null==this.timeline||this._timeline._remove(this,!0)),!1},g._kill=function(){return this._enabled(!1,!1)},g.kill=function(a,b){return this._kill(a,b),this},g._uncache=function(a){for(var b=a?this:this.timeline;b;)b._dirty=!0,b=b.timeline;return this},g.eventCallback=function(a,b,c,d){if(null==a)return null;if("on"===a.substr(0,2)){if(1===arguments.length)return this.vars[a];if(null==b)delete this.vars[a];else if(this.vars[a]=b,this.vars[a+"Params"]=c,this.vars[a+"Scope"]=d,c)for(var e=c.length;--e>-1;)"{self}"===c[e]&&(c=this.vars[a+"Params"]=c.concat(),c[e]=this);"onUpdate"===a&&(this._onUpdate=b)}return this},g.delay=function(a){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+a-this._delay),this._delay=a,this):this._delay},g.duration=function(a){return arguments.length?(this._duration=this._totalDuration=a,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==a&&this.totalTime(this._totalTime*(a/this._duration),!0),this):(this._dirty=!1,this._duration)},g.totalDuration=function(a){return this._dirty=!1,arguments.length?this.duration(a):this._totalDuration},g.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),a>this._duration&&(a=this._duration),this.totalTime(a,b)):this._time},g.totalTime=function(a,b){if(!arguments.length)return this._totalTime;if(this._timeline){if(0>a&&(a+=this.totalDuration()),this._timeline.smoothChildTiming&&(this._dirty&&this.totalDuration(),a>this._totalDuration&&(a=this._totalDuration),this._startTime=(this._paused?this._pauseTime:this._timeline._time)-(this._reversed?this._totalDuration-a:a)/this._timeScale,this._timeline._dirty||this._uncache(!1),!this._timeline._active))for(var c=this._timeline;c._timeline;)c.totalTime(c._totalTime,!0),c=c._timeline;this._gc&&this._enabled(!0,!1),this._totalTime!==a&&this.render(a,b,!1)}return this},g.startTime=function(a){return arguments.length?(a!==this._startTime&&(this._startTime=a,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,a-this._delay)),this):this._startTime},g.timeScale=function(a){if(!arguments.length)return this._timeScale;if(a=a||1e-6,this._timeline&&this._timeline.smoothChildTiming){var b=this._pauseTime||0===this._pauseTime?this._pauseTime:this._timeline._totalTime;this._startTime=b-(b-this._startTime)*this._timeScale/a}return this._timeScale=a,this._uncache(!1)},g.reversed=function(a){return arguments.length?(a!=this._reversed&&(this._reversed=a,this.totalTime(this._totalTime,!0)),this):this._reversed},g.paused=function(a){return arguments.length?(a!=this._paused&&this._timeline&&(!a&&this._timeline.smoothChildTiming&&(this._startTime+=this._timeline.rawTime()-this._pauseTime,this._uncache(!1)),this._pauseTime=a?this._timeline.rawTime():null,this._paused=a,this._active=!this._paused&&this._totalTime>0&&this._totalTime<this._totalDuration),this._gc&&(a||this._enabled(!0,!1)),this):this._paused};var x=l("core.SimpleTimeline",function(a){v.call(this,0,a),this.autoRemoveChildren=this.smoothChildTiming=!0});g=x.prototype=new v,g.constructor=x,g.kill()._gc=!1,g._first=g._last=null,g._sortChildren=!1,g.add=function(a,b){var e,f;if(a._startTime=Number(b||0)+a._delay,a._paused&&this!==a._timeline&&(a._pauseTime=a._startTime+(this.rawTime()-a._startTime)/a._timeScale),a.timeline&&a.timeline._remove(a,!0),a.timeline=a._timeline=this,a._gc&&a._enabled(!0,!0),e=this._last,this._sortChildren)for(f=a._startTime;e&&e._startTime>f;)e=e._prev;return e?(a._next=e._next,e._next=a):(a._next=this._first,this._first=a),a._next?a._next._prev=a:this._last=a,a._prev=e,this._timeline&&this._uncache(!0),this},g.insert=g.add,g._remove=function(a,b){return a.timeline===this&&(b||a._enabled(!1,!0),a.timeline=null,a._prev?a._prev._next=a._next:this._first===a&&(this._first=a._next),a._next?a._next._prev=a._prev:this._last===a&&(this._last=a._prev),this._timeline&&this._uncache(!0)),this},g.render=function(a,b){var e,d=this._first;for(this._totalTime=this._time=this._rawPrevTime=a;d;)e=d._next,(d._active||a>=d._startTime&&!d._paused)&&(d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,!1):d.render((a-d._startTime)*d._timeScale,b,!1)),d=e},g.rawTime=function(){return this._totalTime};var y=l("TweenLite",function(a,b,c){if(v.call(this,b,c),null==a)throw"Cannot tween an undefined reference.";this.target=a="string"!=typeof a?a:y.selector(a)||a,this._overwrite=null==this.vars.overwrite?G[y.defaultOverwrite]:"number"==typeof this.vars.overwrite?this.vars.overwrite>>0:G[this.vars.overwrite];var e,f,d=a.jquery||"function"==typeof a.each&&a[0]&&a[0].nodeType&&a[0].style;if((d||a instanceof Array)&&"number"!=typeof a[0])for(this._targets=d&&!a.slice?A(a):a.slice(0),this._propLookup=[],this._siblings=[],e=0;this._targets.length>e;e++)f=this._targets[e],f?"string"!=typeof f?"function"==typeof f.each&&f[0]&&f[0].nodeType&&f[0].style?(this._targets.splice(e--,1),this._targets=this._targets.concat(A(f))):(this._siblings[e]=J(f,this,!1),1===this._overwrite&&this._siblings[e].length>1&&K(f,this,null,1,this._siblings[e])):(f=this._targets[e--]=y.selector(f),"string"==typeof f&&this._targets.splice(e+1,1)):this._targets.splice(e--,1);else this._propLookup={},this._siblings=J(a,this,!1),1===this._overwrite&&this._siblings.length>1&&K(a,this,null,1,this._siblings);(this.vars.immediateRender||0===b&&0===this._delay&&this.vars.immediateRender!==!1)&&this.render(-this._delay,!1,!0)},!0),z=function(a){return"function"==typeof a.each&&a[0]&&a[0].nodeType&&a[0].style},A=function(a){var b=[];return a.each(function(){b.push(this)}),b},B=function(a){var c,b={};for(c in a)!F[c]&&(!C[c]||C[c]&&C[c]._autoCSS)&&(b[c]=a[c],delete a[c]);a.css=b};g=y.prototype=new v,g.constructor=y,g.kill()._gc=!1,g.ratio=0,g._firstPT=g._targets=g._overwrittenProps=null,g._notifyPluginsOfEnabled=!1,y.version="1.8.1",y.defaultEase=g._ease=new o(null,null,1,1),y.defaultOverwrite="auto",y.ticker=w,y.selector=a.$||a.jQuery||function(b){return a.$?(y.selector=a.$,a.$(b)):a.document?a.document.getElementById("#"===b.charAt(0)?b.substr(1):b):b};var C=y._plugins={},D=y._tweenLookup={},E=0,F={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,orientToBezier:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1},G={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,"true":1,"false":0},H=v._rootFramesTimeline=new x,I=v._rootTimeline=new x;I._startTime=w.time,H._startTime=w.frame,I._active=H._active=!0,v._updateRoot=function(){if(I.render((w.time-I._startTime)*I._timeScale,!1,!1),H.render((w.frame-H._startTime)*H._timeScale,!1,!1),!(w.frame%120)){var a,b,c;for(c in D){for(b=D[c].tweens,a=b.length;--a>-1;)b[a]._gc&&b.splice(a,1);0===b.length&&delete D[c]}}},w.addEventListener("tick",v._updateRoot);var J=function(a,b,c){var e,f,d=a._gsTweenID;if(D[d||(a._gsTweenID=d="t"+E++)]||(D[d]={target:a,tweens:[]}),b&&(e=D[d].tweens,e[f=e.length]=b,c))for(;--f>-1;)e[f]===b&&e.splice(f,1);return D[d].tweens},K=function(a,b,c,d,e){var f,g,h,i;if(1===d||d>=4){for(i=e.length,f=0;i>f;f++)if((h=e[f])!==b)h._gc||h._enabled(!1,!1)&&(g=!0);else if(5===d)break;return g}var n,j=b._startTime+1e-10,k=[],l=0,m=0===b._duration;for(f=e.length;--f>-1;)(h=e[f])===b||h._gc||h._paused||(h._timeline!==b._timeline?(n=n||L(b,0,m),0===L(h,n,m)&&(k[l++]=h)):j>=h._startTime&&h._startTime+h.totalDuration()/h._timeScale+1e-10>j&&((m||!h._initted)&&2e-10>=j-h._startTime||(k[l++]=h)));for(f=l;--f>-1;)h=k[f],2===d&&h._kill(c,a)&&(g=!0),(2!==d||!h._firstPT&&h._initted)&&h._enabled(!1,!1)&&(g=!0);return g},L=function(a,b,c){for(var d=a._timeline,e=d._timeScale,f=a._startTime;d._timeline;){if(f+=d._startTime,e*=d._timeScale,d._paused)return-100;d=d._timeline}return f/=e,f>b?f-b:c&&f===b||!a._initted&&2e-10>f-b?1e-10:(f+=a.totalDuration()/a._timeScale/e)>b?0:f-b-1e-10};g._init=function(){var c,d,e,a=this.vars,b=a.ease;if(a.startAt&&(a.startAt.overwrite=0,a.startAt.immediateRender=!0,y.to(this.target,0,a.startAt)),this._ease=b?b instanceof o?a.easeParams instanceof Array?b.config.apply(b,a.easeParams):b:"function"==typeof b?new o(b,a.easeParams):p[b]||y.defaultEase:y.defaultEase,this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(c=this._targets.length;--c>-1;)this._initProps(this._targets[c],this._propLookup[c]={},this._siblings[c],this._overwrittenProps?this._overwrittenProps[c]:null)&&(d=!0);else d=this._initProps(this.target,this._propLookup,this._siblings,this._overwrittenProps);if(d&&y._onPluginEvent("_onInitAllProps",this),this._overwrittenProps&&null==this._firstPT&&"function"!=typeof this.target&&this._enabled(!1,!1),a.runBackwards)for(e=this._firstPT;e;)e.s+=e.c,e.c=-e.c,e=e._next;this._onUpdate=a.onUpdate,this._initted=!0},g._initProps=function(a,b,c,d){var e,f,g,h,i,j,k;if(null==a)return!1;this.vars.css||a.style&&a.nodeType&&C.css&&this.vars.autoCSS!==!1&&B(this.vars);for(e in this.vars){if(F[e]){if(("onStartParams"===e||"onUpdateParams"===e||"onCompleteParams"===e||"onReverseCompleteParams"===e||"onRepeatParams"===e)&&(i=this.vars[e]))for(f=i.length;--f>-1;)"{self}"===i[f]&&(i=this.vars[e]=i.concat(),i[f]=this)}else if(C[e]&&(h=new C[e])._onInitTween(a,this.vars[e],this)){for(this._firstPT=j={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:!0,n:e,pg:!0,pr:h._priority},f=h._overwriteProps.length;--f>-1;)b[h._overwriteProps[f]]=this._firstPT;(h._priority||h._onInitAllProps)&&(g=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0)}else this._firstPT=b[e]=j={_next:this._firstPT,t:a,p:e,f:"function"==typeof a[e],n:e,pg:!1,pr:0},j.s=j.f?a[e.indexOf("set")||"function"!=typeof a["get"+e.substr(3)]?e:"get"+e.substr(3)]():parseFloat(a[e]),k=this.vars[e],j.c="string"==typeof k&&"="===k.charAt(1)?parseInt(k.charAt(0)+"1",10)*Number(k.substr(2)):Number(k)-j.s||0;j&&j._next&&(j._next._prev=j)}return d&&this._kill(d,a)?this._initProps(a,b,c,d):this._overwrite>1&&this._firstPT&&c.length>1&&K(a,this,b,this._overwrite,c)?(this._kill(b,a),this._initProps(a,b,c,d)):g},g.render=function(a,b,c){var e,f,g,d=this._time;if(a>=this._duration)this._totalTime=this._time=this._duration,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(e=!0,f="onComplete"),0===this._duration&&((0===a||0>this._rawPrevTime)&&this._rawPrevTime!==a&&(c=!0),this._rawPrevTime=a);else if(0>=a)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==d||0===this._duration&&this._rawPrevTime>0)&&(f="onReverseComplete",e=this._reversed),0>a?(this._active=!1,0===this._duration&&(this._rawPrevTime>=0&&(c=!0),this._rawPrevTime=a)):this._initted||(c=!0);else if(this._totalTime=this._time=a,this._easeType){var h=a/this._duration,i=this._easeType,j=this._easePower;(1===i||3===i&&h>=.5)&&(h=1-h),3===i&&(h*=2),1===j?h*=h:2===j?h*=h*h:3===j?h*=h*h*h:4===j&&(h*=h*h*h*h),this.ratio=1===i?1-h:2===i?h:.5>a/this._duration?h/2:1-h/2}else this.ratio=this._ease.getRatio(a/this._duration);if(this._time!==d||c){for(this._initted||(this._init(),!e&&this._time&&(this.ratio=this._ease.getRatio(this._time/this._duration))),this._active||this._paused||(this._active=!0),0===d&&this.vars.onStart&&(0!==this._time||0===this._duration)&&(b||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||n)),g=this._firstPT;g;)g.f?g.t[g.p](g.c*this.ratio+g.s):g.t[g.p]=g.c*this.ratio+g.s,g=g._next;this._onUpdate&&(b||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||n)),f&&(this._gc||(e&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),b||this.vars[f]&&this.vars[f].apply(this.vars[f+"Scope"]||this,this.vars[f+"Params"]||n)))}},g._kill=function(a,b){if("all"===a&&(a=null),null==a&&(null==b||b===this.target))return this._enabled(!1,!1);b="string"!=typeof b?b||this._targets||this.target:y.selector(b)||b;var c,d,e,f,g,h,i,j;if((b instanceof Array||z(b))&&"number"!=typeof b[0])for(c=b.length;--c>-1;)this._kill(a,b[c])&&(h=!0);else{if(this._targets){for(c=this._targets.length;--c>-1;)if(b===this._targets[c]){g=this._propLookup[c]||{},this._overwrittenProps=this._overwrittenProps||[],d=this._overwrittenProps[c]=a?this._overwrittenProps[c]||{}:"all";break}}else{if(b!==this.target)return!1;g=this._propLookup,d=this._overwrittenProps=a?this._overwrittenProps||{}:"all"}if(g){i=a||g,j=a!==d&&"all"!==d&&a!==g&&(null==a||a._tempKill!==!0);for(e in i)(f=g[e])&&(f.pg&&f.t._kill(i)&&(h=!0),f.pg&&0!==f.t._overwriteProps.length||(f._prev?f._prev._next=f._next:f===this._firstPT&&(this._firstPT=f._next),f._next&&(f._next._prev=f._prev),f._next=f._prev=null),delete g[e]),j&&(d[e]=1)}}return h},g.invalidate=function(){return this._notifyPluginsOfEnabled&&y._onPluginEvent("_onDisable",this),this._firstPT=null,this._overwrittenProps=null,this._onUpdate=null,this._initted=this._active=this._notifyPluginsOfEnabled=!1,this._propLookup=this._targets?{}:[],this},g._enabled=function(a,b){if(a&&this._gc)if(this._targets)for(var c=this._targets.length;--c>-1;)this._siblings[c]=J(this._targets[c],this,!0);else this._siblings=J(this.target,this,!0);return v.prototype._enabled.call(this,a,b),this._notifyPluginsOfEnabled&&this._firstPT?y._onPluginEvent(a?"_onEnable":"_onDisable",this):!1},y.to=function(a,b,c){return new y(a,b,c)},y.from=function(a,b,c){return c.runBackwards=!0,c.immediateRender!==!1&&(c.immediateRender=!0),new y(a,b,c)},y.fromTo=function(a,b,c,d){return d.startAt=c,c.immediateRender&&(d.immediateRender=!0),new y(a,b,d)},y.delayedCall=function(a,b,c,d,e){return new y(b,0,{delay:a,onComplete:b,onCompleteParams:c,onCompleteScope:d,onReverseComplete:b,onReverseCompleteParams:c,onReverseCompleteScope:d,immediateRender:!1,useFrames:e,overwrite:0})},y.set=function(a,b){return new y(a,0,b)},y.killTweensOf=y.killDelayedCallsTo=function(a,b){for(var c=y.getTweensOf(a),d=c.length;--d>-1;)c[d]._kill(b,a)},y.getTweensOf=function(a){if(null!=a){a="string"!=typeof a?a:y.selector(a)||a;var b,c,d,e;if((a instanceof Array||z(a))&&"number"!=typeof a[0]){for(b=a.length,c=[];--b>-1;)c=c.concat(y.getTweensOf(a[b]));for(b=c.length;--b>-1;)for(e=c[b],d=b;--d>-1;)e===c[d]&&c.splice(b,1)}else for(c=J(a).concat(),b=c.length;--b>-1;)c[b]._gc&&c.splice(b,1);return c}};var M=l("plugins.TweenPlugin",function(a,b){this._overwriteProps=(a||"").split(","),this._propName=this._overwriteProps[0],this._priority=b||0},!0);if(g=M.prototype,M.version=12,M.API=2,g._firstPT=null,g._addTween=function(a,b,c,d,e,f){var g,h;null!=d&&(g="number"==typeof d||"="!==d.charAt(1)?Number(d)-c:parseInt(d.charAt(0)+"1",10)*Number(d.substr(2)))&&(this._firstPT=h={_next:this._firstPT,t:a,p:b,s:c,c:g,f:"function"==typeof a[b],n:e||b,r:f},h._next&&(h._next._prev=h))},g.setRatio=function(a){for(var c,b=this._firstPT;b;)c=b.c*a+b.s,b.r&&(c=c+(c>0?.5:-.5)>>0),b.f?b.t[b.p](c):b.t[b.p]=c,b=b._next},g._kill=function(a){if(null!=a[this._propName])this._overwriteProps=[];else for(var b=this._overwriteProps.length;--b>-1;)null!=a[this._overwriteProps[b]]&&this._overwriteProps.splice(b,1);for(var c=this._firstPT;c;)null!=a[c.n]&&(c._next&&(c._next._prev=c._prev),c._prev?(c._prev._next=c._next,c._prev=null):this._firstPT===c&&(this._firstPT=c._next)),c=c._next;return!1},g._roundProps=function(a,b){for(var c=this._firstPT;c;)(a[this._propName]||null!=c.n&&a[c.n.split(this._propName+"_").join("")])&&(c.r=b),c=c._next},y._onPluginEvent=function(a,b){var d,c=b._firstPT;if("_onInitAllProps"===a){for(var e,f,g,h;c;){for(h=c._next,e=f;e&&e.pr>c.pr;)e=e._next;(c._prev=e?e._prev:g)?c._prev._next=c:f=c,(c._next=e)?e._prev=c:g=c,c=h}c=b._firstPT=f}for(;c;)c.pg&&"function"==typeof c.t[a]&&c.t[a]()&&(d=!0),c=c._next;return d},M.activate=function(a){for(var b=a.length;--b>-1;)a[b].API===M.API&&(y._plugins[(new a[b])._propName]=a[b]);return!0},e=a._gsQueue){for(f=0;e.length>f;f++)e[f]();for(g in i)i[g].func||a.console.log("GSAP encountered missing dependency: com.greensock."+g)}h=!1}(window);
},{}],3:[function(require,module,exports){
/*!
 * VERSION: beta 1.8.0
 * DATE: 2013-01-21
 * JavaScript (ActionScript 3 and 2 also available)
 * UPDATES AND DOCS AT: http://www.greensock.com
 *
 * @license Copyright (c) 2008-2013, GreenSock. All rights reserved.
 * This work is subject to the terms in http://www.greensock.com/terms_of_use.html or for 
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
(window._gsQueue||(window._gsQueue=[])).push(function(){"use strict";_gsDefine("easing.Back",["easing.Ease"],function(a){var n,o,b=window.GreenSockGlobals||window,c=b.com.greensock,d=2*Math.PI,e=Math.PI/2,f=c._class,g=function(b,c){var d=f("easing."+b,function(){},!0),e=d.prototype=new a;return e.constructor=d,e.getRatio=c,d},h=a.register||function(){},i=function(a,b,c,d){var g=f("easing."+a,{easeOut:new b,easeIn:new c,easeInOut:new d},!0);return h(g,a),g},j=function(b,c){var d=f("easing."+b,function(a){this._p1=a||0===a?a:1.70158,this._p2=1.525*this._p1},!0),e=d.prototype=new a;return e.constructor=d,e.getRatio=c,e.config=function(a){return new d(a)},d},k=i("Back",j("BackOut",function(a){return(a-=1)*a*((this._p1+1)*a+this._p1)+1}),j("BackIn",function(a){return a*a*((this._p1+1)*a-this._p1)}),j("BackInOut",function(a){return 1>(a*=2)?.5*a*a*((this._p2+1)*a-this._p2):.5*((a-=2)*a*((this._p2+1)*a+this._p2)+2)})),l=f("easing.SlowMo",function(a,b,c){b=b||0===b?b:.7,null==a?a=.7:a>1&&(a=1),this._p=1!==a?b:0,this._p1=(1-a)/2,this._p2=a,this._p3=this._p1+this._p2,this._calcEnd=c===!0},!0),m=l.prototype=new a;return m.constructor=l,m.getRatio=function(a){var b=a+(.5-a)*this._p;return this._p1>a?this._calcEnd?1-(a=1-a/this._p1)*a:b-(a=1-a/this._p1)*a*a*a*b:a>this._p3?this._calcEnd?1-(a=(a-this._p3)/this._p1)*a:b+(a-b)*(a=(a-this._p3)/this._p1)*a*a*a:this._calcEnd?1:b},l.ease=new l(.7,.7),m.config=l.config=function(a,b,c){return new l(a,b,c)},n=f("easing.SteppedEase",function(a){a=a||1,this._p1=1/a,this._p2=a+1},!0),m=n.prototype=new a,m.constructor=n,m.getRatio=function(a){return 0>a?a=0:a>=1&&(a=.999999999),(this._p2*a>>0)*this._p1},m.config=n.config=function(a){return new n(a)},i("Bounce",g("BounceOut",function(a){return 1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375}),g("BounceIn",function(a){return 1/2.75>(a=1-a)?1-7.5625*a*a:2/2.75>a?1-(7.5625*(a-=1.5/2.75)*a+.75):2.5/2.75>a?1-(7.5625*(a-=2.25/2.75)*a+.9375):1-(7.5625*(a-=2.625/2.75)*a+.984375)}),g("BounceInOut",function(a){var b=.5>a;return a=b?1-2*a:2*a-1,a=1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375,b?.5*(1-a):.5*a+.5})),i("Circ",g("CircOut",function(a){return Math.sqrt(1-(a-=1)*a)}),g("CircIn",function(a){return-(Math.sqrt(1-a*a)-1)}),g("CircInOut",function(a){return 1>(a*=2)?-.5*(Math.sqrt(1-a*a)-1):.5*(Math.sqrt(1-(a-=2)*a)+1)})),o=function(b,c,e){var g=f("easing."+b,function(a,b){this._p1=a||1,this._p2=b||e,this._p3=this._p2/d*(Math.asin(1/this._p1)||0)},!0),h=g.prototype=new a;return h.constructor=g,h.getRatio=c,h.config=function(a,b){return new g(a,b)},g},i("Elastic",o("ElasticOut",function(a){return this._p1*Math.pow(2,-10*a)*Math.sin((a-this._p3)*d/this._p2)+1},.3),o("ElasticIn",function(a){return-(this._p1*Math.pow(2,10*(a-=1))*Math.sin((a-this._p3)*d/this._p2))},.3),o("ElasticInOut",function(a){return 1>(a*=2)?-.5*this._p1*Math.pow(2,10*(a-=1))*Math.sin((a-this._p3)*d/this._p2):.5*this._p1*Math.pow(2,-10*(a-=1))*Math.sin((a-this._p3)*d/this._p2)+1},.45)),i("Expo",g("ExpoOut",function(a){return 1-Math.pow(2,-10*a)}),g("ExpoIn",function(a){return Math.pow(2,10*(a-1))-.001}),g("ExpoInOut",function(a){return 1>(a*=2)?.5*Math.pow(2,10*(a-1)):.5*(2-Math.pow(2,-10*(a-1)))})),i("Sine",g("SineOut",function(a){return Math.sin(a*e)}),g("SineIn",function(a){return-Math.cos(a*e)+1}),g("SineInOut",function(a){return-.5*(Math.cos(Math.PI*a)-1)})),f("easing.EaseLookup",{find:function(b){return a.map[b]}},!0),h(b.SlowMo,"SlowMo","ease,"),h(n,"SteppedEase","ease,"),k},!0)}),window._gsDefine&&_gsQueue.pop()();
},{}],4:[function(require,module,exports){
/*!
* @license PreloadJS
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2011-2013 gskinner.com, inc.
*
* Distributed under the terms of the MIT license.
* http://www.opensource.org/licenses/mit-license.html
*
* This notice shall be included in all copies or substantial portions of the Software.
*/
this.createjs=this.createjs||{},function(){"use strict";var a=createjs.PreloadJS=createjs.PreloadJS||{};a.version="0.4.0",a.buildDate="Wed, 25 Sep 2013 17:09:35 GMT"}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype;b.type=null,b.target=null,b.currentTarget=null,b.eventPhase=0,b.bubbles=!1,b.cancelable=!1,b.timeStamp=0,b.defaultPrevented=!1,b.propagationStopped=!1,b.immediatePropagationStopped=!1,b.removed=!1,b.initialize=function(a,b,c){this.type=a,this.bubbles=b,this.cancelable=c,this.timeStamp=(new Date).getTime()},b.preventDefault=function(){this.defaultPrevented=!0},b.stopPropagation=function(){this.propagationStopped=!0},b.stopImmediatePropagation=function(){this.immediatePropagationStopped=this.propagationStopped=!0},b.remove=function(){this.removed=!0},b.clone=function(){return new a(this.type,this.bubbles,this.cancelable)},b.toString=function(){return"[Event (type="+this.type+")]"},createjs.Event=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){},b=a.prototype;a.initialize=function(a){a.addEventListener=b.addEventListener,a.on=b.on,a.removeEventListener=a.off=b.removeEventListener,a.removeAllEventListeners=b.removeAllEventListeners,a.hasEventListener=b.hasEventListener,a.dispatchEvent=b.dispatchEvent,a._dispatchEvent=b._dispatchEvent},b._listeners=null,b._captureListeners=null,b.initialize=function(){},b.addEventListener=function(a,b,c){var d;d=c?this._captureListeners=this._captureListeners||{}:this._listeners=this._listeners||{};var e=d[a];return e&&this.removeEventListener(a,b,c),e=d[a],e?e.push(b):d[a]=[b],b},b.on=function(a,b,c,d,e,f){return b.handleEvent&&(c=c||b,b=b.handleEvent),c=c||this,this.addEventListener(a,function(a){b.call(c,a,e),d&&a.remove()},f)},b.removeEventListener=function(a,b,c){var d=c?this._captureListeners:this._listeners;if(d){var e=d[a];if(e)for(var f=0,g=e.length;g>f;f++)if(e[f]==b){1==g?delete d[a]:e.splice(f,1);break}}},b.off=b.removeEventListener,b.removeAllEventListeners=function(a){a?(this._listeners&&delete this._listeners[a],this._captureListeners&&delete this._captureListeners[a]):this._listeners=this._captureListeners=null},b.dispatchEvent=function(a,b){if("string"==typeof a){var c=this._listeners;if(!c||!c[a])return!1;a=new createjs.Event(a)}if(a.target=b||this,a.bubbles&&this.parent){for(var d=this,e=[d];d.parent;)e.push(d=d.parent);var f,g=e.length;for(f=g-1;f>=0&&!a.propagationStopped;f--)e[f]._dispatchEvent(a,1+(0==f));for(f=1;g>f&&!a.propagationStopped;f++)e[f]._dispatchEvent(a,3)}else this._dispatchEvent(a,2);return a.defaultPrevented},b.hasEventListener=function(a){var b=this._listeners,c=this._captureListeners;return!!(b&&b[a]||c&&c[a])},b.toString=function(){return"[EventDispatcher]"},b._dispatchEvent=function(a,b){var c,d=1==b?this._captureListeners:this._listeners;if(a&&d){var e=d[a.type];if(!e||!(c=e.length))return;a.currentTarget=this,a.eventPhase=b,a.removed=!1,e=e.slice();for(var f=0;c>f&&!a.immediatePropagationStopped;f++){var g=e[f];g.handleEvent?g.handleEvent(a):g(a),a.removed&&(this.off(a.type,g,1==b),a.removed=!1)}}},createjs.EventDispatcher=a}(),this.createjs=this.createjs||{},function(){"use strict";createjs.indexOf=function(a,b){for(var c=0,d=a.length;d>c;c++)if(b===a[c])return c;return-1}}(),this.createjs=this.createjs||{},function(){"use strict";createjs.proxy=function(a,b){var c=Array.prototype.slice.call(arguments,2);return function(){return a.apply(b,Array.prototype.slice.call(arguments,0).concat(c))}}}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){this.init()};a.prototype={};var b=a.prototype,c=a;c.FILE_PATTERN=/^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?))?([/.]*?(?:[^?]+)?\/)?((?:[^/?]+)\.(\w+))(?:\?(\S+)?)?$/,b.loaded=!1,b.canceled=!1,b.progress=0,b._item=null,b._basePath=null,b.addEventListener=null,b.removeEventListener=null,b.removeAllEventListeners=null,b.dispatchEvent=null,b.hasEventListener=null,b._listeners=null,createjs.EventDispatcher.initialize(b),b.getItem=function(){return this._item},b.init=function(){},b.load=function(){},b.close=function(){},b._sendLoadStart=function(){this._isCanceled()||this.dispatchEvent("loadstart")},b._sendProgress=function(a){if(!this._isCanceled()){var b=null;"number"==typeof a?(this.progress=a,b=new createjs.Event("progress"),b.loaded=this.progress,b.total=1):(b=a,this.progress=a.loaded/a.total,(isNaN(this.progress)||1/0==this.progress)&&(this.progress=0)),b.progress=this.progress,this.hasEventListener("progress")&&this.dispatchEvent(b)}},b._sendComplete=function(){this._isCanceled()||this.dispatchEvent("complete")},b._sendError=function(a){!this._isCanceled()&&this.hasEventListener("error")&&(null==a&&(a=new createjs.Event("error")),this.dispatchEvent(a))},b._isCanceled=function(){return null==window.createjs||this.canceled?!0:!1},b._parseURI=function(a){return a?a.match(c.FILE_PATTERN):null},b._formatQueryString=function(a,b){if(null==a)throw new Error("You must specify data.");var c=[];for(var d in a)c.push(d+"="+escape(a[d]));return b&&(c=c.concat(b)),c.join("&")},b.buildPath=function(a,b,c){if(null!=b){var d=this._parseURI(a);(null==d||null==d[1]||""==d[1])&&(a=b+a)}if(null==c)return a;var e=[],f=a.indexOf("?");if(-1!=f){var g=a.slice(f+1);e=e.concat(g.split("&"))}return-1!=f?a.slice(0,f)+"?"+this._formatQueryString(c,e):a+"?"+this._formatQueryString(c,e)},b.toString=function(){return"[PreloadJS AbstractLoader]"},createjs.AbstractLoader=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b){this.init(a,b)},b=a.prototype=new createjs.AbstractLoader,c=a;c.LOAD_TIMEOUT=8e3,c.BINARY="binary",c.CSS="css",c.IMAGE="image",c.JAVASCRIPT="javascript",c.JSON="json",c.JSONP="jsonp",c.SOUND="sound",c.SVG="svg",c.TEXT="text",c.XML="xml",c.POST="POST",c.GET="GET",b.useXHR=!0,b.stopOnError=!1,b.maintainScriptOrder=!0,b.next=null,b._typeCallbacks=null,b._extensionCallbacks=null,b._loadStartWasDispatched=!1,b._maxConnections=1,b._currentlyLoadingScript=null,b._currentLoads=null,b._loadQueue=null,b._loadQueueBackup=null,b._loadItemsById=null,b._loadItemsBySrc=null,b._loadedResults=null,b._loadedRawResults=null,b._numItems=0,b._numItemsLoaded=0,b._scriptOrder=null,b._loadedScripts=null,b.init=function(a,b){this._numItems=this._numItemsLoaded=0,this._paused=!1,this._loadStartWasDispatched=!1,this._currentLoads=[],this._loadQueue=[],this._loadQueueBackup=[],this._scriptOrder=[],this._loadedScripts=[],this._loadItemsById={},this._loadItemsBySrc={},this._loadedResults={},this._loadedRawResults={},this._typeCallbacks={},this._extensionCallbacks={},this._basePath=b,this.setUseXHR(a)},b.setUseXHR=function(a){return this.useXHR=0!=a&&null!=window.XMLHttpRequest,this.useXHR},b.removeAll=function(){this.remove()},b.remove=function(a){var b=null;if(!a||a instanceof Array){if(a)b=a;else if(arguments.length>0)return}else b=[a];var c=!1;if(b){for(;b.length;){var d=b.pop(),e=this.getResult(d);for(f=this._loadQueue.length-1;f>=0;f--)if(g=this._loadQueue[f].getItem(),g.id==d||g.src==d){this._loadQueue.splice(f,1)[0].cancel();break}for(f=this._loadQueueBackup.length-1;f>=0;f--)if(g=this._loadQueueBackup[f].getItem(),g.id==d||g.src==d){this._loadQueueBackup.splice(f,1)[0].cancel();break}if(e)delete this._loadItemsById[e.id],delete this._loadItemsBySrc[e.src],this._disposeItem(e);else for(var f=this._currentLoads.length-1;f>=0;f--){var g=this._currentLoads[f].getItem();if(g.id==d||g.src==d){this._currentLoads.splice(f,1)[0].cancel(),c=!0;break}}}c&&this._loadNext()}else{this.close();for(var h in this._loadItemsById)this._disposeItem(this._loadItemsById[h]);this.init(this.useXHR)}},b.reset=function(){this.close();for(var a in this._loadItemsById)this._disposeItem(this._loadItemsById[a]);var b=[];for(i=0,l=this._loadQueueBackup.length;l>i;i++)b.push(this._loadQueueBackup[i].getItem());this.loadManifest(b,!1)},c.isBinary=function(a){switch(a){case createjs.LoadQueue.IMAGE:case createjs.LoadQueue.BINARY:return!0;default:return!1}},b.installPlugin=function(a){if(null!=a&&null!=a.getPreloadHandlers){var b=a.getPreloadHandlers();if(null!=b.types)for(var c=0,d=b.types.length;d>c;c++)this._typeCallbacks[b.types[c]]=b.callback;if(null!=b.extensions)for(c=0,d=b.extensions.length;d>c;c++)this._extensionCallbacks[b.extensions[c]]=b.callback}},b.setMaxConnections=function(a){this._maxConnections=a,!this._paused&&this._loadQueue.length>0&&this._loadNext()},b.loadFile=function(a,b,c){if(null==a){var d=new createjs.Event("error");return d.text="PRELOAD_NO_FILE",this._sendError(d),void 0}this._addItem(a,c),b!==!1?this.setPaused(!1):this.setPaused(!0)},b.loadManifest=function(a,b,c){var d=null;if(a instanceof Array){if(0==a.length){var e=new createjs.Event("error");return e.text="PRELOAD_MANIFEST_EMPTY",this._sendError(e),void 0}d=a}else{if(null==a){var e=new createjs.Event("error");return e.text="PRELOAD_MANIFEST_NULL",this._sendError(e),void 0}d=[a]}for(var f=0,g=d.length;g>f;f++)this._addItem(d[f],c);b!==!1?this.setPaused(!1):this.setPaused(!0)},b.load=function(){this.setPaused(!1)},b.getItem=function(a){return this._loadItemsById[a]||this._loadItemsBySrc[a]},b.getResult=function(a,b){var c=this._loadItemsById[a]||this._loadItemsBySrc[a];if(null==c)return null;var d=c.id;return b&&this._loadedRawResults[d]?this._loadedRawResults[d]:this._loadedResults[d]},b.setPaused=function(a){this._paused=a,this._paused||this._loadNext()},b.close=function(){for(;this._currentLoads.length;)this._currentLoads.pop().cancel();this._scriptOrder.length=0,this._loadedScripts.length=0,this.loadStartWasDispatched=!1},b._addItem=function(a,b){var c=this._createLoadItem(a);if(null!=c){var d=this._createLoader(c,b);null!=d&&(this._loadQueue.push(d),this._loadQueueBackup.push(d),this._numItems++,this._updateProgress(),this.maintainScriptOrder&&c.type==createjs.LoadQueue.JAVASCRIPT&&d instanceof createjs.XHRLoader&&(this._scriptOrder.push(c),this._loadedScripts.push(null)))}},b._createLoadItem=function(a){var b=null;switch(typeof a){case"string":b={src:a};break;case"object":b=window.HTMLAudioElement&&a instanceof HTMLAudioElement?{tag:a,src:b.tag.src,type:createjs.LoadQueue.SOUND}:a;break;default:return null}var c=this._parseURI(b.src);if(null!=c&&(b.ext=c[5]),null==b.type&&(b.type=this._getTypeByExtension(b.ext)),b.type==createjs.LoadQueue.JSON&&null!=b.callback&&(b.type=createjs.LoadQueue.JSONP),b.type==createjs.LoadQueue.JSONP&&null==b.callback)throw new Error("callback is required for loading JSONP requests.");null==b.tag&&(b.tag=this._createTag(b.type)),(null==b.id||""==b.id)&&(b.id=b.src);var d=this._typeCallbacks[b.type]||this._extensionCallbacks[b.ext];if(d){var e=d(b.src,b.type,b.id,b.data);if(e===!1)return null;e===!0||(null!=e.src&&(b.src=e.src),null!=e.id&&(b.id=e.id),null!=e.tag&&e.tag.load instanceof Function&&(b.tag=e.tag),null!=e.completeHandler&&(b.completeHandler=e.completeHandler)),e.type&&(b.type=e.type),c=this._parseURI(b.src),null!=c&&null!=c[5]&&(b.ext=c[5].toLowerCase())}return this._loadItemsById[b.id]=b,this._loadItemsBySrc[b.src]=b,b},b._createLoader=function(a,b){var c=this.useXHR;switch(a.type){case createjs.LoadQueue.JSON:case createjs.LoadQueue.XML:case createjs.LoadQueue.TEXT:c=!0;break;case createjs.LoadQueue.SOUND:case createjs.LoadQueue.JSONP:c=!1;break;case null:return null}return null==b&&(b=this._basePath),c?new createjs.XHRLoader(a,b):new createjs.TagLoader(a,b)},b._loadNext=function(){if(!this._paused){this._loadStartWasDispatched||(this._sendLoadStart(),this._loadStartWasDispatched=!0),this._numItems==this._numItemsLoaded?(this.loaded=!0,this._sendComplete(),this.next&&this.next.load&&this.next.load()):this.loaded=!1;for(var a=0;a<this._loadQueue.length&&!(this._currentLoads.length>=this._maxConnections);a++){var b=this._loadQueue[a];if(this.maintainScriptOrder&&b instanceof createjs.TagLoader&&b.getItem().type==createjs.LoadQueue.JAVASCRIPT){if(this._currentlyLoadingScript)continue;this._currentlyLoadingScript=!0}this._loadQueue.splice(a,1),a--,this._loadItem(b)}}},b._loadItem=function(a){a.addEventListener("progress",createjs.proxy(this._handleProgress,this)),a.addEventListener("complete",createjs.proxy(this._handleFileComplete,this)),a.addEventListener("error",createjs.proxy(this._handleFileError,this)),this._currentLoads.push(a),this._sendFileStart(a.getItem()),a.load()},b._handleFileError=function(a){var b=a.target;this._numItemsLoaded++,this._updateProgress();var a=new createjs.Event("error");a.text="FILE_LOAD_ERROR",a.item=b.getItem(),this._sendError(a),this.stopOnError||(this._removeLoadItem(b),this._loadNext())},b._handleFileComplete=function(a){var b=a.target,c=b.getItem();if(this._loadedResults[c.id]=b.getResult(),b instanceof createjs.XHRLoader&&(this._loadedRawResults[c.id]=b.getResult(!0)),this._removeLoadItem(b),this.maintainScriptOrder&&c.type==createjs.LoadQueue.JAVASCRIPT){if(!(b instanceof createjs.TagLoader))return this._loadedScripts[createjs.indexOf(this._scriptOrder,c)]=c,this._checkScriptLoadOrder(b),void 0;this._currentlyLoadingScript=!1}this._processFinishedLoad(c,b)},b._processFinishedLoad=function(a,b){this._numItemsLoaded++,this._updateProgress(),this._sendFileComplete(a,b),this._loadNext()},b._checkScriptLoadOrder=function(){for(var a=this._loadedScripts.length,b=0;a>b;b++){var c=this._loadedScripts[b];if(null===c)break;c!==!0&&(this._processFinishedLoad(c),this._loadedScripts[b]=!0,b--,a--)}},b._removeLoadItem=function(a){for(var b=this._currentLoads.length,c=0;b>c;c++)if(this._currentLoads[c]==a){this._currentLoads.splice(c,1);break}},b._handleProgress=function(a){var b=a.target;this._sendFileProgress(b.getItem(),b.progress),this._updateProgress()},b._updateProgress=function(){var a=this._numItemsLoaded/this._numItems,b=this._numItems-this._numItemsLoaded;if(b>0){for(var c=0,d=0,e=this._currentLoads.length;e>d;d++)c+=this._currentLoads[d].progress;a+=c/b*(b/this._numItems)}this._sendProgress(a)},b._disposeItem=function(a){delete this._loadedResults[a.id],delete this._loadedRawResults[a.id],delete this._loadItemsById[a.id],delete this._loadItemsBySrc[a.src]},b._createTag=function(a){var b=null;switch(a){case createjs.LoadQueue.IMAGE:return document.createElement("img");case createjs.LoadQueue.SOUND:return b=document.createElement("audio"),b.autoplay=!1,b;case createjs.LoadQueue.JSONP:case createjs.LoadQueue.JAVASCRIPT:return b=document.createElement("script"),b.type="text/javascript",b;case createjs.LoadQueue.CSS:return b=this.useXHR?document.createElement("style"):document.createElement("link"),b.rel="stylesheet",b.type="text/css",b;case createjs.LoadQueue.SVG:return this.useXHR?b=document.createElement("svg"):(b=document.createElement("object"),b.type="image/svg+xml"),b}return null},b._getTypeByExtension=function(a){if(null==a)return createjs.LoadQueue.TEXT;switch(a.toLowerCase()){case"jpeg":case"jpg":case"gif":case"png":case"webp":case"bmp":return createjs.LoadQueue.IMAGE;case"ogg":case"mp3":case"wav":return createjs.LoadQueue.SOUND;case"json":return createjs.LoadQueue.JSON;case"xml":return createjs.LoadQueue.XML;case"css":return createjs.LoadQueue.CSS;case"js":return createjs.LoadQueue.JAVASCRIPT;case"svg":return createjs.LoadQueue.SVG;default:return createjs.LoadQueue.TEXT}},b._sendFileProgress=function(a,b){if(this._isCanceled())return this._cleanUp(),void 0;if(this.hasEventListener("fileprogress")){var c=new createjs.Event("fileprogress");c.progress=b,c.loaded=b,c.total=1,c.item=a,this.dispatchEvent(c)}},b._sendFileComplete=function(a,b){if(!this._isCanceled()){var c=new createjs.Event("fileload");c.loader=b,c.item=a,c.result=this._loadedResults[a.id],c.rawResult=this._loadedRawResults[a.id],a.completeHandler&&a.completeHandler(c),this.hasEventListener("fileload")&&this.dispatchEvent(c)}},b._sendFileStart=function(a){var b=new createjs.Event("filestart");b.item=a,this.hasEventListener("filestart")&&this.dispatchEvent(b)},b.toString=function(){return"[PreloadJS LoadQueue]"},createjs.LoadQueue=a;var d=function(){};d.init=function(){var a=navigator.userAgent;d.isFirefox=a.indexOf("Firefox")>-1,d.isOpera=null!=window.opera,d.isChrome=a.indexOf("Chrome")>-1,d.isIOS=a.indexOf("iPod")>-1||a.indexOf("iPhone")>-1||a.indexOf("iPad")>-1},d.init(),createjs.LoadQueue.BrowserDetect=d}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b){this.init(a,b)},b=a.prototype=new createjs.AbstractLoader;b._loadTimeout=null,b._tagCompleteProxy=null,b._isAudio=!1,b._tag=null,b._jsonResult=null,b.init=function(a,b){this._item=a,this._basePath=b,this._tag=a.tag,this._isAudio=window.HTMLAudioElement&&a.tag instanceof HTMLAudioElement,this._tagCompleteProxy=createjs.proxy(this._handleLoad,this)},b.getResult=function(){return this._item.type==createjs.LoadQueue.JSONP?this._jsonResult:this._tag},b.cancel=function(){this.canceled=!0,this._clean(),this.getItem()},b.load=function(){var a=this._item,b=this._tag;clearTimeout(this._loadTimeout),this._loadTimeout=setTimeout(createjs.proxy(this._handleTimeout,this),createjs.LoadQueue.LOAD_TIMEOUT),this._isAudio&&(b.src=null,b.preload="auto"),b.onerror=createjs.proxy(this._handleError,this),this._isAudio?(b.onstalled=createjs.proxy(this._handleStalled,this),b.addEventListener("canplaythrough",this._tagCompleteProxy,!1)):(b.onload=createjs.proxy(this._handleLoad,this),b.onreadystatechange=createjs.proxy(this._handleReadyStateChange,this));var c=this.buildPath(a.src,this._basePath,a.values);switch(a.type){case createjs.LoadQueue.CSS:b.href=c;break;case createjs.LoadQueue.SVG:b.data=c;break;default:b.src=c}if(a.type==createjs.LoadQueue.JSONP){if(null==a.callback)throw new Error("callback is required for loading JSONP requests.");if(null!=window[a.callback])throw new Error('JSONP callback "'+a.callback+'" already exists on window. You need to specify a different callback. Or re-name the current one.');window[a.callback]=createjs.proxy(this._handleJSONPLoad,this)}(a.type==createjs.LoadQueue.SVG||a.type==createjs.LoadQueue.JSONP||a.type==createjs.LoadQueue.JSON||a.type==createjs.LoadQueue.JAVASCRIPT||a.type==createjs.LoadQueue.CSS)&&(this._startTagVisibility=b.style.visibility,b.style.visibility="hidden",(document.body||document.getElementsByTagName("body")[0]).appendChild(b)),null!=b.load&&b.load()},b._handleJSONPLoad=function(a){this._jsonResult=a},b._handleTimeout=function(){this._clean();var a=new createjs.Event("error");a.text="PRELOAD_TIMEOUT",this._sendError(a)},b._handleStalled=function(){},b._handleError=function(){this._clean();var a=new createjs.Event("error");this._sendError(a)},b._handleReadyStateChange=function(){clearTimeout(this._loadTimeout);var a=this.getItem().tag;("loaded"==a.readyState||"complete"==a.readyState)&&this._handleLoad()},b._handleLoad=function(){if(!this._isCanceled()){var a=this.getItem(),b=a.tag;if(!(this.loaded||this.isAudio&&4!==b.readyState)){switch(this.loaded=!0,a.type){case createjs.LoadQueue.SVG:case createjs.LoadQueue.JSONP:b.style.visibility=this._startTagVisibility,(document.body||document.getElementsByTagName("body")[0]).removeChild(b)}this._clean(),this._sendComplete()}}},b._clean=function(){clearTimeout(this._loadTimeout);var a=this.getItem().tag;a.onload=null,a.removeEventListener&&a.removeEventListener("canplaythrough",this._tagCompleteProxy,!1),a.onstalled=null,a.onprogress=null,a.onerror=null,a.parentNode&&a.parentNode.removeChild(a);var b=this.getItem();b.type==createjs.LoadQueue.JSONP&&(window[b.callback]=null)},b.toString=function(){return"[PreloadJS TagLoader]"},createjs.TagLoader=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b){this.init(a,b)},b=a.prototype=new createjs.AbstractLoader;b._request=null,b._loadTimeout=null,b._xhrLevel=1,b._response=null,b._rawResponse=null,b.init=function(a,b){this._item=a,this._basePath=b,!this._createXHR(a)},b.getResult=function(a){return a&&this._rawResponse?this._rawResponse:this._response},b.cancel=function(){this.canceled=!0,this._clean(),this._request.abort()},b.load=function(){if(null==this._request)return this._handleError(),void 0;this._request.onloadstart=createjs.proxy(this._handleLoadStart,this),this._request.onprogress=createjs.proxy(this._handleProgress,this),this._request.onabort=createjs.proxy(this._handleAbort,this),this._request.onerror=createjs.proxy(this._handleError,this),this._request.ontimeout=createjs.proxy(this._handleTimeout,this),1==this._xhrLevel&&(this._loadTimeout=setTimeout(createjs.proxy(this._handleTimeout,this),createjs.LoadQueue.LOAD_TIMEOUT)),this._request.onload=createjs.proxy(this._handleLoad,this),this._request.onreadystatechange=createjs.proxy(this._handleReadyStateChange,this);try{this._item.values&&this._item.method!=createjs.LoadQueue.GET?this._item.method==createjs.LoadQueue.POST&&this._request.send(this._formatQueryString(this._item.values)):this._request.send()}catch(a){var b=new createjs.Event("error");b.error=a,this._sendError(b)}},b.getAllResponseHeaders=function(){return this._request.getAllResponseHeaders instanceof Function?this._request.getAllResponseHeaders():null},b.getResponseHeader=function(a){return this._request.getResponseHeader instanceof Function?this._request.getResponseHeader(a):null},b._handleProgress=function(a){if(a&&!(a.loaded>0&&0==a.total)){var b=new createjs.Event("progress");b.loaded=a.loaded,b.total=a.total,this._sendProgress(b)}},b._handleLoadStart=function(){clearTimeout(this._loadTimeout),this._sendLoadStart()},b._handleAbort=function(a){this._clean();var a=new createjs.Event("error");a.text="XHR_ABORTED",this._sendError(a)},b._handleError=function(){this._clean();var a=new createjs.Event("error");this._sendError(a)},b._handleReadyStateChange=function(){4==this._request.readyState&&this._handleLoad()},b._handleLoad=function(){if(!this.loaded){if(this.loaded=!0,!this._checkError())return this._handleError(),void 0;this._response=this._getResponse(),this._clean();var a=this._generateTag();a&&this._sendComplete()}},b._handleTimeout=function(a){this._clean();var b=new createjs.Event("error");b.text="PRELOAD_TIMEOUT",this._sendError(a)},b._checkError=function(){var a=parseInt(this._request.status);switch(a){case 404:case 0:return!1}return!0},b._getResponse=function(){if(null!=this._response)return this._response;if(null!=this._request.response)return this._request.response;try{if(null!=this._request.responseText)return this._request.responseText}catch(a){}try{if(null!=this._request.responseXML)return this._request.responseXML}catch(a){}return null},b._createXHR=function(a){var b=document.createElement("a");b.href=this.buildPath(a.src,this._basePath);var c=document.createElement("a");c.href=location.href;var d=""!=b.hostname&&(b.port!=c.port||b.protocol!=c.protocol||b.hostname!=c.hostname),e=null;if(d&&window.XDomainRequest)e=new XDomainRequest;else if(window.XMLHttpRequest)e=new XMLHttpRequest;else try{e=new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(f){try{e=new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(f){try{e=new ActiveXObject("Msxml2.XMLHTTP")}catch(f){return!1}}}a.type==createjs.LoadQueue.TEXT&&e.overrideMimeType&&e.overrideMimeType("text/plain; charset=x-user-defined"),this._xhrLevel="string"==typeof e.responseType?2:1;var g=null;return g=a.method==createjs.LoadQueue.GET?this.buildPath(a.src,this._basePath,a.values):this.buildPath(a.src,this._basePath),e.open(a.method||createjs.LoadQueue.GET,g,!0),d&&e instanceof XMLHttpRequest&&1==this._xhrLevel&&e.setRequestHeader("Origin",location.origin),a.values&&a.method==createjs.LoadQueue.POST&&e.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),createjs.LoadQueue.isBinary(a.type)&&(e.responseType="arraybuffer"),this._request=e,!0},b._clean=function(){clearTimeout(this._loadTimeout);var a=this._request;a.onloadstart=null,a.onprogress=null,a.onabort=null,a.onerror=null,a.onload=null,a.ontimeout=null,a.onloadend=null,a.onreadystatechange=null},b._generateTag=function(){var a=this._item.type,b=this._item.tag;switch(a){case createjs.LoadQueue.IMAGE:return b.onload=createjs.proxy(this._handleTagReady,this),b.src=this.buildPath(this._item.src,this._basePath,this._item.values),this._rawResponse=this._response,this._response=b,!1;case createjs.LoadQueue.JAVASCRIPT:return b=document.createElement("script"),b.text=this._response,this._rawResponse=this._response,this._response=b,!0;case createjs.LoadQueue.CSS:var c=document.getElementsByTagName("head")[0];if(c.appendChild(b),b.styleSheet)b.styleSheet.cssText=this._response;else{var d=document.createTextNode(this._response);b.appendChild(d)}return this._rawResponse=this._response,this._response=b,!0;case createjs.LoadQueue.XML:var e=this._parseXML(this._response,"text/xml");return this._response=e,!0;case createjs.LoadQueue.SVG:var e=this._parseXML(this._response,"image/svg+xml");return this._rawResponse=this._response,null!=e.documentElement?(b.appendChild(e.documentElement),this._response=b):this._response=e,!0;case createjs.LoadQueue.JSON:var f={};try{f=JSON.parse(this._response)}catch(g){f=g}return this._rawResponse=this._response,this._response=f,!0}return!0},b._parseXML=function(a,b){var c=null;if(window.DOMParser){var d=new DOMParser;c=d.parseFromString(a,b)}else c=new ActiveXObject("Microsoft.XMLDOM"),c.async=!1,c.loadXML(a);return c},b._handleTagReady=function(){this._sendComplete()},b.toString=function(){return"[PreloadJS XHRLoader]"},createjs.XHRLoader=a}(),"object"!=typeof JSON&&(JSON={}),function(){"use strict";function f(a){return 10>a?"0"+a:a}function quote(a){return escapable.lastIndex=0,escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return"string"==typeof b?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function str(a,b){var c,d,e,f,g,h=gap,i=b[a];switch(i&&"object"==typeof i&&"function"==typeof i.toJSON&&(i=i.toJSON(a)),"function"==typeof rep&&(i=rep.call(b,a,i)),typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";if(gap+=indent,g=[],"[object Array]"===Object.prototype.toString.apply(i)){for(f=i.length,c=0;f>c;c+=1)g[c]=str(c,i)||"null";return e=0===g.length?"[]":gap?"[\n"+gap+g.join(",\n"+gap)+"\n"+h+"]":"["+g.join(",")+"]",gap=h,e}if(rep&&"object"==typeof rep)for(f=rep.length,c=0;f>c;c+=1)"string"==typeof rep[c]&&(d=rep[c],e=str(d,i),e&&g.push(quote(d)+(gap?": ":":")+e));else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&g.push(quote(d)+(gap?": ":":")+e));return e=0===g.length?"{}":gap?"{\n"+gap+g.join(",\n"+gap)+"\n"+h+"}":"{"+g.join(",")+"}",gap=h,e}}"function"!=typeof Date.prototype.toJSON&&(Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","	":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;"function"!=typeof JSON.stringify&&(JSON.stringify=function(a,b,c){var d;if(gap="",indent="","number"==typeof c)for(d=0;c>d;d+=1)indent+=" ";else"string"==typeof c&&(indent=c);if(rep=b,b&&"function"!=typeof b&&("object"!=typeof b||"number"!=typeof b.length))throw new Error("JSON.stringify");return str("",{"":a})}),"function"!=typeof JSON.parse&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&"object"==typeof e)for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),void 0!==d?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;if(text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})),/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return j=eval("("+text+")"),"function"==typeof reviver?walk({"":j},""):j;throw new SyntaxError("JSON.parse")})}();
},{}],5:[function(require,module,exports){
/*!
* @license EaselJS
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2011-2013 gskinner.com, inc.
*
* Distributed under the terms of the MIT license.
* http://www.opensource.org/licenses/mit-license.html
*
* This notice shall be included in all copies or substantial portions of the Software.
*/
this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype;b.type=null,b.target=null,b.currentTarget=null,b.eventPhase=0,b.bubbles=!1,b.cancelable=!1,b.timeStamp=0,b.defaultPrevented=!1,b.propagationStopped=!1,b.immediatePropagationStopped=!1,b.removed=!1,b.initialize=function(a,b,c){this.type=a,this.bubbles=b,this.cancelable=c,this.timeStamp=(new Date).getTime()},b.preventDefault=function(){this.defaultPrevented=!0},b.stopPropagation=function(){this.propagationStopped=!0},b.stopImmediatePropagation=function(){this.immediatePropagationStopped=this.propagationStopped=!0},b.remove=function(){this.removed=!0},b.clone=function(){return new a(this.type,this.bubbles,this.cancelable)},b.toString=function(){return"[Event (type="+this.type+")]"},createjs.Event=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){},b=a.prototype;a.initialize=function(a){a.addEventListener=b.addEventListener,a.on=b.on,a.removeEventListener=a.off=b.removeEventListener,a.removeAllEventListeners=b.removeAllEventListeners,a.hasEventListener=b.hasEventListener,a.dispatchEvent=b.dispatchEvent,a._dispatchEvent=b._dispatchEvent},b._listeners=null,b._captureListeners=null,b.initialize=function(){},b.addEventListener=function(a,b,c){var d;d=c?this._captureListeners=this._captureListeners||{}:this._listeners=this._listeners||{};var e=d[a];return e&&this.removeEventListener(a,b,c),e=d[a],e?e.push(b):d[a]=[b],b},b.on=function(a,b,c,d,e,f){return b.handleEvent&&(c=c||b,b=b.handleEvent),c=c||this,this.addEventListener(a,function(a){b.call(c,a,e),d&&a.remove()},f)},b.removeEventListener=function(a,b,c){var d=c?this._captureListeners:this._listeners;if(d){var e=d[a];if(e)for(var f=0,g=e.length;g>f;f++)if(e[f]==b){1==g?delete d[a]:e.splice(f,1);break}}},b.off=b.removeEventListener,b.removeAllEventListeners=function(a){a?(this._listeners&&delete this._listeners[a],this._captureListeners&&delete this._captureListeners[a]):this._listeners=this._captureListeners=null},b.dispatchEvent=function(a,b){if("string"==typeof a){var c=this._listeners;if(!c||!c[a])return!1;a=new createjs.Event(a)}if(a.target=b||this,a.bubbles&&this.parent){for(var d=this,e=[d];d.parent;)e.push(d=d.parent);var f,g=e.length;for(f=g-1;f>=0&&!a.propagationStopped;f--)e[f]._dispatchEvent(a,1+(0==f));for(f=1;g>f&&!a.propagationStopped;f++)e[f]._dispatchEvent(a,3)}else this._dispatchEvent(a,2);return a.defaultPrevented},b.hasEventListener=function(a){var b=this._listeners,c=this._captureListeners;return!!(b&&b[a]||c&&c[a])},b.toString=function(){return"[EventDispatcher]"},b._dispatchEvent=function(a,b){var c,d=1==b?this._captureListeners:this._listeners;if(a&&d){var e=d[a.type];if(!e||!(c=e.length))return;a.currentTarget=this,a.eventPhase=b,a.removed=!1,e=e.slice();for(var f=0;c>f&&!a.immediatePropagationStopped;f++){var g=e[f];g.handleEvent?g.handleEvent(a):g(a),a.removed&&(this.off(a.type,g,1==b),a.removed=!1)}}},createjs.EventDispatcher=a}(),this.createjs=this.createjs||{},function(){"use strict";createjs.indexOf=function(a,b){for(var c=0,d=a.length;d>c;c++)if(b===a[c])return c;return-1}}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"UID cannot be instantiated"};a._nextID=0,a.get=function(){return a._nextID++},createjs.UID=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"Ticker cannot be instantiated."};a.RAF_SYNCHED="synched",a.RAF="raf",a.TIMEOUT="timeout",a.useRAF=!1,a.timingMode=null,a.maxDelta=0,a.removeEventListener=null,a.removeAllEventListeners=null,a.dispatchEvent=null,a.hasEventListener=null,a._listeners=null,createjs.EventDispatcher.initialize(a),a._addEventListener=a.addEventListener,a.addEventListener=function(){!a._inited&&a.init(),a._addEventListener.apply(a,arguments)},a._paused=!1,a._inited=!1,a._startTime=0,a._pausedTime=0,a._ticks=0,a._pausedTicks=0,a._interval=50,a._lastTime=0,a._times=null,a._tickTimes=null,a._timerId=null,a._raf=!0,a.init=function(){a._inited||(a._inited=!0,a._times=[],a._tickTimes=[],a._startTime=a._getTime(),a._times.push(a._lastTime=0),a.setInterval(a._interval))},a.reset=function(){if(a._raf){var b=window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame;b&&b(a._timerId)}else clearTimeout(a._timerId);a.removeAllEventListeners("tick")},a.setInterval=function(b){a._interval=b,a._inited&&a._setupTick()},a.getInterval=function(){return a._interval},a.setFPS=function(b){a.setInterval(1e3/b)},a.getFPS=function(){return 1e3/a._interval},a.getMeasuredTickTime=function(b){var c=0,d=a._tickTimes;if(d.length<1)return-1;b=Math.min(d.length,b||0|a.getFPS());for(var e=0;b>e;e++)c+=d[e];return d/b},a.getMeasuredFPS=function(b){var c=a._times;return c.length<2?-1:(b=Math.min(c.length-1,b||0|a.getFPS()),1e3/((c[0]-c[b])/b))},a.setPaused=function(b){a._paused=b},a.getPaused=function(){return a._paused},a.getTime=function(b){return a._getTime()-a._startTime-(b?a._pausedTime:0)},a.getEventTime=function(b){return(a._lastTime||a._startTime)-(b?a._pausedTime:0)},a.getTicks=function(b){return a._ticks-(b?a._pausedTicks:0)},a._handleSynch=function(){var b=a._getTime()-a._startTime;a._timerId=null,a._setupTick(),b-a._lastTime>=.97*(a._interval-1)&&a._tick()},a._handleRAF=function(){a._timerId=null,a._setupTick(),a._tick()},a._handleTimeout=function(){a._timerId=null,a._setupTick(),a._tick()},a._setupTick=function(){if(null==a._timerId){var b=a.timingMode||a.useRAF&&a.RAF_SYNCHED;if(b==a.RAF_SYNCHED||b==a.RAF){var c=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame;if(c)return a._timerId=c(b==a.RAF?a._handleRAF:a._handleSynch),a._raf=!0,void 0}a._raf=!1,a._timerId=setTimeout(a._handleTimeout,a._interval)}},a._tick=function(){var b=a._getTime()-a._startTime,c=b-a._lastTime,d=a._paused;if(a._ticks++,d&&(a._pausedTicks++,a._pausedTime+=c),a._lastTime=b,a.hasEventListener("tick")){var e=new createjs.Event("tick"),f=a.maxDelta;e.delta=f&&c>f?f:c,e.paused=d,e.time=b,e.runTime=b-a._pausedTime,a.dispatchEvent(e)}for(a._tickTimes.unshift(a._getTime()-b);a._tickTimes.length>100;)a._tickTimes.pop();for(a._times.unshift(b);a._times.length>100;)a._times.pop()};var b=window.performance&&(performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow);a._getTime=function(){return b&&b.call(performance)||(new Date).getTime()},createjs.Ticker=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d,e,f,g,h,i,j){this.initialize(a,b,c,d,e,f,g,h,i,j)},b=a.prototype=new createjs.Event;b.stageX=0,b.stageY=0,b.rawX=0,b.rawY=0,b.nativeEvent=null,b.pointerID=0,b.primary=!1,b.addEventListener=null,b.removeEventListener=null,b.removeAllEventListeners=null,b.dispatchEvent=null,b.hasEventListener=null,b._listeners=null,createjs.EventDispatcher.initialize(b),b.Event_initialize=b.initialize,b.initialize=function(a,b,c,d,e,f,g,h,i,j){this.Event_initialize(a,b,c),this.stageX=d,this.stageY=e,this.nativeEvent=f,this.pointerID=g,this.primary=h,this.rawX=null==i?d:i,this.rawY=null==j?e:j},b.clone=function(){return new a(this.type,this.bubbles,this.cancelable,this.stageX,this.stageY,this.target,this.nativeEvent,this.pointerID,this.primary,this.rawX,this.rawY)},b.toString=function(){return"[MouseEvent (type="+this.type+" stageX="+this.stageX+" stageY="+this.stageY+")]"},createjs.MouseEvent=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d,e,f){this.initialize(a,b,c,d,e,f)},b=a.prototype;a.identity=null,a.DEG_TO_RAD=Math.PI/180,b.a=1,b.b=0,b.c=0,b.d=1,b.tx=0,b.ty=0,b.alpha=1,b.shadow=null,b.compositeOperation=null,b.initialize=function(a,b,c,d,e,f){return this.a=null==a?1:a,this.b=b||0,this.c=c||0,this.d=null==d?1:d,this.tx=e||0,this.ty=f||0,this},b.prepend=function(a,b,c,d,e,f){var g=this.tx;if(1!=a||0!=b||0!=c||1!=d){var h=this.a,i=this.c;this.a=h*a+this.b*c,this.b=h*b+this.b*d,this.c=i*a+this.d*c,this.d=i*b+this.d*d}return this.tx=g*a+this.ty*c+e,this.ty=g*b+this.ty*d+f,this},b.append=function(a,b,c,d,e,f){var g=this.a,h=this.b,i=this.c,j=this.d;return this.a=a*g+b*i,this.b=a*h+b*j,this.c=c*g+d*i,this.d=c*h+d*j,this.tx=e*g+f*i+this.tx,this.ty=e*h+f*j+this.ty,this},b.prependMatrix=function(a){return this.prepend(a.a,a.b,a.c,a.d,a.tx,a.ty),this.prependProperties(a.alpha,a.shadow,a.compositeOperation),this},b.appendMatrix=function(a){return this.append(a.a,a.b,a.c,a.d,a.tx,a.ty),this.appendProperties(a.alpha,a.shadow,a.compositeOperation),this},b.prependTransform=function(b,c,d,e,f,g,h,i,j){if(f%360)var k=f*a.DEG_TO_RAD,l=Math.cos(k),m=Math.sin(k);else l=1,m=0;return(i||j)&&(this.tx-=i,this.ty-=j),g||h?(g*=a.DEG_TO_RAD,h*=a.DEG_TO_RAD,this.prepend(l*d,m*d,-m*e,l*e,0,0),this.prepend(Math.cos(h),Math.sin(h),-Math.sin(g),Math.cos(g),b,c)):this.prepend(l*d,m*d,-m*e,l*e,b,c),this},b.appendTransform=function(b,c,d,e,f,g,h,i,j){if(f%360)var k=f*a.DEG_TO_RAD,l=Math.cos(k),m=Math.sin(k);else l=1,m=0;return g||h?(g*=a.DEG_TO_RAD,h*=a.DEG_TO_RAD,this.append(Math.cos(h),Math.sin(h),-Math.sin(g),Math.cos(g),b,c),this.append(l*d,m*d,-m*e,l*e,0,0)):this.append(l*d,m*d,-m*e,l*e,b,c),(i||j)&&(this.tx-=i*this.a+j*this.c,this.ty-=i*this.b+j*this.d),this},b.rotate=function(a){var b=Math.cos(a),c=Math.sin(a),d=this.a,e=this.c,f=this.tx;return this.a=d*b-this.b*c,this.b=d*c+this.b*b,this.c=e*b-this.d*c,this.d=e*c+this.d*b,this.tx=f*b-this.ty*c,this.ty=f*c+this.ty*b,this},b.skew=function(b,c){return b*=a.DEG_TO_RAD,c*=a.DEG_TO_RAD,this.append(Math.cos(c),Math.sin(c),-Math.sin(b),Math.cos(b),0,0),this},b.scale=function(a,b){return this.a*=a,this.d*=b,this.c*=a,this.b*=b,this.tx*=a,this.ty*=b,this},b.translate=function(a,b){return this.tx+=a,this.ty+=b,this},b.identity=function(){return this.alpha=this.a=this.d=1,this.b=this.c=this.tx=this.ty=0,this.shadow=this.compositeOperation=null,this},b.invert=function(){var a=this.a,b=this.b,c=this.c,d=this.d,e=this.tx,f=a*d-b*c;return this.a=d/f,this.b=-b/f,this.c=-c/f,this.d=a/f,this.tx=(c*this.ty-d*e)/f,this.ty=-(a*this.ty-b*e)/f,this},b.isIdentity=function(){return 0==this.tx&&0==this.ty&&1==this.a&&0==this.b&&0==this.c&&1==this.d},b.transformPoint=function(a,b,c){return c=c||{},c.x=a*this.a+b*this.c+this.tx,c.y=a*this.b+b*this.d+this.ty,c},b.decompose=function(b){null==b&&(b={}),b.x=this.tx,b.y=this.ty,b.scaleX=Math.sqrt(this.a*this.a+this.b*this.b),b.scaleY=Math.sqrt(this.c*this.c+this.d*this.d);var c=Math.atan2(-this.c,this.d),d=Math.atan2(this.b,this.a);return c==d?(b.rotation=d/a.DEG_TO_RAD,this.a<0&&this.d>=0&&(b.rotation+=b.rotation<=0?180:-180),b.skewX=b.skewY=0):(b.skewX=c/a.DEG_TO_RAD,b.skewY=d/a.DEG_TO_RAD),b},b.reinitialize=function(a,b,c,d,e,f,g,h,i){return this.initialize(a,b,c,d,e,f),this.alpha=null==g?1:g,this.shadow=h,this.compositeOperation=i,this},b.copy=function(a){return this.reinitialize(a.a,a.b,a.c,a.d,a.tx,a.ty,a.alpha,a.shadow,a.compositeOperation)},b.appendProperties=function(a,b,c){return this.alpha*=a,this.shadow=b||this.shadow,this.compositeOperation=c||this.compositeOperation,this},b.prependProperties=function(a,b,c){return this.alpha*=a,this.shadow=this.shadow||b,this.compositeOperation=this.compositeOperation||c,this},b.clone=function(){return(new a).copy(this)},b.toString=function(){return"[Matrix2D (a="+this.a+" b="+this.b+" c="+this.c+" d="+this.d+" tx="+this.tx+" ty="+this.ty+")]"},a.identity=new a,createjs.Matrix2D=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b){this.initialize(a,b)},b=a.prototype;b.x=0,b.y=0,b.initialize=function(a,b){return this.x=null==a?0:a,this.y=null==b?0:b,this},b.copy=function(a){return this.initialize(a.x,a.y)},b.clone=function(){return new a(this.x,this.y)},b.toString=function(){return"[Point (x="+this.x+" y="+this.y+")]"},createjs.Point=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d){this.initialize(a,b,c,d)},b=a.prototype;b.x=0,b.y=0,b.width=0,b.height=0,b.initialize=function(a,b,c,d){return this.x=a||0,this.y=b||0,this.width=c||0,this.height=d||0,this},b.copy=function(a){return this.initialize(a.x,a.y,a.width,a.height)},b.clone=function(){return new a(this.x,this.y,this.width,this.height)},b.toString=function(){return"[Rectangle (x="+this.x+" y="+this.y+" width="+this.width+" height="+this.height+")]"},createjs.Rectangle=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d,e,f,g){this.initialize(a,b,c,d,e,f,g)},b=a.prototype;b.target=null,b.overLabel=null,b.outLabel=null,b.downLabel=null,b.play=!1,b._isPressed=!1,b._isOver=!1,b.initialize=function(a,b,c,d,e,f,g){a.addEventListener&&(this.target=a,a.cursor="pointer",this.overLabel=null==c?"over":c,this.outLabel=null==b?"out":b,this.downLabel=null==d?"down":d,this.play=e,this.setEnabled(!0),this.handleEvent({}),f&&(g&&(f.actionsEnabled=!1,f.gotoAndStop&&f.gotoAndStop(g)),a.hitArea=f))},b.setEnabled=function(a){var b=this.target;a?(b.addEventListener("rollover",this),b.addEventListener("rollout",this),b.addEventListener("mousedown",this),b.addEventListener("pressup",this)):(b.removeEventListener("rollover",this),b.removeEventListener("rollout",this),b.removeEventListener("mousedown",this),b.removeEventListener("pressup",this))},b.toString=function(){return"[ButtonHelper]"},b.handleEvent=function(a){var b,c=this.target,d=a.type;"mousedown"==d?(this._isPressed=!0,b=this.downLabel):"pressup"==d?(this._isPressed=!1,b=this._isOver?this.overLabel:this.outLabel):"rollover"==d?(this._isOver=!0,b=this._isPressed?this.downLabel:this.overLabel):(this._isOver=!1,b=this._isPressed?this.overLabel:this.outLabel),this.play?c.gotoAndPlay&&c.gotoAndPlay(b):c.gotoAndStop&&c.gotoAndStop(b)},createjs.ButtonHelper=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d){this.initialize(a,b,c,d)},b=a.prototype;a.identity=null,b.color=null,b.offsetX=0,b.offsetY=0,b.blur=0,b.initialize=function(a,b,c,d){this.color=a,this.offsetX=b,this.offsetY=c,this.blur=d},b.toString=function(){return"[Shadow]"},b.clone=function(){return new a(this.color,this.offsetX,this.offsetY,this.blur)},a.identity=new a("transparent",0,0,0),createjs.Shadow=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.EventDispatcher;b.complete=!0,b.framerate=0,b._animations=null,b._frames=null,b._images=null,b._data=null,b._loadCount=0,b._frameHeight=0,b._frameWidth=0,b._numFrames=0,b._regX=0,b._regY=0,b.initialize=function(a){var b,c,d,e;if(null!=a){if(this.framerate=a.framerate||0,a.images&&(c=a.images.length)>0)for(e=this._images=[],b=0;c>b;b++){var f=a.images[b];if("string"==typeof f){var g=f;f=new Image,f.src=g}e.push(f),f.getContext||f.complete||(this._loadCount++,this.complete=!1,function(a){f.onload=function(){a._handleImageLoad()}}(this))}if(null==a.frames);else if(a.frames instanceof Array)for(this._frames=[],e=a.frames,b=0,c=e.length;c>b;b++){var h=e[b];this._frames.push({image:this._images[h[4]?h[4]:0],rect:new createjs.Rectangle(h[0],h[1],h[2],h[3]),regX:h[5]||0,regY:h[6]||0})}else d=a.frames,this._frameWidth=d.width,this._frameHeight=d.height,this._regX=d.regX||0,this._regY=d.regY||0,this._numFrames=d.count,0==this._loadCount&&this._calculateFrames();if(this._animations=[],null!=(d=a.animations)){this._data={};var i;for(i in d){var j={name:i},k=d[i];if("number"==typeof k)e=j.frames=[k];else if(k instanceof Array)if(1==k.length)j.frames=[k[0]];else for(j.speed=k[3],j.next=k[2],e=j.frames=[],b=k[0];b<=k[1];b++)e.push(b);else{j.speed=k.speed,j.next=k.next;var l=k.frames;e=j.frames="number"==typeof l?[l]:l.slice(0)}(j.next===!0||void 0===j.next)&&(j.next=i),(j.next===!1||e.length<2&&j.next==i)&&(j.next=null),j.speed||(j.speed=1),this._animations.push(i),this._data[i]=j}}}},b.getNumFrames=function(a){if(null==a)return this._frames?this._frames.length:this._numFrames;var b=this._data[a];return null==b?0:b.frames.length},b.getAnimations=function(){return this._animations.slice(0)},b.getAnimation=function(a){return this._data[a]},b.getFrame=function(a){var b;return this._frames&&(b=this._frames[a])?b:null},b.getFrameBounds=function(a,b){var c=this.getFrame(a);return c?(b||new createjs.Rectangle).initialize(-c.regX,-c.regY,c.rect.width,c.rect.height):null},b.toString=function(){return"[SpriteSheet]"},b.clone=function(){var b=new a;return b.complete=this.complete,b._animations=this._animations,b._frames=this._frames,b._images=this._images,b._data=this._data,b._frameHeight=this._frameHeight,b._frameWidth=this._frameWidth,b._numFrames=this._numFrames,b._loadCount=this._loadCount,b},b._handleImageLoad=function(){0==--this._loadCount&&(this._calculateFrames(),this.complete=!0,this.dispatchEvent("complete"))},b._calculateFrames=function(){if(!this._frames&&0!=this._frameWidth){this._frames=[];for(var a=0,b=this._frameWidth,c=this._frameHeight,d=0,e=this._images;d<e.length;d++){for(var f=e[d],g=0|(f.width+1)/b,h=0|(f.height+1)/c,i=this._numFrames>0?Math.min(this._numFrames-a,g*h):g*h,j=0;i>j;j++)this._frames.push({image:f,rect:new createjs.Rectangle(j%g*b,(0|j/g)*c,b,c),regX:this._regX,regY:this._regY});a+=i}this._numFrames=a}},createjs.SpriteSheet=a}(),this.createjs=this.createjs||{},function(){"use strict";function a(a,b,c){this.f=a,this.params=b,this.path=null==c?!0:c}a.prototype.exec=function(a){this.f.apply(a,this.params)};var b=function(){this.initialize()},c=b.prototype;b.getRGB=function(a,b,c,d){return null!=a&&null==c&&(d=b,c=255&a,b=255&a>>8,a=255&a>>16),null==d?"rgb("+a+","+b+","+c+")":"rgba("+a+","+b+","+c+","+d+")"},b.getHSL=function(a,b,c,d){return null==d?"hsl("+a%360+","+b+"%,"+c+"%)":"hsla("+a%360+","+b+"%,"+c+"%,"+d+")"},b.Command=a,b.BASE_64={A:0,B:1,C:2,D:3,E:4,F:5,G:6,H:7,I:8,J:9,K:10,L:11,M:12,N:13,O:14,P:15,Q:16,R:17,S:18,T:19,U:20,V:21,W:22,X:23,Y:24,Z:25,a:26,b:27,c:28,d:29,e:30,f:31,g:32,h:33,i:34,j:35,k:36,l:37,m:38,n:39,o:40,p:41,q:42,r:43,s:44,t:45,u:46,v:47,w:48,x:49,y:50,z:51,0:52,1:53,2:54,3:55,4:56,5:57,6:58,7:59,8:60,9:61,"+":62,"/":63},b.STROKE_CAPS_MAP=["butt","round","square"],b.STROKE_JOINTS_MAP=["miter","round","bevel"];var d=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");if(d.getContext){var e=b._ctx=d.getContext("2d");b.beginCmd=new a(e.beginPath,[],!1),b.fillCmd=new a(e.fill,[],!1),b.strokeCmd=new a(e.stroke,[],!1),d.width=d.height=1}c._strokeInstructions=null,c._strokeStyleInstructions=null,c._strokeIgnoreScale=!1,c._fillInstructions=null,c._fillMatrix=null,c._instructions=null,c._oldInstructions=null,c._activeInstructions=null,c._active=!1,c._dirty=!1,c.initialize=function(){this.clear(),this._ctx=b._ctx},c.isEmpty=function(){return!(this._instructions.length||this._oldInstructions.length||this._activeInstructions.length)},c.draw=function(a){this._dirty&&this._updateInstructions();for(var b=this._instructions,c=0,d=b.length;d>c;c++)b[c].exec(a)},c.drawAsPath=function(a){this._dirty&&this._updateInstructions();for(var b,c=this._instructions,d=0,e=c.length;e>d;d++)((b=c[d]).path||0==d)&&b.exec(a)},c.moveTo=function(b,c){return this._activeInstructions.push(new a(this._ctx.moveTo,[b,c])),this},c.lineTo=function(b,c){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.lineTo,[b,c])),this},c.arcTo=function(b,c,d,e,f){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.arcTo,[b,c,d,e,f])),this},c.arc=function(b,c,d,e,f,g){return this._dirty=this._active=!0,null==g&&(g=!1),this._activeInstructions.push(new a(this._ctx.arc,[b,c,d,e,f,g])),this},c.quadraticCurveTo=function(b,c,d,e){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.quadraticCurveTo,[b,c,d,e])),this},c.bezierCurveTo=function(b,c,d,e,f,g){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.bezierCurveTo,[b,c,d,e,f,g])),this},c.rect=function(b,c,d,e){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.rect,[b,c,d,e])),this},c.closePath=function(){return this._active&&(this._dirty=!0,this._activeInstructions.push(new a(this._ctx.closePath,[]))),this},c.clear=function(){return this._instructions=[],this._oldInstructions=[],this._activeInstructions=[],this._strokeStyleInstructions=this._strokeInstructions=this._fillInstructions=this._fillMatrix=null,this._active=this._dirty=this._strokeIgnoreScale=!1,this},c.beginFill=function(b){return this._active&&this._newPath(),this._fillInstructions=b?[new a(this._setProp,["fillStyle",b],!1)]:null,this._fillMatrix=null,this},c.beginLinearGradientFill=function(b,c,d,e,f,g){this._active&&this._newPath();for(var h=this._ctx.createLinearGradient(d,e,f,g),i=0,j=b.length;j>i;i++)h.addColorStop(c[i],b[i]);return this._fillInstructions=[new a(this._setProp,["fillStyle",h],!1)],this._fillMatrix=null,this},c.beginRadialGradientFill=function(b,c,d,e,f,g,h,i){this._active&&this._newPath();for(var j=this._ctx.createRadialGradient(d,e,f,g,h,i),k=0,l=b.length;l>k;k++)j.addColorStop(c[k],b[k]);return this._fillInstructions=[new a(this._setProp,["fillStyle",j],!1)],this._fillMatrix=null,this},c.beginBitmapFill=function(b,c,d){this._active&&this._newPath(),c=c||"";var e=this._ctx.createPattern(b,c);return this._fillInstructions=[new a(this._setProp,["fillStyle",e],!1)],this._fillMatrix=d?[d.a,d.b,d.c,d.d,d.tx,d.ty]:null,this},c.endFill=function(){return this.beginFill()},c.setStrokeStyle=function(c,d,e,f,g){return this._active&&this._newPath(),this._strokeStyleInstructions=[new a(this._setProp,["lineWidth",null==c?"1":c],!1),new a(this._setProp,["lineCap",null==d?"butt":isNaN(d)?d:b.STROKE_CAPS_MAP[d]],!1),new a(this._setProp,["lineJoin",null==e?"miter":isNaN(e)?e:b.STROKE_JOINTS_MAP[e]],!1),new a(this._setProp,["miterLimit",null==f?"10":f],!1)],this._strokeIgnoreScale=g,this},c.beginStroke=function(b){return this._active&&this._newPath(),this._strokeInstructions=b?[new a(this._setProp,["strokeStyle",b],!1)]:null,this},c.beginLinearGradientStroke=function(b,c,d,e,f,g){this._active&&this._newPath();for(var h=this._ctx.createLinearGradient(d,e,f,g),i=0,j=b.length;j>i;i++)h.addColorStop(c[i],b[i]);return this._strokeInstructions=[new a(this._setProp,["strokeStyle",h],!1)],this},c.beginRadialGradientStroke=function(b,c,d,e,f,g,h,i){this._active&&this._newPath();for(var j=this._ctx.createRadialGradient(d,e,f,g,h,i),k=0,l=b.length;l>k;k++)j.addColorStop(c[k],b[k]);return this._strokeInstructions=[new a(this._setProp,["strokeStyle",j],!1)],this},c.beginBitmapStroke=function(b,c){this._active&&this._newPath(),c=c||"";var d=this._ctx.createPattern(b,c);return this._strokeInstructions=[new a(this._setProp,["strokeStyle",d],!1)],this},c.endStroke=function(){return this.beginStroke(),this},c.curveTo=c.quadraticCurveTo,c.drawRect=c.rect,c.drawRoundRect=function(a,b,c,d,e){return this.drawRoundRectComplex(a,b,c,d,e,e,e,e),this},c.drawRoundRectComplex=function(b,c,d,e,f,g,h,i){var j=(e>d?d:e)/2,k=0,l=0,m=0,n=0;0>f&&(f*=k=-1),f>j&&(f=j),0>g&&(g*=l=-1),g>j&&(g=j),0>h&&(h*=m=-1),h>j&&(h=j),0>i&&(i*=n=-1),i>j&&(i=j),this._dirty=this._active=!0;var o=this._ctx.arcTo,p=this._ctx.lineTo;return this._activeInstructions.push(new a(this._ctx.moveTo,[b+d-g,c]),new a(o,[b+d+g*l,c-g*l,b+d,c+g,g]),new a(p,[b+d,c+e-h]),new a(o,[b+d+h*m,c+e+h*m,b+d-h,c+e,h]),new a(p,[b+i,c+e]),new a(o,[b-i*n,c+e+i*n,b,c+e-i,i]),new a(p,[b,c+f]),new a(o,[b-f*k,c-f*k,b+f,c,f]),new a(this._ctx.closePath)),this},c.drawCircle=function(a,b,c){return this.arc(a,b,c,0,2*Math.PI),this},c.drawEllipse=function(b,c,d,e){this._dirty=this._active=!0;var f=.5522848,g=d/2*f,h=e/2*f,i=b+d,j=c+e,k=b+d/2,l=c+e/2;return this._activeInstructions.push(new a(this._ctx.moveTo,[b,l]),new a(this._ctx.bezierCurveTo,[b,l-h,k-g,c,k,c]),new a(this._ctx.bezierCurveTo,[k+g,c,i,l-h,i,l]),new a(this._ctx.bezierCurveTo,[i,l+h,k+g,j,k,j]),new a(this._ctx.bezierCurveTo,[k-g,j,b,l+h,b,l])),this},c.inject=function(b,c){return this._dirty=this._active=!0,this._activeInstructions.push(new a(b,[c])),this},c.drawPolyStar=function(b,c,d,e,f,g){this._dirty=this._active=!0,null==f&&(f=0),f=1-f,null==g?g=0:g/=180/Math.PI;var h=Math.PI/e;this._activeInstructions.push(new a(this._ctx.moveTo,[b+Math.cos(g)*d,c+Math.sin(g)*d]));for(var i=0;e>i;i++)g+=h,1!=f&&this._activeInstructions.push(new a(this._ctx.lineTo,[b+Math.cos(g)*d*f,c+Math.sin(g)*d*f])),g+=h,this._activeInstructions.push(new a(this._ctx.lineTo,[b+Math.cos(g)*d,c+Math.sin(g)*d]));return this},c.decodePath=function(a){for(var c=[this.moveTo,this.lineTo,this.quadraticCurveTo,this.bezierCurveTo,this.closePath],d=[2,2,4,6,0],e=0,f=a.length,g=[],h=0,i=0,j=b.BASE_64;f>e;){var k=a.charAt(e),l=j[k],m=l>>3,n=c[m];if(!n||3&l)throw"bad path data (@"+e+"): "+k;var o=d[m];m||(h=i=0),g.length=0,e++;for(var p=(1&l>>2)+2,q=0;o>q;q++){var r=j[a.charAt(e)],s=r>>5?-1:1;r=(31&r)<<6|j[a.charAt(e+1)],3==p&&(r=r<<6|j[a.charAt(e+2)]),r=s*r/10,q%2?h=r+=h:i=r+=i,g[q]=r,e+=p}n.apply(this,g)}return this},c.clone=function(){var a=new b;return a._instructions=this._instructions.slice(),a._activeInstructions=this._activeInstructions.slice(),a._oldInstructions=this._oldInstructions.slice(),this._fillInstructions&&(a._fillInstructions=this._fillInstructions.slice()),this._strokeInstructions&&(a._strokeInstructions=this._strokeInstructions.slice()),this._strokeStyleInstructions&&(a._strokeStyleInstructions=this._strokeStyleInstructions.slice()),a._active=this._active,a._dirty=this._dirty,a._fillMatrix=this._fillMatrix,a._strokeIgnoreScale=this._strokeIgnoreScale,a},c.toString=function(){return"[Graphics]"},c.mt=c.moveTo,c.lt=c.lineTo,c.at=c.arcTo,c.bt=c.bezierCurveTo,c.qt=c.quadraticCurveTo,c.a=c.arc,c.r=c.rect,c.cp=c.closePath,c.c=c.clear,c.f=c.beginFill,c.lf=c.beginLinearGradientFill,c.rf=c.beginRadialGradientFill,c.bf=c.beginBitmapFill,c.ef=c.endFill,c.ss=c.setStrokeStyle,c.s=c.beginStroke,c.ls=c.beginLinearGradientStroke,c.rs=c.beginRadialGradientStroke,c.bs=c.beginBitmapStroke,c.es=c.endStroke,c.dr=c.drawRect,c.rr=c.drawRoundRect,c.rc=c.drawRoundRectComplex,c.dc=c.drawCircle,c.de=c.drawEllipse,c.dp=c.drawPolyStar,c.p=c.decodePath,c._updateInstructions=function(){this._instructions=this._oldInstructions.slice(),this._instructions.push(b.beginCmd),this._appendInstructions(this._fillInstructions),this._appendInstructions(this._strokeInstructions),this._appendInstructions(this._strokeInstructions&&this._strokeStyleInstructions),this._appendInstructions(this._activeInstructions),this._fillInstructions&&this._appendDraw(b.fillCmd,this._fillMatrix),this._strokeInstructions&&this._appendDraw(b.strokeCmd,this._strokeIgnoreScale&&[1,0,0,1,0,0])},c._appendInstructions=function(a){a&&this._instructions.push.apply(this._instructions,a)},c._appendDraw=function(b,c){c?this._instructions.push(new a(this._ctx.save,[],!1),new a(this._ctx.transform,c,!1),b,new a(this._ctx.restore,[],!1)):this._instructions.push(b)},c._newPath=function(){this._dirty&&this._updateInstructions(),this._oldInstructions=this._instructions,this._activeInstructions=[],this._active=this._dirty=!1},c._setProp=function(a,b){this[a]=b},createjs.Graphics=b}(),this.createjs=this.createjs||{},function(){var a=function(){this.initialize()},b=a.prototype=new createjs.EventDispatcher;a.suppressCrossDomainErrors=!1;var c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");c.getContext&&(a._hitTestCanvas=c,a._hitTestContext=c.getContext("2d"),c.width=c.height=1),a._nextCacheID=1,b.alpha=1,b.cacheCanvas=null,b.id=-1,b.mouseEnabled=!0,b.name=null,b.parent=null,b.regX=0,b.regY=0,b.rotation=0,b.scaleX=1,b.scaleY=1,b.skewX=0,b.skewY=0,b.shadow=null,b.visible=!0,b.x=0,b.y=0,b.compositeOperation=null,b.snapToPixel=!1,b.filters=null,b.cacheID=0,b.mask=null,b.hitArea=null,b.cursor=null,b._cacheOffsetX=0,b._cacheOffsetY=0,b._cacheScale=1,b._cacheDataURLID=0,b._cacheDataURL=null,b._matrix=null,b._rectangle=null,b._bounds=null,b.initialize=function(){this.id=createjs.UID.get(),this._matrix=new createjs.Matrix2D,this._rectangle=new createjs.Rectangle},b.isVisible=function(){return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY)},b.draw=function(a,b){var c=this.cacheCanvas;if(b||!c)return!1;var d,e=this._cacheScale,f=this._cacheOffsetX,g=this._cacheOffsetY;return(d=this._applyFilterBounds(f,g,0,0))&&(f=d.x,g=d.y),a.drawImage(c,f,g,c.width/e,c.height/e),!0},b.updateContext=function(a){var b,c=this.mask,d=this;c&&c.graphics&&!c.graphics.isEmpty()&&(b=c.getMatrix(c._matrix),a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty),c.graphics.drawAsPath(a),a.clip(),b.invert(),a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty)),b=d._matrix.identity().appendTransform(d.x,d.y,d.scaleX,d.scaleY,d.rotation,d.skewX,d.skewY,d.regX,d.regY),createjs.Stage._snapToPixelEnabled&&d.snapToPixel?a.transform(b.a,b.b,b.c,b.d,0|b.tx+.5,0|b.ty+.5):a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty),a.globalAlpha*=d.alpha,d.compositeOperation&&(a.globalCompositeOperation=d.compositeOperation),d.shadow&&this._applyShadow(a,d.shadow)},b.cache=function(a,b,c,d,e){e=e||1,this.cacheCanvas||(this.cacheCanvas=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")),this._cacheWidth=c,this._cacheHeight=d,this._cacheOffsetX=a,this._cacheOffsetY=b,this._cacheScale=e,this.updateCache()},b.updateCache=function(b){var c,d=this.cacheCanvas,e=this._cacheScale,f=this._cacheOffsetX*e,g=this._cacheOffsetY*e,h=this._cacheWidth,i=this._cacheHeight;if(!d)throw"cache() must be called before updateCache()";var j=d.getContext("2d");(c=this._applyFilterBounds(f,g,h,i))&&(f=c.x,g=c.y,h=c.width,i=c.height),h=Math.ceil(h*e),i=Math.ceil(i*e),h!=d.width||i!=d.height?(d.width=h,d.height=i):b||j.clearRect(0,0,h+1,i+1),j.save(),j.globalCompositeOperation=b,j.setTransform(e,0,0,e,-f,-g),this.draw(j,!0),this._applyFilters(),j.restore(),this.cacheID=a._nextCacheID++},b.uncache=function(){this._cacheDataURL=this.cacheCanvas=null,this.cacheID=this._cacheOffsetX=this._cacheOffsetY=0,this._cacheScale=1},b.getCacheDataURL=function(){return this.cacheCanvas?(this.cacheID!=this._cacheDataURLID&&(this._cacheDataURL=this.cacheCanvas.toDataURL()),this._cacheDataURL):null},b.getStage=function(){for(var a=this;a.parent;)a=a.parent;return a instanceof createjs.Stage?a:null},b.localToGlobal=function(a,b){var c=this.getConcatenatedMatrix(this._matrix);return null==c?null:(c.append(1,0,0,1,a,b),new createjs.Point(c.tx,c.ty))},b.globalToLocal=function(a,b){var c=this.getConcatenatedMatrix(this._matrix);return null==c?null:(c.invert(),c.append(1,0,0,1,a,b),new createjs.Point(c.tx,c.ty))},b.localToLocal=function(a,b,c){var d=this.localToGlobal(a,b);return c.globalToLocal(d.x,d.y)},b.setTransform=function(a,b,c,d,e,f,g,h,i){return this.x=a||0,this.y=b||0,this.scaleX=null==c?1:c,this.scaleY=null==d?1:d,this.rotation=e||0,this.skewX=f||0,this.skewY=g||0,this.regX=h||0,this.regY=i||0,this},b.getMatrix=function(a){var b=this;return(a?a.identity():new createjs.Matrix2D).appendTransform(b.x,b.y,b.scaleX,b.scaleY,b.rotation,b.skewX,b.skewY,b.regX,b.regY).appendProperties(b.alpha,b.shadow,b.compositeOperation)},b.getConcatenatedMatrix=function(a){a?a.identity():a=new createjs.Matrix2D;for(var b=this;null!=b;)a.prependTransform(b.x,b.y,b.scaleX,b.scaleY,b.rotation,b.skewX,b.skewY,b.regX,b.regY).prependProperties(b.alpha,b.shadow,b.compositeOperation),b=b.parent;return a},b.hitTest=function(b,c){var d=a._hitTestContext;d.setTransform(1,0,0,1,-b,-c),this.draw(d);var e=this._testHit(d);return d.setTransform(1,0,0,1,0,0),d.clearRect(0,0,2,2),e},b.set=function(a){for(var b in a)this[b]=a[b];return this},b.getBounds=function(){if(this._bounds)return this._rectangle.copy(this._bounds);var a=this.cacheCanvas;if(a){var b=this._cacheScale;return this._rectangle.initialize(this._cacheOffsetX,this._cacheOffsetY,a.width/b,a.height/b)}return null},b.getTransformedBounds=function(){return this._getBounds()},b.setBounds=function(a,b,c,d){null==a&&(this._bounds=a),this._bounds=(this._bounds||new createjs.Rectangle).initialize(a,b,c,d)
},b.clone=function(){var b=new a;return this.cloneProps(b),b},b.toString=function(){return"[DisplayObject (name="+this.name+")]"},b.cloneProps=function(a){a.alpha=this.alpha,a.name=this.name,a.regX=this.regX,a.regY=this.regY,a.rotation=this.rotation,a.scaleX=this.scaleX,a.scaleY=this.scaleY,a.shadow=this.shadow,a.skewX=this.skewX,a.skewY=this.skewY,a.visible=this.visible,a.x=this.x,a.y=this.y,a._bounds=this._bounds,a.mouseEnabled=this.mouseEnabled,a.compositeOperation=this.compositeOperation},b._applyShadow=function(a,b){b=b||Shadow.identity,a.shadowColor=b.color,a.shadowOffsetX=b.offsetX,a.shadowOffsetY=b.offsetY,a.shadowBlur=b.blur},b._tick=function(a){var b=this._listeners;if(b&&b.tick){var c=new createjs.Event("tick");c.params=a,this._dispatchEvent(c,this,2)}},b._testHit=function(b){try{var c=b.getImageData(0,0,1,1).data[3]>1}catch(d){if(!a.suppressCrossDomainErrors)throw"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images."}return c},b._applyFilters=function(){if(this.filters&&0!=this.filters.length&&this.cacheCanvas)for(var a=this.filters.length,b=this.cacheCanvas.getContext("2d"),c=this.cacheCanvas.width,d=this.cacheCanvas.height,e=0;a>e;e++)this.filters[e].applyFilter(b,0,0,c,d)},b._applyFilterBounds=function(a,b,c,d){var e,f,g=this.filters;if(g&&(f=g.length)){for(var h=0;f>h;h++){var i=this.filters[h],j=i.getBounds&&i.getBounds();j&&(e||(e=this._rectangle.initialize(a,b,c,d)),e.x+=j.x,e.y+=j.y,e.width+=j.width,e.height+=j.height)}return e}},b._getBounds=function(a,b){return this._transformBounds(this.getBounds(),a,b)},b._transformBounds=function(a,b,c){if(!a)return a;var d=a.x,e=a.y,f=a.width,g=a.height,h=c?this._matrix.identity():this.getMatrix(this._matrix);(d||e)&&h.appendTransform(0,0,1,1,0,0,0,-d,-e),b&&h.prependMatrix(b);var i=f*h.a,j=f*h.b,k=g*h.c,l=g*h.d,m=h.tx,n=h.ty,o=m,p=m,q=n,r=n;return(d=i+m)<o?o=d:d>p&&(p=d),(d=i+k+m)<o?o=d:d>p&&(p=d),(d=k+m)<o?o=d:d>p&&(p=d),(e=j+n)<q?q=e:e>r&&(r=e),(e=j+l+n)<q?q=e:e>r&&(r=e),(e=l+n)<q?q=e:e>r&&(r=e),a.initialize(o,q,p-o,r-q)},createjs.DisplayObject=a}(),this.createjs=this.createjs||{},function(){var a=function(){this.initialize()},b=a.prototype=new createjs.DisplayObject;b.children=null,b.mouseChildren=!0,b.DisplayObject_initialize=b.initialize,b.initialize=function(){this.DisplayObject_initialize(),this.children=[]},b.isVisible=function(){var a=this.cacheCanvas||this.children.length;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;for(var c=this.children.slice(0),d=0,e=c.length;e>d;d++){var f=c[d];f.isVisible()&&(a.save(),f.updateContext(a),f.draw(a),a.restore())}return!0},b.addChild=function(a){if(null==a)return a;var b=arguments.length;if(b>1){for(var c=0;b>c;c++)this.addChild(arguments[c]);return arguments[b-1]}return a.parent&&a.parent.removeChild(a),a.parent=this,this.children.push(a),a},b.addChildAt=function(a,b){var c=arguments.length,d=arguments[c-1];if(0>d||d>this.children.length)return arguments[c-2];if(c>2){for(var e=0;c-1>e;e++)this.addChildAt(arguments[e],d+e);return arguments[c-2]}return a.parent&&a.parent.removeChild(a),a.parent=this,this.children.splice(b,0,a),a},b.removeChild=function(a){var b=arguments.length;if(b>1){for(var c=!0,d=0;b>d;d++)c=c&&this.removeChild(arguments[d]);return c}return this.removeChildAt(createjs.indexOf(this.children,a))},b.removeChildAt=function(a){var b=arguments.length;if(b>1){for(var c=[],d=0;b>d;d++)c[d]=arguments[d];c.sort(function(a,b){return b-a});for(var e=!0,d=0;b>d;d++)e=e&&this.removeChildAt(c[d]);return e}if(0>a||a>this.children.length-1)return!1;var f=this.children[a];return f&&(f.parent=null),this.children.splice(a,1),!0},b.removeAllChildren=function(){for(var a=this.children;a.length;)a.pop().parent=null},b.getChildAt=function(a){return this.children[a]},b.getChildByName=function(a){for(var b=this.children,c=0,d=b.length;d>c;c++)if(b[c].name==a)return b[c];return null},b.sortChildren=function(a){this.children.sort(a)},b.getChildIndex=function(a){return createjs.indexOf(this.children,a)},b.getNumChildren=function(){return this.children.length},b.swapChildrenAt=function(a,b){var c=this.children,d=c[a],e=c[b];d&&e&&(c[a]=e,c[b]=d)},b.swapChildren=function(a,b){for(var c,d,e=this.children,f=0,g=e.length;g>f&&(e[f]==a&&(c=f),e[f]==b&&(d=f),null==c||null==d);f++);f!=g&&(e[c]=b,e[d]=a)},b.setChildIndex=function(a,b){var c=this.children,d=c.length;if(!(a.parent!=this||0>b||b>=d)){for(var e=0;d>e&&c[e]!=a;e++);e!=d&&e!=b&&(c.splice(e,1),c.splice(b,0,a))}},b.contains=function(a){for(;a;){if(a==this)return!0;a=a.parent}return!1},b.hitTest=function(a,b){return null!=this.getObjectUnderPoint(a,b)},b.getObjectsUnderPoint=function(a,b){var c=[],d=this.localToGlobal(a,b);return this._getObjectsUnderPoint(d.x,d.y,c),c},b.getObjectUnderPoint=function(a,b){var c=this.localToGlobal(a,b);return this._getObjectsUnderPoint(c.x,c.y)},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){return this._getBounds(null,!0)},b.getTransformedBounds=function(){return this._getBounds()},b.clone=function(b){var c=new a;if(this.cloneProps(c),b)for(var d=c.children=[],e=0,f=this.children.length;f>e;e++){var g=this.children[e].clone(b);g.parent=c,d.push(g)}return c},b.toString=function(){return"[Container (name="+this.name+")]"},b.DisplayObject__tick=b._tick,b._tick=function(a){for(var b=this.children.length-1;b>=0;b--){var c=this.children[b];c._tick&&c._tick(a)}this.DisplayObject__tick(a)},b._getObjectsUnderPoint=function(b,c,d,e){for(var f=createjs.DisplayObject._hitTestContext,g=this._matrix,h=this.children.length,i=h-1;i>=0;i--){var j=this.children[i],k=e&&j.hitArea;if(j.visible&&(k||j.isVisible())&&(!e||j.mouseEnabled))if(!k&&j instanceof a){var l=j._getObjectsUnderPoint(b,c,d,e);if(!d&&l)return l}else{if(j.getConcatenatedMatrix(g),k&&(g.appendTransform(k.x,k.y,k.scaleX,k.scaleY,k.rotation,k.skewX,k.skewY,k.regX,k.regY),g.alpha=k.alpha),f.globalAlpha=g.alpha,f.setTransform(g.a,g.b,g.c,g.d,g.tx-b,g.ty-c),(k||j).draw(f),!this._testHit(f))continue;if(f.setTransform(1,0,0,1,0,0),f.clearRect(0,0,2,2),!d)return e&&!this.mouseChildren?this:j;d.push(j)}}return null},b._getBounds=function(a,b){var c=this.DisplayObject_getBounds();if(c)return this._transformBounds(c,a,b);var d,e,f,g,h=b?this._matrix.identity():this.getMatrix(this._matrix);a&&h.prependMatrix(a);for(var i=this.children.length,j=0;i>j;j++){var k=this.children[j];if(k.visible&&(c=k._getBounds(h))){var l=c.x,m=c.y,n=l+c.width,o=m+c.height;(d>l||null==d)&&(d=l),(n>e||null==e)&&(e=n),(f>m||null==f)&&(f=m),(o>g||null==g)&&(g=o)}}return null==e?null:this._rectangle.initialize(d,f,e-d,g-f)},createjs.Container=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Container;a._snapToPixelEnabled=!1,b.autoClear=!0,b.canvas=null,b.mouseX=0,b.mouseY=0,b.snapToPixelEnabled=!1,b.mouseInBounds=!1,b.tickOnUpdate=!0,b.mouseMoveOutside=!1,b.nextStage=null,b._pointerData=null,b._pointerCount=0,b._primaryPointerID=null,b._mouseOverIntervalID=null,b.Container_initialize=b.initialize,b.initialize=function(a){this.Container_initialize(),this.canvas="string"==typeof a?document.getElementById(a):a,this._pointerData={},this.enableDOMEvents(!0)},b.update=function(){if(this.canvas){this.tickOnUpdate&&(this.dispatchEvent("tickstart"),this._tick(arguments.length?arguments:null),this.dispatchEvent("tickend")),this.dispatchEvent("drawstart"),a._snapToPixelEnabled=this.snapToPixelEnabled,this.autoClear&&this.clear();var b=this.canvas.getContext("2d");b.save(),this.updateContext(b),this.draw(b,!1),b.restore(),this.dispatchEvent("drawend")}},b.handleEvent=function(a){"tick"==a.type&&this.update(a)},b.clear=function(){if(this.canvas){var a=this.canvas.getContext("2d");a.setTransform(1,0,0,1,0,0),a.clearRect(0,0,this.canvas.width+1,this.canvas.height+1)}},b.toDataURL=function(a,b){b||(b="image/png");var c,d=this.canvas.getContext("2d"),e=this.canvas.width,f=this.canvas.height;if(a){c=d.getImageData(0,0,e,f);var g=d.globalCompositeOperation;d.globalCompositeOperation="destination-over",d.fillStyle=a,d.fillRect(0,0,e,f)}var h=this.canvas.toDataURL(b);return a&&(d.clearRect(0,0,e+1,f+1),d.putImageData(c,0,0),d.globalCompositeOperation=g),h},b.enableMouseOver=function(a){if(this._mouseOverIntervalID&&(clearInterval(this._mouseOverIntervalID),this._mouseOverIntervalID=null,0==a&&this._testMouseOver(!0)),null==a)a=20;else if(0>=a)return;var b=this;this._mouseOverIntervalID=setInterval(function(){b._testMouseOver()},1e3/Math.min(50,a))},b.enableDOMEvents=function(a){null==a&&(a=!0);var b,c,d=this._eventListeners;if(!a&&d){for(b in d)c=d[b],c.t.removeEventListener(b,c.f,!1);this._eventListeners=null}else if(a&&!d&&this.canvas){var e=window.addEventListener?window:document,f=this;d=this._eventListeners={},d.mouseup={t:e,f:function(a){f._handleMouseUp(a)}},d.mousemove={t:e,f:function(a){f._handleMouseMove(a)}},d.dblclick={t:e,f:function(a){f._handleDoubleClick(a)}},d.mousedown={t:this.canvas,f:function(a){f._handleMouseDown(a)}};for(b in d)c=d[b],c.t.addEventListener(b,c.f,!1)}},b.clone=function(){var b=new a(null);return this.cloneProps(b),b},b.toString=function(){return"[Stage (name="+this.name+")]"},b._getElementRect=function(a){var b;try{b=a.getBoundingClientRect()}catch(c){b={top:a.offsetTop,left:a.offsetLeft,width:a.offsetWidth,height:a.offsetHeight}}var d=(window.pageXOffset||document.scrollLeft||0)-(document.clientLeft||document.body.clientLeft||0),e=(window.pageYOffset||document.scrollTop||0)-(document.clientTop||document.body.clientTop||0),f=window.getComputedStyle?getComputedStyle(a):a.currentStyle,g=parseInt(f.paddingLeft)+parseInt(f.borderLeftWidth),h=parseInt(f.paddingTop)+parseInt(f.borderTopWidth),i=parseInt(f.paddingRight)+parseInt(f.borderRightWidth),j=parseInt(f.paddingBottom)+parseInt(f.borderBottomWidth);return{left:b.left+d+g,right:b.right+d-i,top:b.top+e+h,bottom:b.bottom+e-j}},b._getPointerData=function(a){var b=this._pointerData[a];return b||(b=this._pointerData[a]={x:0,y:0},null==this._primaryPointerID&&(this._primaryPointerID=a)),b},b._handleMouseMove=function(a){a||(a=window.event),this._handlePointerMove(-1,a,a.pageX,a.pageY)},b._handlePointerMove=function(a,b,c,d){if(this.canvas){var e=this._getPointerData(a),f=e.inBounds;if(this._updatePointerPosition(a,b,c,d),f||e.inBounds||this.mouseMoveOutside){-1==a&&e.inBounds==!f&&this._dispatchMouseEvent(this,f?"mouseleave":"mouseenter",!1,a,e,b),this._dispatchMouseEvent(this,"stagemousemove",!1,a,e,b),this._dispatchMouseEvent(e.target,"pressmove",!0,a,e,b);var g=e.event;g&&g.hasEventListener("mousemove")&&g.dispatchEvent(new createjs.MouseEvent("mousemove",!1,!1,e.x,e.y,b,a,a==this._primaryPointerID,e.rawX,e.rawY),oTarget),this.nextStage&&this.nextStage._handlePointerMove(a,b,c,d)}}},b._updatePointerPosition=function(a,b,c,d){var e=this._getElementRect(this.canvas);c-=e.left,d-=e.top;var f=this.canvas.width,g=this.canvas.height;c/=(e.right-e.left)/f,d/=(e.bottom-e.top)/g;var h=this._getPointerData(a);(h.inBounds=c>=0&&d>=0&&f-1>=c&&g-1>=d)?(h.x=c,h.y=d):this.mouseMoveOutside&&(h.x=0>c?0:c>f-1?f-1:c,h.y=0>d?0:d>g-1?g-1:d),h.posEvtObj=b,h.rawX=c,h.rawY=d,a==this._primaryPointerID&&(this.mouseX=h.x,this.mouseY=h.y,this.mouseInBounds=h.inBounds)},b._handleMouseUp=function(a){this._handlePointerUp(-1,a,!1)},b._handlePointerUp=function(a,b,c){var d=this._getPointerData(a);this._dispatchMouseEvent(this,"stagemouseup",!1,a,d,b);var e=d.target;e&&(this._getObjectsUnderPoint(d.x,d.y,null,!0)==e&&this._dispatchMouseEvent(e,"click",!0,a,d,b),this._dispatchMouseEvent(e,"pressup",!0,a,d,b));var f=d.event;f&&f.hasEventListener("mouseup")&&f.dispatchEvent(new createjs.MouseEvent("mouseup",!1,!1,d.x,d.y,b,a,a==this._primaryPointerID,d.rawX,d.rawY),e),c?(a==this._primaryPointerID&&(this._primaryPointerID=null),delete this._pointerData[a]):d.event=d.target=null,this.nextStage&&this.nextStage._handlePointerUp(a,b,c)},b._handleMouseDown=function(a){this._handlePointerDown(-1,a)},b._handlePointerDown=function(a,b,c,d){null!=d&&this._updatePointerPosition(a,b,c,d);var e=this._getPointerData(a);this._dispatchMouseEvent(this,"stagemousedown",!1,a,e,b),e.target=this._getObjectsUnderPoint(e.x,e.y,null,!0),this._dispatchMouseEvent(e.target,"mousedown",!0,a,e,b),this.nextStage&&this.nextStage._handlePointerDown(a,b,c,d)},b._testMouseOver=function(a){if(-1==this._primaryPointerID&&(a||this.mouseX!=this._mouseOverX||this.mouseY!=this._mouseOverY||!this.mouseInBounds)){var b,c,d,e,f=this._getPointerData(-1),g=f.posEvtObj,h=-1,i="";(a||this.mouseInBounds&&g&&g.target==this.canvas)&&(b=this._getObjectsUnderPoint(this.mouseX,this.mouseY,null,!0),this._mouseOverX=this.mouseX,this._mouseOverY=this.mouseY);var j=this._mouseOverTarget||[],k=j[j.length-1],l=this._mouseOverTarget=[];for(c=b;c;)l.unshift(c),null!=c.cursor&&(i=c.cursor),c=c.parent;for(this.canvas.style.cursor=i,d=0,e=l.length;e>d&&l[d]==j[d];d++)h=d;for(k!=b&&this._dispatchMouseEvent(k,"mouseout",!0,-1,f,g),d=j.length-1;d>h;d--)this._dispatchMouseEvent(j[d],"rollout",!1,-1,f,g);for(d=l.length-1;d>h;d--)this._dispatchMouseEvent(l[d],"rollover",!1,-1,f,g);k!=b&&this._dispatchMouseEvent(b,"mouseover",!0,-1,f,g)}},b._handleDoubleClick=function(a){var b=this._getPointerData(-1),c=this._getObjectsUnderPoint(b.x,b.y,null,!0);this._dispatchMouseEvent(c,"dblclick",!0,-1,b,a),this.nextStage&&this.nextStage._handleDoubleClick(a)},b._dispatchMouseEvent=function(a,b,c,d,e,f){if(a&&(c||a.hasEventListener(b))){var g=new createjs.MouseEvent(b,c,!1,e.x,e.y,f,d,d==this._primaryPointerID,e.rawX,e.rawY);a.dispatchEvent(g)}},createjs.Stage=a}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.DisplayObject;b.image=null,b.snapToPixel=!0,b.sourceRect=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a){this.DisplayObject_initialize(),"string"==typeof a?(this.image=new Image,this.image.src=a):this.image=a},b.isVisible=function(){var a=this.cacheCanvas||this.image&&(this.image.complete||this.image.getContext||this.image.readyState>=2);return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;var c=this.sourceRect;return c?a.drawImage(this.image,c.x,c.y,c.width,c.height,0,0,c.width,c.height):a.drawImage(this.image,0,0),!0},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){var a=this.DisplayObject_getBounds();if(a)return a;var b=this.sourceRect||this.image,c=this.image&&(this.image.complete||this.image.getContext||this.image.readyState>=2);return c?this._rectangle.initialize(0,0,b.width,b.height):null},b.clone=function(){var b=new a(this.image);return this.sourceRect&&(b.sourceRect=this.sourceRect.clone()),this.cloneProps(b),b},b.toString=function(){return"[Bitmap (name="+this.name+")]"},createjs.Bitmap=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b){this.initialize(a,b)},b=a.prototype=new createjs.DisplayObject;b.currentFrame=0,b.currentAnimation=null,b.paused=!0,b.spriteSheet=null,b.snapToPixel=!0,b.offset=0,b.currentAnimationFrame=0,b.framerate=0,b._advanceCount=0,b._animation=null,b._currentFrame=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a,b){this.DisplayObject_initialize(),this.spriteSheet=a,b&&this.gotoAndPlay(b)},b.isVisible=function(){var a=this.cacheCanvas||this.spriteSheet.complete;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;this._normalizeFrame();var c=this.spriteSheet.getFrame(0|this._currentFrame);if(!c)return!1;var d=c.rect;return a.drawImage(c.image,d.x,d.y,d.width,d.height,-c.regX,-c.regY,d.width,d.height),!0},b.play=function(){this.paused=!1},b.stop=function(){this.paused=!0},b.gotoAndPlay=function(a){this.paused=!1,this._goto(a)},b.gotoAndStop=function(a){this.paused=!0,this._goto(a)},b.advance=function(a){var b=this._animation&&this._animation.speed||1,c=this.framerate||this.spriteSheet.framerate,d=c&&null!=a?a/(1e3/c):1;this._animation?this.currentAnimationFrame+=d*b:this._currentFrame+=d*b,this._normalizeFrame()},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){return this.DisplayObject_getBounds()||this.spriteSheet.getFrameBounds(this.currentFrame,this._rectangle)},b.clone=function(){var b=new a(this.spriteSheet);return this.cloneProps(b),b},b.toString=function(){return"[Sprite (name="+this.name+")]"},b.DisplayObject__tick=b._tick,b._tick=function(a){this.paused||this.advance(a&&a[0]&&a[0].delta),this.DisplayObject__tick(a)},b._normalizeFrame=function(){var a,b=this._animation,c=this.paused,d=this._currentFrame,e=this.currentAnimationFrame;if(b)if(a=b.frames.length,(0|e)>=a){var f=b.next;if(this._dispatchAnimationEnd(b,d,c,f,a-1));else{if(f)return this._goto(f,e-a);this.paused=!0,e=this.currentAnimationFrame=b.frames.length-1,this._currentFrame=b.frames[e]}}else this._currentFrame=b.frames[0|e];else if(a=this.spriteSheet.getNumFrames(),d>=a&&!this._dispatchAnimationEnd(b,d,c,a-1)&&(this._currentFrame-=a)>=a)return this._normalizeFrame();this.currentFrame=0|this._currentFrame},b._dispatchAnimationEnd=function(a,b,c,d,e){var f=a?a.name:null;if(this.hasEventListener("animationend")){var g=new createjs.Event("animationend");g.name=f,g.next=d,this.dispatchEvent(g)}return!c&&this.paused&&(this.currentAnimationFrame=e),this.paused!=c||this._animation!=a||this._currentFrame!=b},b.DisplayObject_cloneProps=b.cloneProps,b.cloneProps=function(a){this.DisplayObject_cloneProps(a),a.currentFrame=this.currentFrame,a._currentFrame=this._currentFrame,a.currentAnimation=this.currentAnimation,a.paused=this.paused,a._animation=this._animation,a.currentAnimationFrame=this.currentAnimationFrame,a.framerate=this.framerate},b._goto=function(a,b){if(isNaN(a)){var c=this.spriteSheet.getAnimation(a);c&&(this.currentAnimationFrame=b||0,this._animation=c,this.currentAnimation=a,this._normalizeFrame())}else this.currentAnimationFrame=0,this.currentAnimation=this._animation=null,this._currentFrame=a,this._normalizeFrame()},createjs.Sprite=a}(),this.createjs=this.createjs||{},function(){"use strict";var a="BitmapAnimation is deprecated in favour of Sprite. See VERSIONS file for info on changes.";if(!createjs.Sprite)throw a;(createjs.BitmapAnimation=function(b){console.log(a),this.initialize(b)}).prototype=new createjs.Sprite}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.DisplayObject;b.graphics=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a){this.DisplayObject_initialize(),this.graphics=a?a:new createjs.Graphics},b.isVisible=function(){var a=this.cacheCanvas||this.graphics&&!this.graphics.isEmpty();return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){return this.DisplayObject_draw(a,b)?!0:(this.graphics.draw(a),!0)},b.clone=function(b){var c=new a(b&&this.graphics?this.graphics.clone():this.graphics);return this.cloneProps(c),c},b.toString=function(){return"[Shape (name="+this.name+")]"},createjs.Shape=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.DisplayObject,c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");c.getContext&&(a._workingContext=c.getContext("2d"),c.width=c.height=1),a.H_OFFSETS={start:0,left:0,center:-.5,end:-1,right:-1},a.V_OFFSETS={top:0,hanging:-.01,middle:-.4,alphabetic:-.8,ideographic:-.85,bottom:-1},b.text="",b.font=null,b.color=null,b.textAlign="left",b.textBaseline="top",b.maxWidth=null,b.outline=0,b.lineHeight=0,b.lineWidth=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a,b,c){this.DisplayObject_initialize(),this.text=a,this.font=b,this.color=c},b.isVisible=function(){var a=this.cacheCanvas||null!=this.text&&""!==this.text;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;var c=this.color||"#000";return this.outline?(a.strokeStyle=c,a.lineWidth=1*this.outline):a.fillStyle=c,this._drawText(this._prepContext(a)),!0},b.getMeasuredWidth=function(){return this._prepContext(a._workingContext).measureText(this.text).width},b.getMeasuredLineHeight=function(){return 1.2*this._prepContext(a._workingContext).measureText("M").width},b.getMeasuredHeight=function(){return this._drawText(null,{}).height},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){var b=this.DisplayObject_getBounds();if(b)return b;if(null==this.text||""==this.text)return null;var c=this._drawText(null,{}),d=this.maxWidth&&this.maxWidth<c.width?this.maxWidth:c.width,e=d*a.H_OFFSETS[this.textAlign||"left"],f=this.lineHeight||this.getMeasuredLineHeight(),g=f*a.V_OFFSETS[this.textBaseline||"top"];return this._rectangle.initialize(e,g,d,c.height)},b.clone=function(){var b=new a(this.text,this.font,this.color);return this.cloneProps(b),b},b.toString=function(){return"[Text (text="+(this.text.length>20?this.text.substr(0,17)+"...":this.text)+")]"},b.DisplayObject_cloneProps=b.cloneProps,b.cloneProps=function(a){this.DisplayObject_cloneProps(a),a.textAlign=this.textAlign,a.textBaseline=this.textBaseline,a.maxWidth=this.maxWidth,a.outline=this.outline,a.lineHeight=this.lineHeight,a.lineWidth=this.lineWidth},b._prepContext=function(a){return a.font=this.font,a.textAlign=this.textAlign||"left",a.textBaseline=this.textBaseline||"top",a},b._drawText=function(b,c){var d=!!b;d||(b=this._prepContext(a._workingContext));for(var e=this.lineHeight||this.getMeasuredLineHeight(),f=0,g=0,h=String(this.text).split(/(?:\r\n|\r|\n)/),i=0,j=h.length;j>i;i++){var k=h[i],l=null;if(null!=this.lineWidth&&(l=b.measureText(k).width)>this.lineWidth){var m=k.split(/(\s)/);k=m[0],l=b.measureText(k).width;for(var n=1,o=m.length;o>n;n+=2){var p=b.measureText(m[n]+m[n+1]).width;l+p>this.lineWidth?(d&&this._drawTextLine(b,k,g*e),l>f&&(f=l),k=m[n+1],l=b.measureText(k).width,g++):(k+=m[n]+m[n+1],l+=p)}}d&&this._drawTextLine(b,k,g*e),c&&null==l&&(l=b.measureText(k).width),l>f&&(f=l),g++}return c&&(c.count=g,c.width=f,c.height=g*e),c},b._drawTextLine=function(a,b,c){this.outline?a.strokeText(b,0,c,this.maxWidth||65535):a.fillText(b,0,c,this.maxWidth||65535)},createjs.Text=a}(),this.createjs=this.createjs||{},function(){"use strict";function a(a,b){this.initialize(a,b)}var b=a.prototype=new createjs.DisplayObject;b.text="",b.spriteSheet=null,b.lineHeight=0,b.letterSpacing=0,b.spaceWidth=0,b.DisplayObject_initialize=b.initialize,b.initialize=function(a,b){this.DisplayObject_initialize(),this.text=a,this.spriteSheet=b},b.DisplayObject_draw=b.draw,b.draw=function(a,b){return this.DisplayObject_draw(a,b)?!0:(this._drawText(a),void 0)},b.isVisible=function(){var a=this.cacheCanvas||this.spriteSheet&&this.spriteSheet.complete&&this.text;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.getBounds=function(){var a=this._rectangle;return this._drawText(null,a),a.width?a:null},b._getFrame=function(a,b){var c,d=b.getAnimation(a);return d||(a!=(c=a.toUpperCase())||a!=(c=a.toLowerCase())||(c=null),c&&(d=b.getAnimation(c))),d&&b.getFrame(d.frames[0])},b._getLineHeight=function(a){var b=this._getFrame("1",a)||this._getFrame("T",a)||this._getFrame("L",a)||a.getFrame(0);return b?b.rect.height:1},b._getSpaceWidth=function(a){var b=this._getFrame("1",a)||this._getFrame("l",a)||this._getFrame("e",a)||this._getFrame("a",a)||a.getFrame(0);return b?b.rect.width:1},b._drawText=function(a,b){var c,d,e,f=0,g=0,h=this.spaceWidth,i=this.lineHeight,j=this.spriteSheet,k=!!this._getFrame(" ",j);k||0!=h||(h=this._getSpaceWidth(j)),0==i&&(i=this._getLineHeight(j));for(var l=0,m=0,n=this.text.length;n>m;m++){var o=this.text.charAt(m);if(k||" "!=o)if("\n"!=o&&"\r"!=o){var p=this._getFrame(o,j);if(p){var q=p.rect;e=p.regX,c=q.width,a&&a.drawImage(p.image,q.x,q.y,c,d=q.height,f-e,g-p.regY,c,d),f+=c+this.letterSpacing}}else"\r"==o&&"\n"==this.text.charAt(m+1)&&m++,f-e>l&&(l=f-e),f=0,g+=i;else f+=h}f-e>l&&(l=f-e),b&&(b.width=l-this.letterSpacing,b.height=g+i)},createjs.BitmapText=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"SpriteSheetUtils cannot be instantiated"},b=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");b.getContext&&(a._workingCanvas=b,a._workingContext=b.getContext("2d"),b.width=b.height=1),a.addFlippedFrames=function(b,c,d,e){if(c||d||e){var f=0;c&&a._flip(b,++f,!0,!1),d&&a._flip(b,++f,!1,!0),e&&a._flip(b,++f,!0,!0)}},a.extractFrame=function(b,c){isNaN(c)&&(c=b.getAnimation(c).frames[0]);var d=b.getFrame(c);if(!d)return null;var e=d.rect,f=a._workingCanvas;f.width=e.width,f.height=e.height,a._workingContext.drawImage(d.image,e.x,e.y,e.width,e.height,0,0,e.width,e.height);var g=new Image;return g.src=f.toDataURL("image/png"),g},a.mergeAlpha=function(a,b,c){c||(c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")),c.width=Math.max(b.width,a.width),c.height=Math.max(b.height,a.height);var d=c.getContext("2d");return d.save(),d.drawImage(a,0,0),d.globalCompositeOperation="destination-in",d.drawImage(b,0,0),d.restore(),c},a._flip=function(b,c,d,e){for(var f=b._images,g=a._workingCanvas,h=a._workingContext,i=f.length/c,j=0;i>j;j++){var k=f[j];k.__tmp=j,h.setTransform(1,0,0,1,0,0),h.clearRect(0,0,g.width+1,g.height+1),g.width=k.width,g.height=k.height,h.setTransform(d?-1:1,0,0,e?-1:1,d?k.width:0,e?k.height:0),h.drawImage(k,0,0);var l=new Image;l.src=g.toDataURL("image/png"),l.width=k.width,l.height=k.height,f.push(l)}var m=b._frames,n=m.length/c;for(j=0;n>j;j++){k=m[j];var o=k.rect.clone();l=f[k.image.__tmp+i*c];var p={image:l,rect:o,regX:k.regX,regY:k.regY};d&&(o.x=l.width-o.x-o.width,p.regX=o.width-k.regX),e&&(o.y=l.height-o.y-o.height,p.regY=o.height-k.regY),m.push(p)}var q="_"+(d?"h":"")+(e?"v":""),r=b._animations,s=b._data,t=r.length/c;for(j=0;t>j;j++){var u=r[j];k=s[u];var v={name:u+q,frequency:k.frequency,next:k.next,frames:[]};k.next&&(v.next+=q),m=k.frames;for(var w=0,x=m.length;x>w;w++)v.frames.push(m[w]+n*c);s[v.name]=v,r.push(v.name)}},createjs.SpriteSheetUtils=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){this.initialize()},b=a.prototype=new createjs.EventDispatcher;a.ERR_DIMENSIONS="frame dimensions exceed max spritesheet dimensions",a.ERR_RUNNING="a build is already running",b.maxWidth=2048,b.maxHeight=2048,b.spriteSheet=null,b.scale=1,b.padding=1,b.timeSlice=.3,b.progress=-1,b._frames=null,b._animations=null,b._data=null,b._nextFrameIndex=0,b._index=0,b._timerID=null,b._scale=1,b.initialize=function(){this._frames=[],this._animations={}},b.addFrame=function(b,c,d,e,f,g){if(this._data)throw a.ERR_RUNNING;var h=c||b.bounds||b.nominalBounds;return!h&&b.getBounds&&(h=b.getBounds()),h?(d=d||1,this._frames.push({source:b,sourceRect:h,scale:d,funct:e,params:f,scope:g,index:this._frames.length,height:h.height*d})-1):null},b.addAnimation=function(b,c,d,e){if(this._data)throw a.ERR_RUNNING;this._animations[b]={frames:c,next:d,frequency:e}},b.addMovieClip=function(b,c,d){if(this._data)throw a.ERR_RUNNING;var e=b.frameBounds,f=c||b.bounds||b.nominalBounds;if(!f&&b.getBounds&&(f=b.getBounds()),!f&&!e)return null;for(var g=this._frames.length,h=b.timeline.duration,i=0;h>i;i++){var j=e&&e[i]?e[i]:f;this.addFrame(b,j,d,function(a){var b=this.actionsEnabled;this.actionsEnabled=!1,this.gotoAndStop(a),this.actionsEnabled=b},[i],b)}var k=b.timeline._labels,l=[];for(var m in k)l.push({index:k[m],label:m});if(l.length){l.sort(function(a,b){return a.index-b.index});for(var i=0,n=l.length;n>i;i++){for(var o=l[i].label,p=g+l[i].index,q=g+(i==n-1?h:l[i+1].index),r=[],s=p;q>s;s++)r.push(s);this.addAnimation(o,r,!0)}}},b.build=function(){if(this._data)throw a.ERR_RUNNING;for(this._startBuild();this._drawNext(););return this._endBuild(),this.spriteSheet},b.buildAsync=function(b){if(this._data)throw a.ERR_RUNNING;this.timeSlice=b,this._startBuild();var c=this;this._timerID=setTimeout(function(){c._run()},50-50*Math.max(.01,Math.min(.99,this.timeSlice||.3)))},b.stopAsync=function(){clearTimeout(this._timerID),this._data=null},b.clone=function(){throw"SpriteSheetBuilder cannot be cloned."},b.toString=function(){return"[SpriteSheetBuilder]"},b._startBuild=function(){var b=this.padding||0;this.progress=0,this.spriteSheet=null,this._index=0,this._scale=this.scale;var c=[];this._data={images:[],frames:c,animations:this._animations};var d=this._frames.slice();if(d.sort(function(a,b){return a.height<=b.height?-1:1}),d[d.length-1].height+2*b>this.maxHeight)throw a.ERR_DIMENSIONS;for(var e=0,f=0,g=0;d.length;){var h=this._fillRow(d,e,g,c,b);if(h.w>f&&(f=h.w),e+=h.h,!h.h||!d.length){var i=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");i.width=this._getSize(f,this.maxWidth),i.height=this._getSize(e,this.maxHeight),this._data.images[g]=i,h.h||(f=e=0,g++)}}},b._getSize=function(a,b){for(var c=4;Math.pow(2,++c)<a;);return Math.min(b,Math.pow(2,c))},b._fillRow=function(b,c,d,e,f){var g=this.maxWidth,h=this.maxHeight;c+=f;for(var i=h-c,j=f,k=0,l=b.length-1;l>=0;l--){var m=b[l],n=this._scale*m.scale,o=m.sourceRect,p=m.source,q=Math.floor(n*o.x-f),r=Math.floor(n*o.y-f),s=Math.ceil(n*o.height+2*f),t=Math.ceil(n*o.width+2*f);if(t>g)throw a.ERR_DIMENSIONS;s>i||j+t>g||(m.img=d,m.rect=new createjs.Rectangle(j,c,t,s),k=k||s,b.splice(l,1),e[m.index]=[j,c,t,s,d,Math.round(-q+n*p.regX-f),Math.round(-r+n*p.regY-f)],j+=t)}return{w:j,h:k}},b._endBuild=function(){this.spriteSheet=new createjs.SpriteSheet(this._data),this._data=null,this.progress=1,this.dispatchEvent("complete")},b._run=function(){for(var a=50*Math.max(.01,Math.min(.99,this.timeSlice||.3)),b=(new Date).getTime()+a,c=!1;b>(new Date).getTime();)if(!this._drawNext()){c=!0;break}if(c)this._endBuild();else{var d=this;this._timerID=setTimeout(function(){d._run()},50-a)}var e=this.progress=this._index/this._frames.length;if(this.hasEventListener("progress")){var f=new createjs.Event("progress");f.progress=e,this.dispatchEvent(f)}},b._drawNext=function(){var a=this._frames[this._index],b=a.scale*this._scale,c=a.rect,d=a.sourceRect,e=this._data.images[a.img],f=e.getContext("2d");return a.funct&&a.funct.apply(a.scope,a.params),f.save(),f.beginPath(),f.rect(c.x,c.y,c.width,c.height),f.clip(),f.translate(Math.ceil(c.x-d.x*b),Math.ceil(c.y-d.y*b)),f.scale(b,b),a.source.draw(f),f.restore(),++this._index<this._frames.length},createjs.SpriteSheetBuilder=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.DisplayObject;b.htmlElement=null,b._oldMtx=null,b._visible=!1,b.DisplayObject_initialize=b.initialize,b.initialize=function(a){"string"==typeof a&&(a=document.getElementById(a)),this.DisplayObject_initialize(),this.mouseEnabled=!1,this.htmlElement=a;var b=a.style;b.position="absolute",b.transformOrigin=b.WebkitTransformOrigin=b.msTransformOrigin=b.MozTransformOrigin=b.OTransformOrigin="0% 0%"},b.isVisible=function(){return null!=this.htmlElement},b.draw=function(){return this.visible&&(this._visible=!0),!0},b.cache=function(){},b.uncache=function(){},b.updateCache=function(){},b.hitTest=function(){},b.localToGlobal=function(){},b.globalToLocal=function(){},b.localToLocal=function(){},b.clone=function(){throw"DOMElement cannot be cloned."},b.toString=function(){return"[DOMElement (name="+this.name+")]"},b.DisplayObject__tick=b._tick,b._tick=function(a){var b=this.getStage();this._visible=!1,b&&b.on("drawend",this._handleDrawEnd,this,!0),this.DisplayObject__tick(a)},b._handleDrawEnd=function(){var a=this.htmlElement;if(a){var b=a.style,c=this._visible?"visible":"hidden";if(c!=b.visibility&&(b.visibility=c),this._visible){var d=this.getConcatenatedMatrix(this._matrix),e=this._oldMtx,f=1e4;
if(e&&e.alpha==d.alpha||(b.opacity=""+(0|d.alpha*f)/f,e&&(e.alpha=d.alpha)),!e||e.tx!=d.tx||e.ty!=d.ty||e.a!=d.a||e.b!=d.b||e.c!=d.c||e.d!=d.d){var g="matrix("+(0|d.a*f)/f+","+(0|d.b*f)/f+","+(0|d.c*f)/f+","+(0|d.d*f)/f+","+(0|d.tx+.5);b.transform=b.WebkitTransform=b.OTransform=b.msTransform=g+","+(0|d.ty+.5)+")",b.MozTransform=g+"px,"+(0|d.ty+.5)+"px)",this._oldMtx=e?e.copy(d):d.clone()}}}},createjs.DOMElement=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){this.initialize()},b=a.prototype;b.initialize=function(){},b.getBounds=function(){return null},b.applyFilter=function(){},b.toString=function(){return"[Filter]"},b.clone=function(){return new a},createjs.Filter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.Filter;b.initialize=function(a,b,c){(isNaN(a)||0>a)&&(a=0),this.blurX=0|a,(isNaN(b)||0>b)&&(b=0),this.blurY=0|b,(isNaN(c)||1>c)&&(c=1),this.quality=0|c},b.blurX=0,b.blurY=0,b.quality=1,b.mul_table=[1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1],b.shg_table=[0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9],b.getBounds=function(){var a=.5*Math.pow(this.quality,.6);return new createjs.Rectangle(-this.blurX*a,-this.blurY*a,2*this.blurX*a,2*this.blurY*a)},b.applyFilter=function(a,b,c,d,e,f,g,h){f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}var k=this.blurX/2;if(isNaN(k)||0>k)return!1;k|=0;var l=this.blurY/2;if(isNaN(l)||0>l)return!1;if(l|=0,0==k&&0==l)return!1;var m=this.quality;(isNaN(m)||1>m)&&(m=1),m|=0,m>3&&(m=3),1>m&&(m=1);var b,c,n,o,p,q,r,s,t,u,v,w,x,y,z,A=i.data,B=k+k+1,C=l+l+1,D=d-1,E=e-1,F=k+1,G=l+1,H={r:0,b:0,g:0,a:0,next:null},I=H;for(n=1;B>n;n++)I=I.next={r:0,b:0,g:0,a:0,next:null};I.next=H;var J={r:0,b:0,g:0,a:0,next:null},K=J;for(n=1;C>n;n++)K=K.next={r:0,b:0,g:0,a:0,next:null};K.next=J;for(var L=null;m-->0;){r=q=0;var M=this.mul_table[k],N=this.shg_table[k];for(c=e;--c>-1;){for(s=F*(w=A[q]),t=F*(x=A[q+1]),u=F*(y=A[q+2]),v=F*(z=A[q+3]),I=H,n=F;--n>-1;)I.r=w,I.g=x,I.b=y,I.a=z,I=I.next;for(n=1;F>n;n++)o=q+((n>D?D:n)<<2),s+=I.r=A[o],t+=I.g=A[o+1],u+=I.b=A[o+2],v+=I.a=A[o+3],I=I.next;for(L=H,b=0;d>b;b++)A[q++]=s*M>>>N,A[q++]=t*M>>>N,A[q++]=u*M>>>N,A[q++]=v*M>>>N,o=r+((o=b+k+1)<D?o:D)<<2,s-=L.r-(L.r=A[o]),t-=L.g-(L.g=A[o+1]),u-=L.b-(L.b=A[o+2]),v-=L.a-(L.a=A[o+3]),L=L.next;r+=d}for(M=this.mul_table[l],N=this.shg_table[l],b=0;d>b;b++){for(q=b<<2,s=G*(w=A[q]),t=G*(x=A[q+1]),u=G*(y=A[q+2]),v=G*(z=A[q+3]),K=J,n=0;G>n;n++)K.r=w,K.g=x,K.b=y,K.a=z,K=K.next;for(p=d,n=1;l>=n;n++)q=p+b<<2,s+=K.r=A[q],t+=K.g=A[q+1],u+=K.b=A[q+2],v+=K.a=A[q+3],K=K.next,E>n&&(p+=d);if(q=b,L=J,m>0)for(c=0;e>c;c++)o=q<<2,A[o+3]=z=v*M>>>N,z>0?(A[o]=s*M>>>N,A[o+1]=t*M>>>N,A[o+2]=u*M>>>N):A[o]=A[o+1]=A[o+2]=0,o=b+((o=c+G)<E?o:E)*d<<2,s-=L.r-(L.r=A[o]),t-=L.g-(L.g=A[o+1]),u-=L.b-(L.b=A[o+2]),v-=L.a-(L.a=A[o+3]),L=L.next,q+=d;else for(c=0;e>c;c++)o=q<<2,A[o+3]=z=v*M>>>N,z>0?(z=255/z,A[o]=(s*M>>>N)*z,A[o+1]=(t*M>>>N)*z,A[o+2]=(u*M>>>N)*z):A[o]=A[o+1]=A[o+2]=0,o=b+((o=c+G)<E?o:E)*d<<2,s-=L.r-(L.r=A[o]),t-=L.g-(L.g=A[o+1]),u-=L.b-(L.b=A[o+2]),v-=L.a-(L.a=A[o+3]),L=L.next,q+=d}}return f.putImageData(i,g,h),!0},b.clone=function(){return new a(this.blurX,this.blurY,this.quality)},b.toString=function(){return"[BlurFilter]"},createjs.BlurFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Filter;b.initialize=function(a){this.alphaMap=a},b.alphaMap=null,b._alphaMap=null,b._mapData=null,b.applyFilter=function(a,b,c,d,e,f,g,h){if(!this.alphaMap)return!0;if(!this._prepAlphaMap())return!1;f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}for(var k=i.data,l=this._mapData,m=k.length,n=0;m>n;n+=4)k[n+3]=l[n]||0;return i.data=k,f.putImageData(i,g,h),!0},b.clone=function(){return new a(this.alphaMap)},b.toString=function(){return"[AlphaMapFilter]"},b._prepAlphaMap=function(){if(!this.alphaMap)return!1;if(this.alphaMap==this._alphaMap&&this._mapData)return!0;this._mapData=null;var a,b=this._alphaMap=this.alphaMap,c=b;b instanceof HTMLCanvasElement?a=c.getContext("2d"):(c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"),c.width=b.width,c.height=b.height,a=c.getContext("2d"),a.drawImage(b,0,0));try{var d=a.getImageData(0,0,b.width,b.height)}catch(e){return!1}return this._mapData=d.data,!0},createjs.AlphaMapFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Filter;b.initialize=function(a){this.mask=a},b.mask=null,b.applyFilter=function(a,b,c,d,e,f,g,h){return this.mask?(f=f||a,null==g&&(g=b),null==h&&(h=c),f.save(),f.globalCompositeOperation="destination-in",f.drawImage(this.mask,g,h),f.restore(),!0):!0},b.clone=function(){return new a(this.mask)},b.toString=function(){return"[AlphaMaskFilter]"},createjs.AlphaMaskFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d,e,f,g,h){this.initialize(a,b,c,d,e,f,g,h)},b=a.prototype=new createjs.Filter;b.redMultiplier=1,b.greenMultiplier=1,b.blueMultiplier=1,b.alphaMultiplier=1,b.redOffset=0,b.greenOffset=0,b.blueOffset=0,b.alphaOffset=0,b.initialize=function(a,b,c,d,e,f,g,h){this.redMultiplier=null!=a?a:1,this.greenMultiplier=null!=b?b:1,this.blueMultiplier=null!=c?c:1,this.alphaMultiplier=null!=d?d:1,this.redOffset=e||0,this.greenOffset=f||0,this.blueOffset=g||0,this.alphaOffset=h||0},b.applyFilter=function(a,b,c,d,e,f,g,h){f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}for(var k=i.data,l=k.length,m=0;l>m;m+=4)k[m]=k[m]*this.redMultiplier+this.redOffset,k[m+1]=k[m+1]*this.greenMultiplier+this.greenOffset,k[m+2]=k[m+2]*this.blueMultiplier+this.blueOffset,k[m+3]=k[m+3]*this.alphaMultiplier+this.alphaOffset;return f.putImageData(i,g,h),!0},b.toString=function(){return"[ColorFilter]"},b.clone=function(){return new a(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset)},createjs.ColorFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d){this.initialize(a,b,c,d)},b=a.prototype=[];a.DELTA_INDEX=[0,.01,.02,.04,.05,.06,.07,.08,.1,.11,.12,.14,.15,.16,.17,.18,.2,.21,.22,.24,.25,.27,.28,.3,.32,.34,.36,.38,.4,.42,.44,.46,.48,.5,.53,.56,.59,.62,.65,.68,.71,.74,.77,.8,.83,.86,.89,.92,.95,.98,1,1.06,1.12,1.18,1.24,1.3,1.36,1.42,1.48,1.54,1.6,1.66,1.72,1.78,1.84,1.9,1.96,2,2.12,2.25,2.37,2.5,2.62,2.75,2.87,3,3.2,3.4,3.6,3.8,4,4.3,4.7,4.9,5,5.5,6,6.5,6.8,7,7.3,7.5,7.8,8,8.4,8.7,9,9.4,9.6,9.8,10],a.IDENTITY_MATRIX=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1],a.LENGTH=a.IDENTITY_MATRIX.length,b.initialize=function(a,b,c,d){return this.reset(),this.adjustColor(a,b,c,d),this},b.reset=function(){return this.copyMatrix(a.IDENTITY_MATRIX)},b.adjustColor=function(a,b,c,d){return this.adjustHue(d),this.adjustContrast(b),this.adjustBrightness(a),this.adjustSaturation(c)},b.adjustBrightness=function(a){return 0==a||isNaN(a)?this:(a=this._cleanValue(a,255),this._multiplyMatrix([1,0,0,0,a,0,1,0,0,a,0,0,1,0,a,0,0,0,1,0,0,0,0,0,1]),this)},b.adjustContrast=function(b){if(0==b||isNaN(b))return this;b=this._cleanValue(b,100);var c;return 0>b?c=127+127*(b/100):(c=b%1,c=0==c?a.DELTA_INDEX[b]:a.DELTA_INDEX[b<<0]*(1-c)+a.DELTA_INDEX[(b<<0)+1]*c,c=127*c+127),this._multiplyMatrix([c/127,0,0,0,.5*(127-c),0,c/127,0,0,.5*(127-c),0,0,c/127,0,.5*(127-c),0,0,0,1,0,0,0,0,0,1]),this},b.adjustSaturation=function(a){if(0==a||isNaN(a))return this;a=this._cleanValue(a,100);var b=1+(a>0?3*a/100:a/100),c=.3086,d=.6094,e=.082;return this._multiplyMatrix([c*(1-b)+b,d*(1-b),e*(1-b),0,0,c*(1-b),d*(1-b)+b,e*(1-b),0,0,c*(1-b),d*(1-b),e*(1-b)+b,0,0,0,0,0,1,0,0,0,0,0,1]),this},b.adjustHue=function(a){if(0==a||isNaN(a))return this;a=this._cleanValue(a,180)/180*Math.PI;var b=Math.cos(a),c=Math.sin(a),d=.213,e=.715,f=.072;return this._multiplyMatrix([d+b*(1-d)+c*-d,e+b*-e+c*-e,f+b*-f+c*(1-f),0,0,d+b*-d+.143*c,e+b*(1-e)+.14*c,f+b*-f+c*-.283,0,0,d+b*-d+c*-(1-d),e+b*-e+c*e,f+b*(1-f)+c*f,0,0,0,0,0,1,0,0,0,0,0,1]),this},b.concat=function(b){return b=this._fixMatrix(b),b.length!=a.LENGTH?this:(this._multiplyMatrix(b),this)},b.clone=function(){return new a(this)},b.toArray=function(){return this.slice(0,a.LENGTH)},b.copyMatrix=function(b){for(var c=a.LENGTH,d=0;c>d;d++)this[d]=b[d];return this},b._multiplyMatrix=function(a){for(var b=[],c=0;5>c;c++){for(var d=0;5>d;d++)b[d]=this[d+5*c];for(var d=0;5>d;d++){for(var e=0,f=0;5>f;f++)e+=a[d+5*f]*b[f];this[d+5*c]=e}}},b._cleanValue=function(a,b){return Math.min(b,Math.max(-b,a))},b._fixMatrix=function(b){return b instanceof a&&(b=b.slice(0)),b.length<a.LENGTH?b=b.slice(0,b.length).concat(a.IDENTITY_MATRIX.slice(b.length,a.LENGTH)):b.length>a.LENGTH&&(b=b.slice(0,a.LENGTH)),b},createjs.ColorMatrix=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Filter;b.matrix=null,b.initialize=function(a){this.matrix=a},b.applyFilter=function(a,b,c,d,e,f,g,h){f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}for(var k,l,m,n,o=i.data,p=o.length,q=this.matrix,r=q[0],s=q[1],t=q[2],u=q[3],v=q[4],w=q[5],x=q[6],y=q[7],z=q[8],A=q[9],B=q[10],C=q[11],D=q[12],E=q[13],F=q[14],G=q[15],H=q[16],I=q[17],J=q[18],K=q[19],L=0;p>L;L+=4)k=o[L],l=o[L+1],m=o[L+2],n=o[L+3],o[L]=k*r+l*s+m*t+n*u+v,o[L+1]=k*w+l*x+m*y+n*z+A,o[L+2]=k*B+l*C+m*D+n*E+F,o[L+3]=k*G+l*H+m*I+n*J+K;return f.putImageData(i,g,h),!0},b.toString=function(){return"[ColorMatrixFilter]"},b.clone=function(){return new a(this.matrix)},createjs.ColorMatrixFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"Touch cannot be instantiated"};a.isSupported=function(){return"ontouchstart"in window||window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>0},a.enable=function(b,c,d){return b&&b.canvas&&a.isSupported()?(b.__touch={pointers:{},multitouch:!c,preventDefault:!d,count:0},"ontouchstart"in window?a._IOS_enable(b):window.navigator.msPointerEnabled&&a._IE_enable(b),!0):!1},a.disable=function(b){b&&("ontouchstart"in window?a._IOS_disable(b):window.navigator.msPointerEnabled&&a._IE_disable(b))},a._IOS_enable=function(b){var c=b.canvas,d=b.__touch.f=function(c){a._IOS_handleEvent(b,c)};c.addEventListener("touchstart",d,!1),c.addEventListener("touchmove",d,!1),c.addEventListener("touchend",d,!1),c.addEventListener("touchcancel",d,!1)},a._IOS_disable=function(a){var b=a.canvas;if(b){var c=a.__touch.f;b.removeEventListener("touchstart",c,!1),b.removeEventListener("touchmove",c,!1),b.removeEventListener("touchend",c,!1),b.removeEventListener("touchcancel",c,!1)}},a._IOS_handleEvent=function(a,b){if(a){a.__touch.preventDefault&&b.preventDefault&&b.preventDefault();for(var c=b.changedTouches,d=b.type,e=0,f=c.length;f>e;e++){var g=c[e],h=g.identifier;g.target==a.canvas&&("touchstart"==d?this._handleStart(a,h,b,g.pageX,g.pageY):"touchmove"==d?this._handleMove(a,h,b,g.pageX,g.pageY):("touchend"==d||"touchcancel"==d)&&this._handleEnd(a,h,b))}}},a._IE_enable=function(b){var c=b.canvas,d=b.__touch.f=function(c){a._IE_handleEvent(b,c)};c.addEventListener("MSPointerDown",d,!1),window.addEventListener("MSPointerMove",d,!1),window.addEventListener("MSPointerUp",d,!1),window.addEventListener("MSPointerCancel",d,!1),b.__touch.preventDefault&&(c.style.msTouchAction="none"),b.__touch.activeIDs={}},a._IE_disable=function(a){var b=a.__touch.f;window.removeEventListener("MSPointerMove",b,!1),window.removeEventListener("MSPointerUp",b,!1),window.removeEventListener("MSPointerCancel",b,!1),a.canvas&&a.canvas.removeEventListener("MSPointerDown",b,!1)},a._IE_handleEvent=function(a,b){if(a){a.__touch.preventDefault&&b.preventDefault&&b.preventDefault();var c=b.type,d=b.pointerId,e=a.__touch.activeIDs;if("MSPointerDown"==c){if(b.srcElement!=a.canvas)return;e[d]=!0,this._handleStart(a,d,b,b.pageX,b.pageY)}else e[d]&&("MSPointerMove"==c?this._handleMove(a,d,b,b.pageX,b.pageY):("MSPointerUp"==c||"MSPointerCancel"==c)&&(delete e[d],this._handleEnd(a,d,b)))}},a._handleStart=function(a,b,c,d,e){var f=a.__touch;if(f.multitouch||!f.count){var g=f.pointers;g[b]||(g[b]=!0,f.count++,a._handlePointerDown(b,c,d,e))}},a._handleMove=function(a,b,c,d,e){a.__touch.pointers[b]&&a._handlePointerMove(b,c,d,e)},a._handleEnd=function(a,b,c){var d=a.__touch,e=d.pointers;e[b]&&(d.count--,a._handlePointerUp(b,c,!0),delete e[b])},createjs.Touch=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=createjs.EaselJS=createjs.EaselJS||{};a.version="0.7.0",a.buildDate="Tue, 01 Oct 2013 16:02:38 GMT"}();
},{}],6:[function(require,module,exports){
(function() {
  var AppModel, Parallax, PennyDreadful,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AppModel = require('./model/AppModel.coffee');

  Parallax = require('./parallax/Parallax.coffee');

  PennyDreadful = (function(_super) {
    __extends(PennyDreadful, _super);

    PennyDreadful.prototype.model = null;

    PennyDreadful.prototype.parallax = null;

    function PennyDreadful() {
      this.initApp = __bind(this.initApp, this);
      this.initData = __bind(this.initData, this);      this.initData();
    }

    PennyDreadful.prototype.initData = function() {
      this.model = new AppModel({
        url: window.DATA_URL || "/data/data.json"
      });
      this.model.on("assetsReady", this.initApp);
      return this.model.fetch();
    };

    PennyDreadful.prototype.initApp = function() {
      console.log("assets ready");
      return this.parallax = new Parallax("pdread-canvas");
    };

    return PennyDreadful;

  })(Backbone.Router);

  module.exports = PennyDreadful;

}).call(this);


},{"./model/AppModel.coffee":7,"./parallax/Parallax.coffee":8}],7:[function(require,module,exports){
(function() {
  var AppModel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AppModel = (function(_super) {
    __extends(AppModel, _super);

    AppModel.prototype.opts = {};

    AppModel.prototype.assets = {};

    AppModel.prototype.preloader = new createjs.LoadQueue(true);

    AppModel.prototype.manifest = [];

    function AppModel(opts) {
      this.searchGlobalAssets = __bind(this.searchGlobalAssets, this);
      this.onPreloadComplete = __bind(this.onPreloadComplete, this);
      this.onPreloadProgress = __bind(this.onPreloadProgress, this);
      this.processData = __bind(this.processData, this);
      this.onAppModelData = __bind(this.onAppModelData, this);
      this.initialize = __bind(this.initialize, this);      AppModel.__super__.constructor.call(this, opts);
    }

    AppModel.prototype.initialize = function(opts) {
      this.opts = opts;
      this.url = opts.url;
      AppModel.__super__.initialize.call(this);
      return this.on('change', this.onAppModelData);
    };

    AppModel.prototype.onAppModelData = function(target) {
      this.off('change', this.onAppModelData);
      this.preloader.addEventListener('progress', this.onPreloadProgress);
      this.preloader.addEventListener('complete', this.onPreloadComplete);
      this.processData();
      return this.trigger('dataReady', this);
    };

    AppModel.prototype.processData = function() {
      this.searchGlobalAssets(this.attributes);
      return this.preloader.loadManifest(this.manifest);
    };

    AppModel.prototype.onPreloadProgress = function(e) {
      return console.log(e.loaded * 100);
    };

    AppModel.prototype.onPreloadComplete = function(e) {
      return this.trigger('assetsReady', this);
    };

    AppModel.prototype.searchGlobalAssets = function(object) {
      var asset, item, _results;

      _results = [];
      for (item in object) {
        if (item === "assets") {
          _results.push((function() {
            var _results1;

            _results1 = [];
            for (asset in object[item]) {
              if (object[item][asset].indexOf("http") === -1) {
                object[item][asset] = this.get("baseUrl") + object[item][asset];
              }
              _results1.push(this.manifest.push(object[item]));
            }
            return _results1;
          }).call(this));
        } else if (typeof object[item] === "object") {
          _results.push(this.searchGlobalAssets(object[item]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return AppModel;

  })(Backbone.Model);

  module.exports = AppModel;

}).call(this);


},{}],8:[function(require,module,exports){
(function() {
  var Parallax,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Parallax = (function(_super) {
    __extends(Parallax, _super);

    function Parallax(canvas) {
      Parallax.__super__.constructor.call(this, canvas);
      this.initialize(canvas);
    }

    Parallax.prototype.initialize = function(canvas) {
      return console.log("yo", canvas);
    };

    return Parallax;

  })(createjs.Stage);

  module.exports = Parallax;

}).call(this);


},{}],9:[function(require,module,exports){
(function() {
  var PennyDreadful;

  window._ = require('underscore');

  window.Backbone = require('backbone');

  Backbone.$ = $;

  require("./include/greensock/TweenLite.min.js");

  require("./include/greensock/TweenMax.min.js");

  require("./include/greensock/easing/EasePack.min.js");

  window.createjs = window.createjs || {};

  require("./include/create/easeljs-0.7.0.min.js");

  require("./include/create/preloadjs-0.4.0.min.js");

  PennyDreadful = require("./com/PennyDreadful.coffee");

  if (typeof Array.isArray !== "function") {
    Array.isArray = function(arr) {
      return Object.prototype.toString.call(arr) === "[object Array]";
    };
  }

  window.urlParam = function(name) {
    var regex, regexS, results;

    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    regexS = "[\\?&]" + name + "=([^&#]*)";
    regex = new RegExp(regexS);
    results = regex.exec(window.location.href);
    if (results == null) {
      return void 0;
    } else {
      return results[1];
    }
  };

  if (window.console === void 0 || window.console === null) {
    window.console = {
      log: function() {},
      warn: function() {},
      fatal: function() {}
    };
  }

  $(document).ready(function() {
    var app;

    return app = new PennyDreadful();
  });

}).call(this);


},{"./include/greensock/TweenLite.min.js":1,"./include/greensock/TweenMax.min.js":2,"./include/greensock/easing/EasePack.min.js":3,"./include/create/preloadjs-0.4.0.min.js":4,"./com/PennyDreadful.coffee":6,"./include/create/easeljs-0.7.0.min.js":5,"underscore":10,"backbone":11}],10:[function(require,module,exports){
(function(){//     Underscore.js 1.4.2
//     http://underscorejs.org
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      unshift          = ArrayProto.unshift,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root['_'] = _;
  }

  // Current version.
  _.VERSION = '1.4.2';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    return results;
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return arguments.length > 2 ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    each(obj, function(value, index, list) {
      if (!iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    var found = false;
    if (obj == null) return found;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    found = any(obj, function(value) {
      return value === target;
    });
    return found;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    return _.map(obj, function(value) {
      return (_.isFunction(method) ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // with specific `key:value` pairs.
  _.where = function(obj, attrs) {
    if (_.isEmpty(attrs)) return [];
    return _.filter(obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (obj.length === +obj.length) return slice.call(obj);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, function(value){ return !!value; });
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Binding with arguments is also known as `curry`.
  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.
  // We check for `func.bind` first, to fail fast when `func` is undefined.
  _.bind = function bind(func, context) {
    var bound, args;
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length == 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, throttling, more, result;
    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);
    return function() {
      context = this; args = arguments;
      var later = function() {
        timeout = null;
        if (more) {
          result = func.apply(context, args);
        }
        whenDone();
      };
      if (!timeout) timeout = setTimeout(later, wait);
      if (throttling) {
        more = true;
      } else {
        throttling = true;
        result = func.apply(context, args);
      }
      whenDone();
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        if (obj[prop] == null) obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent, but `Object`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return _.isNumber(obj) && isFinite(obj);
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    for (var i = 0; i < n; i++) iterator.call(context, i);
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + (0 | Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = idCounter++;
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });
      source +=
        escape ? "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'" :
        interpolate ? "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'" :
        evaluate ? "';\n" + evaluate + "\n__p+='" : '';
      index = offset + match.length;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);

})()
},{}],11:[function(require,module,exports){
(function(){//     Backbone.js 1.0.0

//     (c) 2010-2013 Jeremy Ashkenas, DocumentCloud Inc.
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(){

  // Initial Setup
  // -------------

  // Save a reference to the global object (`window` in the browser, `exports`
  // on the server).
  var root = this;

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // The top-level namespace. All public Backbone classes and modules will
  // be attached to this. Exported for both the browser and the server.
  var Backbone;
  if (typeof exports !== 'undefined') {
    Backbone = exports;
  } else {
    Backbone = root.Backbone = {};
  }

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.0.0';

  // Require Underscore, if we're on the server, and it's not already present.
  var _ = root._;
  if (!_ && (typeof require !== 'undefined')) _ = require('underscore');

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = root.jQuery || root.Zepto || root.ender || root.$;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = {};
        return this;
      }

      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeners = this._listeners;
      if (!listeners) return this;
      var deleteListener = !name && !callback;
      if (typeof name === 'object') callback = this;
      if (obj) (listeners = {})[obj._listenerId] = obj;
      for (var id in listeners) {
        listeners[id].off(name, callback, this);
        if (deleteListener) delete this._listeners[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeners = this._listeners || (this._listeners = {});
      var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));
      listeners[id] = obj;
      if (typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var defaults;
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    _.extend(this, _.pick(options, modelOptions));
    if (options.parse) attrs = this.parse(attrs, options) || {};
    if (defaults = _.result(this, 'defaults')) {
      attrs = _.defaults({}, attrs, defaults);
    }
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // A list of options to be attached directly to the model, if provided.
  var modelOptions = ['url', 'urlRoot', 'collection'];

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = true;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      // If we're not waiting and attributes exist, save acts as `set(attr).save(null, opts)`.
      if (attrs && (!options || !options.wait) && !this.set(attrs, options)) return false;

      options = _.extend({validate: true}, options);

      // Do not persist invalid models.
      if (!this._validate(attrs, options)) return false;

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();
      if (this.isNew()) return base;
      return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return this.id == null;
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options || {}, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.url) this.url = options.url;
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, merge: false, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.defaults(options || {}, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      models = _.isArray(models) ? models.slice() : [models];
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model);
      }
      return this;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults(options || {}, setOptions);
      if (options.parse) models = this.parse(models, options);
      if (!_.isArray(models)) models = models ? [models] : [];
      var i, l, model, attrs, existing, sort;
      var at = options.at;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        if (!(model = this._prepareModel(models[i], options))) continue;

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(model)) {
          if (options.remove) modelMap[existing.cid] = true;
          if (options.merge) {
            existing.set(model.attributes, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }

        // This is a new model, push it to the `toAdd` list.
        } else if (options.add) {
          toAdd.push(model);

          // Listen to added models' events, and index models for lookup by
          // `id` and by `cid`.
          model.on('all', this._onModelEvent, this);
          this._byId[model.cid] = model;
          if (model.id != null) this._byId[model.id] = model;
        }
      }

      // Remove nonexistent models if appropriate.
      if (options.remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          splice.apply(this.models, [at, 0].concat(toAdd));
        } else {
          push.apply(this.models, toAdd);
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      if (options.silent) return this;

      // Trigger `add` events.
      for (i = 0, l = toAdd.length; i < l; i++) {
        (model = toAdd[i]).trigger('add', model, this, options);
      }

      // Trigger `sort` if the collection was sorted.
      if (sort) this.trigger('sort', this, options);
      return this;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i]);
      }
      options.previousModels = this.models;
      this._reset();
      this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return this;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      model = this._prepareModel(model, options);
      this.add(model, _.extend({at: this.length}, options));
      return model;
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      model = this._prepareModel(model, options);
      this.add(model, _.extend({at: 0}, options));
      return model;
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function(begin, end) {
      return this.models.slice(begin, end);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj.id != null ? obj.id : obj.cid || obj];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Figure out the smallest index at which a model should be inserted so as
    // to maintain order.
    sortedIndex: function(model, value, context) {
      value || (value = this.comparator);
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _.sortedIndex(this.models, model, iterator, context);
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options || (options = {});
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model._validate(attrs, options)) {
        this.trigger('invalid', this, attrs, options);
        return false;
      }
      return model;
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf',
    'isEmpty', 'chain'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    this._configure(options || {});
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be prefered to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save'
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Performs the initial configuration of a View with a set of options.
    // Keys with special meaning *(e.g. model, collection, id, className)* are
    // attached directly to the view.  See `viewOptions` for an exhaustive
    // list.
    _configure: function(options) {
      if (this.options) options = _.extend({}, _.result(this, 'options'), options);
      _.extend(this, _.pick(options, viewOptions));
      this.options = options;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && window.ActiveXObject &&
          !(window.external && window.external.msActiveXFilteringEnabled)) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        callback && callback.apply(router, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional){
                     return optional ? match : '([^\/]+)';
                   })
                   .replace(splatParam, '(.*?)');
      return new RegExp('^' + route + '$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param) {
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = this.location.pathname;
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.substr(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({}, {root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        this.iframe = Backbone.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;
      var atRoot = loc.pathname.replace(/[^\/]$/, '$&/') === this.root;

      // If we've started off with a route from a `pushState`-enabled browser,
      // but we're currently in a browser that doesn't support it...
      if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {
        this.fragment = this.getFragment(null, true);
        this.location.replace(this.root + this.location.search + '#' + this.fragment);
        // Return immediately as browser will do redirect to new url
        return true;

      // Or if we've started out with a hash-based route, but we're currently
      // in a browser where it could be `pushState`-based instead...
      } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {
        this.fragment = this.getHash().replace(routeStripper, '');
        this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);
      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl() || this.loadUrl(this.getHash());
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragmentOverride) {
      var fragment = this.fragment = this.getFragment(fragmentOverride);
      var matched = _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
      return matched;
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: options};
      fragment = this.getFragment(fragment || '');
      if (this.fragment === fragment) return;
      this.fragment = fragment;
      var url = this.root + fragment;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function (model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

}).call(this);

})()
},{"underscore":12}],12:[function(require,module,exports){
(function(){//     Underscore.js 1.4.4
//     http://underscorejs.org
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.4.4';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs, first) {
    if (_.isEmpty(attrs)) return first ? null : [];
    return _[first ? 'find' : 'filter'](obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.where(obj, attrs, true);
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value || _.identity);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    var args = slice.call(arguments, 2);
    return function() {
      return func.apply(context, args.concat(slice.call(arguments)));
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context.
  _.partial = function(func) {
    var args = slice.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, result;
    var previous = 0;
    var later = function() {
      previous = new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] == null) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent, but `Object`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(n);
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);

})()
},{}]},{},[9])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyJjOlxcVXNlcnNcXHBhdmVsLnphZ29za2luXFxQcm9qZWN0c1xcUGVubnlEcmVhZGZ1bFxcZGV2XFxzb3VyY2VcXGFwcHNcXHBkcGFyYWxsYXhcXGluY2x1ZGVcXGdyZWVuc29ja1xcVHdlZW5MaXRlLm1pbi5qcyIsImM6XFxVc2Vyc1xccGF2ZWwuemFnb3NraW5cXFByb2plY3RzXFxQZW5ueURyZWFkZnVsXFxkZXZcXHNvdXJjZVxcYXBwc1xccGRwYXJhbGxheFxcaW5jbHVkZVxcZ3JlZW5zb2NrXFxUd2Vlbk1heC5taW4uanMiLCJjOlxcVXNlcnNcXHBhdmVsLnphZ29za2luXFxQcm9qZWN0c1xcUGVubnlEcmVhZGZ1bFxcZGV2XFxzb3VyY2VcXGFwcHNcXHBkcGFyYWxsYXhcXGluY2x1ZGVcXGdyZWVuc29ja1xcZWFzaW5nXFxFYXNlUGFjay5taW4uanMiLCJjOlxcVXNlcnNcXHBhdmVsLnphZ29za2luXFxQcm9qZWN0c1xcUGVubnlEcmVhZGZ1bFxcZGV2XFxzb3VyY2VcXGFwcHNcXHBkcGFyYWxsYXhcXGluY2x1ZGVcXGNyZWF0ZVxccHJlbG9hZGpzLTAuNC4wLm1pbi5qcyIsImM6XFxVc2Vyc1xccGF2ZWwuemFnb3NraW5cXFByb2plY3RzXFxQZW5ueURyZWFkZnVsXFxkZXZcXHNvdXJjZVxcYXBwc1xccGRwYXJhbGxheFxcaW5jbHVkZVxcY3JlYXRlXFxlYXNlbGpzLTAuNy4wLm1pbi5qcyIsImM6XFxVc2Vyc1xccGF2ZWwuemFnb3NraW5cXFByb2plY3RzXFxQZW5ueURyZWFkZnVsXFxkZXZcXHNvdXJjZVxcYXBwc1xccGRwYXJhbGxheFxcY29tXFxQZW5ueURyZWFkZnVsLmNvZmZlZSIsImM6XFxVc2Vyc1xccGF2ZWwuemFnb3NraW5cXFByb2plY3RzXFxQZW5ueURyZWFkZnVsXFxkZXZcXHNvdXJjZVxcYXBwc1xccGRwYXJhbGxheFxcY29tXFxtb2RlbFxcQXBwTW9kZWwuY29mZmVlIiwiYzpcXFVzZXJzXFxwYXZlbC56YWdvc2tpblxcUHJvamVjdHNcXFBlbm55RHJlYWRmdWxcXGRldlxcc291cmNlXFxhcHBzXFxwZHBhcmFsbGF4XFxjb21cXHBhcmFsbGF4XFxQYXJhbGxheC5jb2ZmZWUiLCJjOlxcVXNlcnNcXHBhdmVsLnphZ29za2luXFxQcm9qZWN0c1xcUGVubnlEcmVhZGZ1bFxcZGV2XFxzb3VyY2VcXGFwcHNcXHBkcGFyYWxsYXhcXG1haW4uY29mZmVlIiwiYzpcXFVzZXJzXFxwYXZlbC56YWdvc2tpblxcUHJvamVjdHNcXFBlbm55RHJlYWRmdWxcXGRldlxcbm9kZV9tb2R1bGVzXFx1bmRlcnNjb3JlXFx1bmRlcnNjb3JlLmpzIiwiYzpcXFVzZXJzXFxwYXZlbC56YWdvc2tpblxcUHJvamVjdHNcXFBlbm55RHJlYWRmdWxcXGRldlxcbm9kZV9tb2R1bGVzXFxiYWNrYm9uZVxcYmFja2JvbmUuanMiLCJjOlxcVXNlcnNcXHBhdmVsLnphZ29za2luXFxQcm9qZWN0c1xcUGVubnlEcmVhZGZ1bFxcZGV2XFxub2RlX21vZHVsZXNcXGJhY2tib25lXFxub2RlX21vZHVsZXNcXHVuZGVyc2NvcmVcXHVuZGVyc2NvcmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNiQTtDQUFBLEtBQUEsMkJBQUE7S0FBQTs7b1NBQUE7O0NBQUEsQ0FBQSxDQUFXLElBQUEsQ0FBWCxpQkFBVzs7Q0FBWCxDQUNBLENBQVcsSUFBQSxDQUFYLG9CQUFXOztDQURYLENBRU07Q0FFRjs7Q0FBQSxFQUFRLENBQVIsQ0FBQTs7Q0FBQSxFQUNXLENBRFgsSUFDQTs7Q0FFYSxFQUFBLENBQUEsbUJBQUE7Q0FDVCx3Q0FBQTtDQUFBLEdBQUMsRUFBRCxFQUFBLG1DQUFBO0NBSkosSUFHYTs7Q0FIYixFQVFVLEtBQVYsQ0FBVTtDQUdOLEVBQWEsQ0FBWixDQUFELENBQUEsRUFBYTtDQUNULENBQUssQ0FBTCxDQUF3QixFQUFiLEVBQVgsU0FBQTtDQURKLE9BQWE7Q0FBYixDQUVBLEVBQUMsQ0FBSyxDQUFOLENBQUEsTUFBQTtDQUNDLEdBQUEsQ0FBSyxRQUFOO0NBZEosSUFRVTs7Q0FSVixFQWdCUyxJQUFULEVBQVM7Q0FDTCxFQUFBLEdBQUEsQ0FBTyxPQUFQO0NBQ0MsRUFBZSxDQUFmLElBQUQsS0FBQSxFQUFnQjtDQWxCcEIsSUFnQlM7O0NBaEJUOztDQUZ3QixPQUFROztDQUZwQyxDQXlCQSxDQUFpQixHQUFYLENBQU4sTUF6QkE7Q0FBQTs7Ozs7QUNJQTtDQUFBLEtBQUEsRUFBQTtLQUFBOztvU0FBQTs7Q0FBQSxDQUFNO0NBS0Y7O0NBQUEsQ0FBQSxDQUFPLENBQVA7O0NBQUEsQ0FBQSxDQUNRLEdBQVI7O0NBREEsRUFHZ0IsQ0FBQSxJQUFRLENBQXhCOztDQUhBLENBQUEsQ0FJVyxLQUFYOztDQUVhLEVBQUEsQ0FBQSxjQUFDO0NBQ1YsOERBQUE7Q0FBQSw0REFBQTtDQUFBLDREQUFBO0NBQUEsZ0RBQUE7Q0FBQSxzREFBQTtDQUFBLEdBQUEsRUFBQSxvQ0FBTSxLQUFOO0NBUEosSUFNYTs7Q0FOYixFQVdZLENBQUEsS0FBQyxDQUFiO0NBQ0ksRUFBUSxDQUFQLEVBQUQ7Q0FBQSxFQUNBLENBQUMsRUFBRDtDQURBLEtBRUEsaUNBQUE7Q0FDQyxDQUFELEVBQUMsSUFBRCxLQUFBLENBQUE7Q0FmSixJQVdZOztDQVhaLEVBa0JnQixHQUFBLEdBQUMsS0FBakI7Q0FDSSxDQUFnQixDQUFoQixDQUFDLEVBQUQsRUFBQSxNQUFBO0NBQUEsQ0FDeUMsRUFBeEMsRUFBRCxHQUFVLENBQVYsTUFBQSxDQUFBO0NBREEsQ0FFeUMsRUFBeEMsRUFBRCxHQUFVLENBQVYsTUFBQSxDQUFBO0NBRkEsR0FHQyxFQUFELEtBQUE7Q0FDQyxDQUFzQixFQUF0QixHQUFELElBQUEsRUFBQTtDQXZCSixJQWtCZ0I7O0NBbEJoQixFQTJCYSxNQUFBLEVBQWI7Q0FDSSxHQUFDLEVBQUQsSUFBQSxRQUFBO0NBQ0MsR0FBQSxJQUFELENBQVUsR0FBVixDQUFBO0NBN0JKLElBMkJhOztDQTNCYixFQWlDbUIsTUFBQyxRQUFwQjtDQUNZLEVBQVIsR0FBYSxDQUFOLE1BQVA7Q0FsQ0osSUFpQ21COztDQWpDbkIsRUFtQ21CLE1BQUMsUUFBcEI7Q0FDSyxDQUF3QixFQUF4QixHQUFELE1BQUE7Q0FwQ0osSUFtQ21COztDQW5DbkIsRUF1Q29CLEdBQUEsR0FBQyxTQUFyQjtDQUNJLFNBQUEsV0FBQTs7QUFBQSxDQUFBO0dBQUEsU0FBQSxFQUFBO0NBQ0ksR0FBRyxDQUFRLEdBQVg7Ozs7QUFDSSxDQUFBO0dBQUEsZUFBQSxHQUFBO0FBRytDLENBQTNDLEdBQUcsQ0FBYSxDQUFOLENBQVAsT0FBSDtDQUNJLEVBQXNCLENBQWYsQ0FBTSxDQUFOLEdBQWUsT0FBdEI7Z0JBREo7Q0FBQSxHQUdDLEVBQXFCLEVBQWI7Q0FOYjs7Q0FESjtBQVNRLENBQUEsR0FBQSxDQUF1QixDQVQvQixFQUFBLEVBQUE7Q0FVSSxHQUFDLEVBQTBCLFlBQTNCO01BVkosSUFBQTtDQUFBO1VBREo7Q0FBQTt1QkFEZ0I7Q0F2Q3BCLElBdUNvQjs7Q0F2Q3BCOztDQUxtQixPQUFROztDQUEvQixDQStEQSxDQUFpQixHQUFYLENBQU4sQ0EvREE7Q0FBQTs7Ozs7QUNGQTtDQUFBLEtBQUEsRUFBQTtLQUFBO29TQUFBOztDQUFBLENBQU07Q0FFRjs7Q0FBYSxFQUFBLENBQUEsRUFBQSxZQUFDO0NBQ1YsS0FBQSxvQ0FBTTtDQUFOLEdBQ0MsRUFBRCxJQUFBO0NBRkosSUFBYTs7Q0FBYixFQUlZLEdBQUEsR0FBQyxDQUFiO0NBQ1ksQ0FBVyxDQUFuQixDQUFBLEVBQUEsQ0FBTyxNQUFQO0NBTEosSUFJWTs7Q0FKWjs7Q0FGbUIsT0FBUTs7Q0FBL0IsQ0FTQSxDQUFpQixHQUFYLENBQU4sQ0FUQTtDQUFBOzs7OztBQ0RBO0NBQUEsS0FBQSxPQUFBOztDQUFBLENBQUEsQ0FBVyxHQUFMLENBQUssS0FBQTs7Q0FBWCxDQUNBLENBQWtCLEdBQVosQ0FBWSxDQUFsQixFQUFrQjs7Q0FEbEIsQ0FFQSxDQUFhLEtBQUw7O0NBRlIsQ0FLQSxLQUFBLCtCQUFBOztDQUxBLENBTUEsS0FBQSw4QkFBQTs7Q0FOQSxDQU9BLEtBQUEscUNBQUE7O0NBUEEsQ0FVQSxDQUFrQixDQUFtQixFQUEvQixFQUFOOztDQVZBLENBYUEsS0FBQSxnQ0FBQTs7Q0FiQSxDQWVBLEtBQUEsa0NBQUE7O0NBZkEsQ0FvQkEsQ0FBZ0IsSUFBQSxNQUFoQixlQUFnQjs7QUFNYixDQUFILENBQUEsRUFBRyxDQUFZLENBQVosQ0FBQSxHQUFIO0NBQ0UsRUFBZ0IsQ0FBaEIsQ0FBSyxFQUFMLEVBQWlCO0NBQ1QsRUFBTixDQUFBLENBQThCLENBQXhCLEVBQVUsQ0FBUixJQUFSO0NBREYsSUFBZ0I7SUEzQmxCOztDQUFBLENBK0JBLENBQWtCLENBQUEsRUFBWixFQUFOLENBQW1CO0NBQ2YsT0FBQSxjQUFBOztDQUFBLENBQTRCLENBQXJCLENBQVAsQ0FBTyxDQUFBLENBQUE7Q0FBUCxFQUNTLENBQVQsRUFBQSxFQUFTLEdBRFQ7Q0FBQSxFQUVZLENBQVosQ0FBQSxDQUFZO0NBRlosRUFHVSxDQUFWLENBQWUsQ0FBWSxDQUEzQixDQUFvQztDQUNwQyxHQUFBLFdBQUE7Q0FBQSxZQUNDO01BREQ7Q0FHUyxNQUFBLE1BQVI7TUFSYTtDQS9CbEIsRUErQmtCOztDQVdsQixDQUFBLEVBQUcsQ0FBa0IsQ0FBWixDQUFOO0NBQ0MsRUFDSSxDQURKLEVBQU0sQ0FBTjtDQUNJLENBQUssQ0FBTCxHQUFBLEdBQUs7Q0FBTCxDQUNNLENBQUEsQ0FBTixFQUFBLEdBQU07Q0FETixDQUVPLENBQUEsRUFBUCxDQUFBLEdBQU87Q0FKZixLQUNJO0lBM0NKOztDQUFBLENBbURBLENBQWtCLEVBQWxCLEdBQUEsQ0FBa0I7Q0FDZCxFQUFBLEtBQUE7O0NBQVUsRUFBVixDQUFVLE9BQVYsRUFBVTtDQURkLEVBQWtCO0NBbkRsQjs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDanJDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwaURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBWRVJTSU9OOiBiZXRhIDEuOC4xXG4gKiBEQVRFOiAyMDEzLTAxLTI5XG4gKiBKYXZhU2NyaXB0IChBY3Rpb25TY3JpcHQgMyBhbmQgMiBhbHNvIGF2YWlsYWJsZSlcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly93d3cuZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDEzLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgaW4gaHR0cDovL3d3dy5ncmVlbnNvY2suY29tL3Rlcm1zX29mX3VzZS5odG1sIG9yIGZvciBcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBzb2Z0d2FyZSBhZ3JlZW1lbnQgdGhhdCB3YXMgaXNzdWVkIHdpdGggeW91ciBtZW1iZXJzaGlwLlxuICogXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqL1xuKGZ1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO3ZhciBlLGYsZyxoLGI9YS5HcmVlblNvY2tHbG9iYWxzfHxhLGM9ZnVuY3Rpb24oYSl7dmFyIGUsYz1hLnNwbGl0KFwiLlwiKSxkPWI7Zm9yKGU9MDtjLmxlbmd0aD5lO2UrKylkW2NbZV1dPWQ9ZFtjW2VdXXx8e307cmV0dXJuIGR9LGQ9YyhcImNvbS5ncmVlbnNvY2tcIiksaT17fSxqPWZ1bmN0aW9uKGQsZSxmLGcpe3RoaXMuc2M9aVtkXT9pW2RdLnNjOltdLGlbZF09dGhpcyx0aGlzLmdzQ2xhc3M9bnVsbCx0aGlzLmZ1bmM9Zjt2YXIgaD1bXTt0aGlzLmNoZWNrPWZ1bmN0aW9uKGspe2Zvcih2YXIgbixvLHAscSxsPWUubGVuZ3RoLG09bDstLWw+LTE7KShuPWlbZVtsXV18fG5ldyBqKGVbbF0sW10pKS5nc0NsYXNzPyhoW2xdPW4uZ3NDbGFzcyxtLS0pOmsmJm4uc2MucHVzaCh0aGlzKTtpZigwPT09bSYmZilmb3Iobz0oXCJjb20uZ3JlZW5zb2NrLlwiK2QpLnNwbGl0KFwiLlwiKSxwPW8ucG9wKCkscT1jKG8uam9pbihcIi5cIikpW3BdPXRoaXMuZ3NDbGFzcz1mLmFwcGx5KGYsaCksZyYmKGJbcF09cSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKChhLkdyZWVuU29ja0FNRFBhdGg/YS5HcmVlblNvY2tBTURQYXRoK1wiL1wiOlwiXCIpK2Quc3BsaXQoXCIuXCIpLmpvaW4oXCIvXCIpLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIHF9KTpcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cyYmKG1vZHVsZS5leHBvcnRzPXEpKSxsPTA7dGhpcy5zYy5sZW5ndGg+bDtsKyspdGhpcy5zY1tsXS5jaGVjaygpfSx0aGlzLmNoZWNrKCEwKX0saz1hLl9nc0RlZmluZT1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gbmV3IGooYSxiLGMsZCl9LGw9ZC5fY2xhc3M9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiPWJ8fGZ1bmN0aW9uKCl7fSxrKGEsW10sZnVuY3Rpb24oKXtyZXR1cm4gYn0sYyksYn0sbT1bMCwwLDEsMV0sbj1bXSxvPWwoXCJlYXNpbmcuRWFzZVwiLGZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX2Z1bmM9YSx0aGlzLl90eXBlPWN8fDAsdGhpcy5fcG93ZXI9ZHx8MCx0aGlzLl9wYXJhbXM9Yj9tLmNvbmNhdChiKTptfSwhMCkscD1vLm1hcD17fSxxPW8ucmVnaXN0ZXI9ZnVuY3Rpb24oYSxiLGMsZSl7Zm9yKHZhciBpLGosayxtLGY9Yi5zcGxpdChcIixcIiksZz1mLmxlbmd0aCxoPShjfHxcImVhc2VJbixlYXNlT3V0LGVhc2VJbk91dFwiKS5zcGxpdChcIixcIik7LS1nPi0xOylmb3Ioaj1mW2ddLGk9ZT9sKFwiZWFzaW5nLlwiK2osbnVsbCwhMCk6ZC5lYXNpbmdbal18fHt9LGs9aC5sZW5ndGg7LS1rPi0xOyltPWhba10scFtqK1wiLlwiK21dPXBbbStqXT1pW21dPWEuZ2V0UmF0aW8/YTphW21dfHxuZXcgYX07Zm9yKGc9by5wcm90b3R5cGUsZy5fY2FsY0VuZD0hMSxnLmdldFJhdGlvPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2Z1bmMpcmV0dXJuIHRoaXMuX3BhcmFtc1swXT1hLHRoaXMuX2Z1bmMuYXBwbHkobnVsbCx0aGlzLl9wYXJhbXMpO3ZhciBiPXRoaXMuX3R5cGUsYz10aGlzLl9wb3dlcixkPTE9PT1iPzEtYToyPT09Yj9hOi41PmE/MiphOjIqKDEtYSk7cmV0dXJuIDE9PT1jP2QqPWQ6Mj09PWM/ZCo9ZCpkOjM9PT1jP2QqPWQqZCpkOjQ9PT1jJiYoZCo9ZCpkKmQqZCksMT09PWI/MS1kOjI9PT1iP2Q6LjU+YT9kLzI6MS1kLzJ9LGU9W1wiTGluZWFyXCIsXCJRdWFkXCIsXCJDdWJpY1wiLFwiUXVhcnRcIixcIlF1aW50LFN0cm9uZ1wiXSxmPWUubGVuZ3RoOy0tZj4tMTspZz1lW2ZdK1wiLFBvd2VyXCIrZixxKG5ldyBvKG51bGwsbnVsbCwxLGYpLGcsXCJlYXNlT3V0XCIsITApLHEobmV3IG8obnVsbCxudWxsLDIsZiksZyxcImVhc2VJblwiKygwPT09Zj9cIixlYXNlTm9uZVwiOlwiXCIpKSxxKG5ldyBvKG51bGwsbnVsbCwzLGYpLGcsXCJlYXNlSW5PdXRcIik7cC5saW5lYXI9ZC5lYXNpbmcuTGluZWFyLmVhc2VJbixwLnN3aW5nPWQuZWFzaW5nLlF1YWQuZWFzZUluT3V0O3ZhciByPWwoXCJldmVudHMuRXZlbnREaXNwYXRjaGVyXCIsZnVuY3Rpb24oYSl7dGhpcy5fbGlzdGVuZXJzPXt9LHRoaXMuX2V2ZW50VGFyZ2V0PWF8fHRoaXN9KTtnPXIucHJvdG90eXBlLGcuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyxkLGUpe2U9ZXx8MDt2YXIgaCxpLGY9dGhpcy5fbGlzdGVuZXJzW2FdLGc9MDtmb3IobnVsbD09ZiYmKHRoaXMuX2xpc3RlbmVyc1thXT1mPVtdKSxpPWYubGVuZ3RoOy0taT4tMTspaD1mW2ldLGguYz09PWI/Zi5zcGxpY2UoaSwxKTowPT09ZyYmZT5oLnByJiYoZz1pKzEpO2Yuc3BsaWNlKGcsMCx7YzpiLHM6Yyx1cDpkLHByOmV9KX0sZy5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYil7dmFyIGQsYz10aGlzLl9saXN0ZW5lcnNbYV07aWYoYylmb3IoZD1jLmxlbmd0aDstLWQ+LTE7KWlmKGNbZF0uYz09PWIpcmV0dXJuIGMuc3BsaWNlKGQsMSksdm9pZCAwfSxnLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fbGlzdGVuZXJzW2FdO2lmKGIpZm9yKHZhciBlLGM9Yi5sZW5ndGgsZD10aGlzLl9ldmVudFRhcmdldDstLWM+LTE7KWU9YltjXSxlLnVwP2UuYy5jYWxsKGUuc3x8ZCx7dHlwZTphLHRhcmdldDpkfSk6ZS5jLmNhbGwoZS5zfHxkKX07dmFyIHM9YS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsdD1hLmNhbmNlbEFuaW1hdGlvbkZyYW1lLHU9RGF0ZS5ub3d8fGZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9O2ZvcihlPVtcIm1zXCIsXCJtb3pcIixcIndlYmtpdFwiLFwib1wiXSxmPWUubGVuZ3RoOy0tZj4tMSYmIXM7KXM9YVtlW2ZdK1wiUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdLHQ9YVtlW2ZdK1wiQ2FuY2VsQW5pbWF0aW9uRnJhbWVcIl18fGFbZVtmXStcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTtsKFwiVGlja2VyXCIsZnVuY3Rpb24oYixjKXt2YXIgZyxoLGksaixrLGQ9dGhpcyxlPXUoKSxmPWMhPT0hMSYmcyxsPWZ1bmN0aW9uKCl7bnVsbCE9aSYmKGYmJnQ/dChpKTphLmNsZWFyVGltZW91dChpKSxpPW51bGwpfSxtPWZ1bmN0aW9uKGEpe2QudGltZT0odSgpLWUpLzFlMywoIWd8fGQudGltZT49a3x8YT09PSEwKSYmKGQuZnJhbWUrKyxrPWQudGltZT5rP2QudGltZStqLShkLnRpbWUtayk6ZC50aW1lK2otLjAwMSxkLnRpbWUrLjAwMT5rJiYoaz1kLnRpbWUrLjAwMSksZC5kaXNwYXRjaEV2ZW50KFwidGlja1wiKSksYSE9PSEwJiYoaT1oKG0pKX07ci5jYWxsKGQpLHRoaXMudGltZT10aGlzLmZyYW1lPTAsdGhpcy50aWNrPWZ1bmN0aW9uKCl7bSghMCl9LHRoaXMuZnBzPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhnPWEsaj0xLyhnfHw2MCksaz10aGlzLnRpbWUraixoPTA9PT1nP2Z1bmN0aW9uKCl7fTpmJiZzP3M6ZnVuY3Rpb24oYSl7cmV0dXJuIHNldFRpbWVvdXQoYSwxZTMqKGstZC50aW1lKSsxPj4wfHwxKX0sbCgpLGk9aChtKSx2b2lkIDApOmd9LHRoaXMudXNlUkFGPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhsKCksZj1hLGQuZnBzKGcpLHZvaWQgMCk6Zn0sZC5mcHMoYiksc2V0VGltZW91dChmdW5jdGlvbigpe2YmJiFpJiZkLnVzZVJBRighMSl9LDFlMyl9KSxnPWQuVGlja2VyLnByb3RvdHlwZT1uZXcgZC5ldmVudHMuRXZlbnREaXNwYXRjaGVyLGcuY29uc3RydWN0b3I9ZC5UaWNrZXI7dmFyIHY9bChcImNvcmUuQW5pbWF0aW9uXCIsZnVuY3Rpb24oYSxiKXtpZih0aGlzLnZhcnM9Ynx8e30sdGhpcy5fZHVyYXRpb249dGhpcy5fdG90YWxEdXJhdGlvbj1hfHwwLHRoaXMuX2RlbGF5PU51bWJlcih0aGlzLnZhcnMuZGVsYXkpfHwwLHRoaXMuX3RpbWVTY2FsZT0xLHRoaXMuX2FjdGl2ZT10aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyPT09ITAsdGhpcy5kYXRhPXRoaXMudmFycy5kYXRhLHRoaXMuX3JldmVyc2VkPXRoaXMudmFycy5yZXZlcnNlZD09PSEwLEkpe2h8fCh3LnRpY2soKSxoPSEwKTt2YXIgYz10aGlzLnZhcnMudXNlRnJhbWVzP0g6STtjLmFkZCh0aGlzLGMuX3RpbWUpLHRoaXMudmFycy5wYXVzZWQmJnRoaXMucGF1c2VkKCEwKX19KSx3PXYudGlja2VyPW5ldyBkLlRpY2tlcjtnPXYucHJvdG90eXBlLGcuX2RpcnR5PWcuX2djPWcuX2luaXR0ZWQ9Zy5fcGF1c2VkPSExLGcuX3RvdGFsVGltZT1nLl90aW1lPTAsZy5fcmF3UHJldlRpbWU9LTEsZy5fbmV4dD1nLl9sYXN0PWcuX29uVXBkYXRlPWcuX3RpbWVsaW5lPWcudGltZWxpbmU9bnVsbCxnLl9wYXVzZWQ9ITEsZy5wbGF5PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgmJnRoaXMuc2VlayhhLGIpLHRoaXMucmV2ZXJzZWQoITEpLHRoaXMucGF1c2VkKCExKX0sZy5wYXVzZT1mdW5jdGlvbihhLGIpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoJiZ0aGlzLnNlZWsoYSxiKSx0aGlzLnBhdXNlZCghMCl9LGcucmVzdW1lPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgmJnRoaXMuc2VlayhhLGIpLHRoaXMucGF1c2VkKCExKX0sZy5zZWVrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMudG90YWxUaW1lKE51bWJlcihhKSxiIT09ITEpfSxnLnJlc3RhcnQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5yZXZlcnNlZCghMSksdGhpcy5wYXVzZWQoITEpLHRoaXMudG90YWxUaW1lKGE/LXRoaXMuX2RlbGF5OjAsYiE9PSExKX0sZy5yZXZlcnNlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgmJnRoaXMuc2VlayhhfHx0aGlzLnRvdGFsRHVyYXRpb24oKSxiKSx0aGlzLnJldmVyc2VkKCEwKSx0aGlzLnBhdXNlZCghMSl9LGcucmVuZGVyPWZ1bmN0aW9uKCl7fSxnLmludmFsaWRhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sZy5fZW5hYmxlZD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLl9nYz0hYSx0aGlzLl9hY3RpdmU9YSYmIXRoaXMuX3BhdXNlZCYmdGhpcy5fdG90YWxUaW1lPjAmJnRoaXMuX3RvdGFsVGltZTx0aGlzLl90b3RhbER1cmF0aW9uLGIhPT0hMCYmKGEmJm51bGw9PXRoaXMudGltZWxpbmU/dGhpcy5fdGltZWxpbmUuYWRkKHRoaXMsdGhpcy5fc3RhcnRUaW1lLXRoaXMuX2RlbGF5KTphfHxudWxsPT10aGlzLnRpbWVsaW5lfHx0aGlzLl90aW1lbGluZS5fcmVtb3ZlKHRoaXMsITApKSwhMX0sZy5fa2lsbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbmFibGVkKCExLCExKX0sZy5raWxsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuX2tpbGwoYSxiKSx0aGlzfSxnLl91bmNhY2hlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hP3RoaXM6dGhpcy50aW1lbGluZTtiOyliLl9kaXJ0eT0hMCxiPWIudGltZWxpbmU7cmV0dXJuIHRoaXN9LGcuZXZlbnRDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyxkKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwib25cIj09PWEuc3Vic3RyKDAsMikpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLnZhcnNbYV07aWYobnVsbD09YilkZWxldGUgdGhpcy52YXJzW2FdO2Vsc2UgaWYodGhpcy52YXJzW2FdPWIsdGhpcy52YXJzW2ErXCJQYXJhbXNcIl09Yyx0aGlzLnZhcnNbYStcIlNjb3BlXCJdPWQsYylmb3IodmFyIGU9Yy5sZW5ndGg7LS1lPi0xOylcIntzZWxmfVwiPT09Y1tlXSYmKGM9dGhpcy52YXJzW2ErXCJQYXJhbXNcIl09Yy5jb25jYXQoKSxjW2VdPXRoaXMpO1wib25VcGRhdGVcIj09PWEmJih0aGlzLl9vblVwZGF0ZT1iKX1yZXR1cm4gdGhpc30sZy5kZWxheT1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcmJnRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0VGltZSthLXRoaXMuX2RlbGF5KSx0aGlzLl9kZWxheT1hLHRoaXMpOnRoaXMuX2RlbGF5fSxnLmR1cmF0aW9uPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9kdXJhdGlvbj10aGlzLl90b3RhbER1cmF0aW9uPWEsdGhpcy5fdW5jYWNoZSghMCksdGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcmJnRoaXMuX3RpbWU+MCYmdGhpcy5fdGltZTx0aGlzLl9kdXJhdGlvbiYmMCE9PWEmJnRoaXMudG90YWxUaW1lKHRoaXMuX3RvdGFsVGltZSooYS90aGlzLl9kdXJhdGlvbiksITApLHRoaXMpOih0aGlzLl9kaXJ0eT0hMSx0aGlzLl9kdXJhdGlvbil9LGcudG90YWxEdXJhdGlvbj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fZGlydHk9ITEsYXJndW1lbnRzLmxlbmd0aD90aGlzLmR1cmF0aW9uKGEpOnRoaXMuX3RvdGFsRHVyYXRpb259LGcudGltZT1mdW5jdGlvbihhLGIpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9kaXJ0eSYmdGhpcy50b3RhbER1cmF0aW9uKCksYT50aGlzLl9kdXJhdGlvbiYmKGE9dGhpcy5fZHVyYXRpb24pLHRoaXMudG90YWxUaW1lKGEsYikpOnRoaXMuX3RpbWV9LGcudG90YWxUaW1lPWZ1bmN0aW9uKGEsYil7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuX3RvdGFsVGltZTtpZih0aGlzLl90aW1lbGluZSl7aWYoMD5hJiYoYSs9dGhpcy50b3RhbER1cmF0aW9uKCkpLHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nJiYodGhpcy5fZGlydHkmJnRoaXMudG90YWxEdXJhdGlvbigpLGE+dGhpcy5fdG90YWxEdXJhdGlvbiYmKGE9dGhpcy5fdG90YWxEdXJhdGlvbiksdGhpcy5fc3RhcnRUaW1lPSh0aGlzLl9wYXVzZWQ/dGhpcy5fcGF1c2VUaW1lOnRoaXMuX3RpbWVsaW5lLl90aW1lKS0odGhpcy5fcmV2ZXJzZWQ/dGhpcy5fdG90YWxEdXJhdGlvbi1hOmEpL3RoaXMuX3RpbWVTY2FsZSx0aGlzLl90aW1lbGluZS5fZGlydHl8fHRoaXMuX3VuY2FjaGUoITEpLCF0aGlzLl90aW1lbGluZS5fYWN0aXZlKSlmb3IodmFyIGM9dGhpcy5fdGltZWxpbmU7Yy5fdGltZWxpbmU7KWMudG90YWxUaW1lKGMuX3RvdGFsVGltZSwhMCksYz1jLl90aW1lbGluZTt0aGlzLl9nYyYmdGhpcy5fZW5hYmxlZCghMCwhMSksdGhpcy5fdG90YWxUaW1lIT09YSYmdGhpcy5yZW5kZXIoYSxiLCExKX1yZXR1cm4gdGhpc30sZy5zdGFydFRpbWU9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGEhPT10aGlzLl9zdGFydFRpbWUmJih0aGlzLl9zdGFydFRpbWU9YSx0aGlzLnRpbWVsaW5lJiZ0aGlzLnRpbWVsaW5lLl9zb3J0Q2hpbGRyZW4mJnRoaXMudGltZWxpbmUuYWRkKHRoaXMsYS10aGlzLl9kZWxheSkpLHRoaXMpOnRoaXMuX3N0YXJ0VGltZX0sZy50aW1lU2NhbGU9ZnVuY3Rpb24oYSl7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuX3RpbWVTY2FsZTtpZihhPWF8fDFlLTYsdGhpcy5fdGltZWxpbmUmJnRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKXt2YXIgYj10aGlzLl9wYXVzZVRpbWV8fDA9PT10aGlzLl9wYXVzZVRpbWU/dGhpcy5fcGF1c2VUaW1lOnRoaXMuX3RpbWVsaW5lLl90b3RhbFRpbWU7dGhpcy5fc3RhcnRUaW1lPWItKGItdGhpcy5fc3RhcnRUaW1lKSp0aGlzLl90aW1lU2NhbGUvYX1yZXR1cm4gdGhpcy5fdGltZVNjYWxlPWEsdGhpcy5fdW5jYWNoZSghMSl9LGcucmV2ZXJzZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGEhPXRoaXMuX3JldmVyc2VkJiYodGhpcy5fcmV2ZXJzZWQ9YSx0aGlzLnRvdGFsVGltZSh0aGlzLl90b3RhbFRpbWUsITApKSx0aGlzKTp0aGlzLl9yZXZlcnNlZH0sZy5wYXVzZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGEhPXRoaXMuX3BhdXNlZCYmdGhpcy5fdGltZWxpbmUmJighYSYmdGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcmJih0aGlzLl9zdGFydFRpbWUrPXRoaXMuX3RpbWVsaW5lLnJhd1RpbWUoKS10aGlzLl9wYXVzZVRpbWUsdGhpcy5fdW5jYWNoZSghMSkpLHRoaXMuX3BhdXNlVGltZT1hP3RoaXMuX3RpbWVsaW5lLnJhd1RpbWUoKTpudWxsLHRoaXMuX3BhdXNlZD1hLHRoaXMuX2FjdGl2ZT0hdGhpcy5fcGF1c2VkJiZ0aGlzLl90b3RhbFRpbWU+MCYmdGhpcy5fdG90YWxUaW1lPHRoaXMuX3RvdGFsRHVyYXRpb24pLHRoaXMuX2djJiYoYXx8dGhpcy5fZW5hYmxlZCghMCwhMSkpLHRoaXMpOnRoaXMuX3BhdXNlZH07dmFyIHg9bChcImNvcmUuU2ltcGxlVGltZWxpbmVcIixmdW5jdGlvbihhKXt2LmNhbGwodGhpcywwLGEpLHRoaXMuYXV0b1JlbW92ZUNoaWxkcmVuPXRoaXMuc21vb3RoQ2hpbGRUaW1pbmc9ITB9KTtnPXgucHJvdG90eXBlPW5ldyB2LGcuY29uc3RydWN0b3I9eCxnLmtpbGwoKS5fZ2M9ITEsZy5fZmlyc3Q9Zy5fbGFzdD1udWxsLGcuX3NvcnRDaGlsZHJlbj0hMSxnLmFkZD1mdW5jdGlvbihhLGIpe3ZhciBlLGY7aWYoYS5fc3RhcnRUaW1lPU51bWJlcihifHwwKSthLl9kZWxheSxhLl9wYXVzZWQmJnRoaXMhPT1hLl90aW1lbGluZSYmKGEuX3BhdXNlVGltZT1hLl9zdGFydFRpbWUrKHRoaXMucmF3VGltZSgpLWEuX3N0YXJ0VGltZSkvYS5fdGltZVNjYWxlKSxhLnRpbWVsaW5lJiZhLnRpbWVsaW5lLl9yZW1vdmUoYSwhMCksYS50aW1lbGluZT1hLl90aW1lbGluZT10aGlzLGEuX2djJiZhLl9lbmFibGVkKCEwLCEwKSxlPXRoaXMuX2xhc3QsdGhpcy5fc29ydENoaWxkcmVuKWZvcihmPWEuX3N0YXJ0VGltZTtlJiZlLl9zdGFydFRpbWU+ZjspZT1lLl9wcmV2O3JldHVybiBlPyhhLl9uZXh0PWUuX25leHQsZS5fbmV4dD1hKTooYS5fbmV4dD10aGlzLl9maXJzdCx0aGlzLl9maXJzdD1hKSxhLl9uZXh0P2EuX25leHQuX3ByZXY9YTp0aGlzLl9sYXN0PWEsYS5fcHJldj1lLHRoaXMuX3RpbWVsaW5lJiZ0aGlzLl91bmNhY2hlKCEwKSx0aGlzfSxnLmluc2VydD1nLmFkZCxnLl9yZW1vdmU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS50aW1lbGluZT09PXRoaXMmJihifHxhLl9lbmFibGVkKCExLCEwKSxhLnRpbWVsaW5lPW51bGwsYS5fcHJldj9hLl9wcmV2Ll9uZXh0PWEuX25leHQ6dGhpcy5fZmlyc3Q9PT1hJiYodGhpcy5fZmlyc3Q9YS5fbmV4dCksYS5fbmV4dD9hLl9uZXh0Ll9wcmV2PWEuX3ByZXY6dGhpcy5fbGFzdD09PWEmJih0aGlzLl9sYXN0PWEuX3ByZXYpLHRoaXMuX3RpbWVsaW5lJiZ0aGlzLl91bmNhY2hlKCEwKSksdGhpc30sZy5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgZSxkPXRoaXMuX2ZpcnN0O2Zvcih0aGlzLl90b3RhbFRpbWU9dGhpcy5fdGltZT10aGlzLl9yYXdQcmV2VGltZT1hO2Q7KWU9ZC5fbmV4dCwoZC5fYWN0aXZlfHxhPj1kLl9zdGFydFRpbWUmJiFkLl9wYXVzZWQpJiYoZC5fcmV2ZXJzZWQ/ZC5yZW5kZXIoKGQuX2RpcnR5P2QudG90YWxEdXJhdGlvbigpOmQuX3RvdGFsRHVyYXRpb24pLShhLWQuX3N0YXJ0VGltZSkqZC5fdGltZVNjYWxlLGIsITEpOmQucmVuZGVyKChhLWQuX3N0YXJ0VGltZSkqZC5fdGltZVNjYWxlLGIsITEpKSxkPWV9LGcucmF3VGltZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl90b3RhbFRpbWV9O3ZhciB5PWwoXCJUd2VlbkxpdGVcIixmdW5jdGlvbihhLGIsYyl7aWYodi5jYWxsKHRoaXMsYixjKSxudWxsPT1hKXRocm93XCJDYW5ub3QgdHdlZW4gYW4gdW5kZWZpbmVkIHJlZmVyZW5jZS5cIjt0aGlzLnRhcmdldD1hPVwic3RyaW5nXCIhPXR5cGVvZiBhP2E6eS5zZWxlY3RvcihhKXx8YSx0aGlzLl9vdmVyd3JpdGU9bnVsbD09dGhpcy52YXJzLm92ZXJ3cml0ZT9HW3kuZGVmYXVsdE92ZXJ3cml0ZV06XCJudW1iZXJcIj09dHlwZW9mIHRoaXMudmFycy5vdmVyd3JpdGU/dGhpcy52YXJzLm92ZXJ3cml0ZT4+MDpHW3RoaXMudmFycy5vdmVyd3JpdGVdO3ZhciBlLGYsZD1hLmpxdWVyeXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYS5lYWNoJiZhWzBdJiZhWzBdLm5vZGVUeXBlJiZhWzBdLnN0eWxlO2lmKChkfHxhIGluc3RhbmNlb2YgQXJyYXkpJiZcIm51bWJlclwiIT10eXBlb2YgYVswXSlmb3IodGhpcy5fdGFyZ2V0cz1kJiYhYS5zbGljZT9BKGEpOmEuc2xpY2UoMCksdGhpcy5fcHJvcExvb2t1cD1bXSx0aGlzLl9zaWJsaW5ncz1bXSxlPTA7dGhpcy5fdGFyZ2V0cy5sZW5ndGg+ZTtlKyspZj10aGlzLl90YXJnZXRzW2VdLGY/XCJzdHJpbmdcIiE9dHlwZW9mIGY/XCJmdW5jdGlvblwiPT10eXBlb2YgZi5lYWNoJiZmWzBdJiZmWzBdLm5vZGVUeXBlJiZmWzBdLnN0eWxlPyh0aGlzLl90YXJnZXRzLnNwbGljZShlLS0sMSksdGhpcy5fdGFyZ2V0cz10aGlzLl90YXJnZXRzLmNvbmNhdChBKGYpKSk6KHRoaXMuX3NpYmxpbmdzW2VdPUooZix0aGlzLCExKSwxPT09dGhpcy5fb3ZlcndyaXRlJiZ0aGlzLl9zaWJsaW5nc1tlXS5sZW5ndGg+MSYmSyhmLHRoaXMsbnVsbCwxLHRoaXMuX3NpYmxpbmdzW2VdKSk6KGY9dGhpcy5fdGFyZ2V0c1tlLS1dPXkuc2VsZWN0b3IoZiksXCJzdHJpbmdcIj09dHlwZW9mIGYmJnRoaXMuX3RhcmdldHMuc3BsaWNlKGUrMSwxKSk6dGhpcy5fdGFyZ2V0cy5zcGxpY2UoZS0tLDEpO2Vsc2UgdGhpcy5fcHJvcExvb2t1cD17fSx0aGlzLl9zaWJsaW5ncz1KKGEsdGhpcywhMSksMT09PXRoaXMuX292ZXJ3cml0ZSYmdGhpcy5fc2libGluZ3MubGVuZ3RoPjEmJksoYSx0aGlzLG51bGwsMSx0aGlzLl9zaWJsaW5ncyk7KHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXJ8fDA9PT1iJiYwPT09dGhpcy5fZGVsYXkmJnRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIhPT0hMSkmJnRoaXMucmVuZGVyKC10aGlzLl9kZWxheSwhMSwhMCl9LCEwKSx6PWZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGEuZWFjaCYmYVswXSYmYVswXS5ub2RlVHlwZSYmYVswXS5zdHlsZX0sQT1mdW5jdGlvbihhKXt2YXIgYj1bXTtyZXR1cm4gYS5lYWNoKGZ1bmN0aW9uKCl7Yi5wdXNoKHRoaXMpfSksYn0sQj1mdW5jdGlvbihhKXt2YXIgYyxiPXt9O2ZvcihjIGluIGEpIUZbY10mJighQ1tjXXx8Q1tjXSYmQ1tjXS5fYXV0b0NTUykmJihiW2NdPWFbY10sZGVsZXRlIGFbY10pO2EuY3NzPWJ9O2c9eS5wcm90b3R5cGU9bmV3IHYsZy5jb25zdHJ1Y3Rvcj15LGcua2lsbCgpLl9nYz0hMSxnLnJhdGlvPTAsZy5fZmlyc3RQVD1nLl90YXJnZXRzPWcuX292ZXJ3cml0dGVuUHJvcHM9bnVsbCxnLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkPSExLHkudmVyc2lvbj1cIjEuOC4xXCIseS5kZWZhdWx0RWFzZT1nLl9lYXNlPW5ldyBvKG51bGwsbnVsbCwxLDEpLHkuZGVmYXVsdE92ZXJ3cml0ZT1cImF1dG9cIix5LnRpY2tlcj13LHkuc2VsZWN0b3I9YS4kfHxhLmpRdWVyeXx8ZnVuY3Rpb24oYil7cmV0dXJuIGEuJD8oeS5zZWxlY3Rvcj1hLiQsYS4kKGIpKTphLmRvY3VtZW50P2EuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCIjXCI9PT1iLmNoYXJBdCgwKT9iLnN1YnN0cigxKTpiKTpifTt2YXIgQz15Ll9wbHVnaW5zPXt9LEQ9eS5fdHdlZW5Mb29rdXA9e30sRT0wLEY9e2Vhc2U6MSxkZWxheToxLG92ZXJ3cml0ZToxLG9uQ29tcGxldGU6MSxvbkNvbXBsZXRlUGFyYW1zOjEsb25Db21wbGV0ZVNjb3BlOjEsdXNlRnJhbWVzOjEscnVuQmFja3dhcmRzOjEsc3RhcnRBdDoxLG9uVXBkYXRlOjEsb25VcGRhdGVQYXJhbXM6MSxvblVwZGF0ZVNjb3BlOjEsb25TdGFydDoxLG9uU3RhcnRQYXJhbXM6MSxvblN0YXJ0U2NvcGU6MSxvblJldmVyc2VDb21wbGV0ZToxLG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOjEsb25SZXZlcnNlQ29tcGxldGVTY29wZToxLG9uUmVwZWF0OjEsb25SZXBlYXRQYXJhbXM6MSxvblJlcGVhdFNjb3BlOjEsZWFzZVBhcmFtczoxLHlveW86MSxvcmllbnRUb0JlemllcjoxLGltbWVkaWF0ZVJlbmRlcjoxLHJlcGVhdDoxLHJlcGVhdERlbGF5OjEsZGF0YToxLHBhdXNlZDoxLHJldmVyc2VkOjEsYXV0b0NTUzoxfSxHPXtub25lOjAsYWxsOjEsYXV0bzoyLGNvbmN1cnJlbnQ6MyxhbGxPblN0YXJ0OjQscHJlZXhpc3Rpbmc6NSxcInRydWVcIjoxLFwiZmFsc2VcIjowfSxIPXYuX3Jvb3RGcmFtZXNUaW1lbGluZT1uZXcgeCxJPXYuX3Jvb3RUaW1lbGluZT1uZXcgeDtJLl9zdGFydFRpbWU9dy50aW1lLEguX3N0YXJ0VGltZT13LmZyYW1lLEkuX2FjdGl2ZT1ILl9hY3RpdmU9ITAsdi5fdXBkYXRlUm9vdD1mdW5jdGlvbigpe2lmKEkucmVuZGVyKCh3LnRpbWUtSS5fc3RhcnRUaW1lKSpJLl90aW1lU2NhbGUsITEsITEpLEgucmVuZGVyKCh3LmZyYW1lLUguX3N0YXJ0VGltZSkqSC5fdGltZVNjYWxlLCExLCExKSwhKHcuZnJhbWUlMTIwKSl7dmFyIGEsYixjO2ZvcihjIGluIEQpe2ZvcihiPURbY10udHdlZW5zLGE9Yi5sZW5ndGg7LS1hPi0xOyliW2FdLl9nYyYmYi5zcGxpY2UoYSwxKTswPT09Yi5sZW5ndGgmJmRlbGV0ZSBEW2NdfX19LHcuYWRkRXZlbnRMaXN0ZW5lcihcInRpY2tcIix2Ll91cGRhdGVSb290KTt2YXIgSj1mdW5jdGlvbihhLGIsYyl7dmFyIGUsZixkPWEuX2dzVHdlZW5JRDtpZihEW2R8fChhLl9nc1R3ZWVuSUQ9ZD1cInRcIitFKyspXXx8KERbZF09e3RhcmdldDphLHR3ZWVuczpbXX0pLGImJihlPURbZF0udHdlZW5zLGVbZj1lLmxlbmd0aF09YixjKSlmb3IoOy0tZj4tMTspZVtmXT09PWImJmUuc3BsaWNlKGYsMSk7cmV0dXJuIERbZF0udHdlZW5zfSxLPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGk7aWYoMT09PWR8fGQ+PTQpe2ZvcihpPWUubGVuZ3RoLGY9MDtpPmY7ZisrKWlmKChoPWVbZl0pIT09YiloLl9nY3x8aC5fZW5hYmxlZCghMSwhMSkmJihnPSEwKTtlbHNlIGlmKDU9PT1kKWJyZWFrO3JldHVybiBnfXZhciBuLGo9Yi5fc3RhcnRUaW1lKzFlLTEwLGs9W10sbD0wLG09MD09PWIuX2R1cmF0aW9uO2ZvcihmPWUubGVuZ3RoOy0tZj4tMTspKGg9ZVtmXSk9PT1ifHxoLl9nY3x8aC5fcGF1c2VkfHwoaC5fdGltZWxpbmUhPT1iLl90aW1lbGluZT8obj1ufHxMKGIsMCxtKSwwPT09TChoLG4sbSkmJihrW2wrK109aCkpOmo+PWguX3N0YXJ0VGltZSYmaC5fc3RhcnRUaW1lK2gudG90YWxEdXJhdGlvbigpL2guX3RpbWVTY2FsZSsxZS0xMD5qJiYoKG18fCFoLl9pbml0dGVkKSYmMmUtMTA+PWotaC5fc3RhcnRUaW1lfHwoa1tsKytdPWgpKSk7Zm9yKGY9bDstLWY+LTE7KWg9a1tmXSwyPT09ZCYmaC5fa2lsbChjLGEpJiYoZz0hMCksKDIhPT1kfHwhaC5fZmlyc3RQVCYmaC5faW5pdHRlZCkmJmguX2VuYWJsZWQoITEsITEpJiYoZz0hMCk7cmV0dXJuIGd9LEw9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1hLl90aW1lbGluZSxlPWQuX3RpbWVTY2FsZSxmPWEuX3N0YXJ0VGltZTtkLl90aW1lbGluZTspe2lmKGYrPWQuX3N0YXJ0VGltZSxlKj1kLl90aW1lU2NhbGUsZC5fcGF1c2VkKXJldHVybi0xMDA7ZD1kLl90aW1lbGluZX1yZXR1cm4gZi89ZSxmPmI/Zi1iOmMmJmY9PT1ifHwhYS5faW5pdHRlZCYmMmUtMTA+Zi1iPzFlLTEwOihmKz1hLnRvdGFsRHVyYXRpb24oKS9hLl90aW1lU2NhbGUvZSk+Yj8wOmYtYi0xZS0xMH07Zy5faW5pdD1mdW5jdGlvbigpe3ZhciBjLGQsZSxhPXRoaXMudmFycyxiPWEuZWFzZTtpZihhLnN0YXJ0QXQmJihhLnN0YXJ0QXQub3ZlcndyaXRlPTAsYS5zdGFydEF0LmltbWVkaWF0ZVJlbmRlcj0hMCx5LnRvKHRoaXMudGFyZ2V0LDAsYS5zdGFydEF0KSksdGhpcy5fZWFzZT1iP2IgaW5zdGFuY2VvZiBvP2EuZWFzZVBhcmFtcyBpbnN0YW5jZW9mIEFycmF5P2IuY29uZmlnLmFwcGx5KGIsYS5lYXNlUGFyYW1zKTpiOlwiZnVuY3Rpb25cIj09dHlwZW9mIGI/bmV3IG8oYixhLmVhc2VQYXJhbXMpOnBbYl18fHkuZGVmYXVsdEVhc2U6eS5kZWZhdWx0RWFzZSx0aGlzLl9lYXNlVHlwZT10aGlzLl9lYXNlLl90eXBlLHRoaXMuX2Vhc2VQb3dlcj10aGlzLl9lYXNlLl9wb3dlcix0aGlzLl9maXJzdFBUPW51bGwsdGhpcy5fdGFyZ2V0cylmb3IoYz10aGlzLl90YXJnZXRzLmxlbmd0aDstLWM+LTE7KXRoaXMuX2luaXRQcm9wcyh0aGlzLl90YXJnZXRzW2NdLHRoaXMuX3Byb3BMb29rdXBbY109e30sdGhpcy5fc2libGluZ3NbY10sdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcz90aGlzLl9vdmVyd3JpdHRlblByb3BzW2NdOm51bGwpJiYoZD0hMCk7ZWxzZSBkPXRoaXMuX2luaXRQcm9wcyh0aGlzLnRhcmdldCx0aGlzLl9wcm9wTG9va3VwLHRoaXMuX3NpYmxpbmdzLHRoaXMuX292ZXJ3cml0dGVuUHJvcHMpO2lmKGQmJnkuX29uUGx1Z2luRXZlbnQoXCJfb25Jbml0QWxsUHJvcHNcIix0aGlzKSx0aGlzLl9vdmVyd3JpdHRlblByb3BzJiZudWxsPT10aGlzLl9maXJzdFBUJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzLnRhcmdldCYmdGhpcy5fZW5hYmxlZCghMSwhMSksYS5ydW5CYWNrd2FyZHMpZm9yKGU9dGhpcy5fZmlyc3RQVDtlOyllLnMrPWUuYyxlLmM9LWUuYyxlPWUuX25leHQ7dGhpcy5fb25VcGRhdGU9YS5vblVwZGF0ZSx0aGlzLl9pbml0dGVkPSEwfSxnLl9pbml0UHJvcHM9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnLGgsaSxqLGs7aWYobnVsbD09YSlyZXR1cm4hMTt0aGlzLnZhcnMuY3NzfHxhLnN0eWxlJiZhLm5vZGVUeXBlJiZDLmNzcyYmdGhpcy52YXJzLmF1dG9DU1MhPT0hMSYmQih0aGlzLnZhcnMpO2ZvcihlIGluIHRoaXMudmFycyl7aWYoRltlXSl7aWYoKFwib25TdGFydFBhcmFtc1wiPT09ZXx8XCJvblVwZGF0ZVBhcmFtc1wiPT09ZXx8XCJvbkNvbXBsZXRlUGFyYW1zXCI9PT1lfHxcIm9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zXCI9PT1lfHxcIm9uUmVwZWF0UGFyYW1zXCI9PT1lKSYmKGk9dGhpcy52YXJzW2VdKSlmb3IoZj1pLmxlbmd0aDstLWY+LTE7KVwie3NlbGZ9XCI9PT1pW2ZdJiYoaT10aGlzLnZhcnNbZV09aS5jb25jYXQoKSxpW2ZdPXRoaXMpfWVsc2UgaWYoQ1tlXSYmKGg9bmV3IENbZV0pLl9vbkluaXRUd2VlbihhLHRoaXMudmFyc1tlXSx0aGlzKSl7Zm9yKHRoaXMuX2ZpcnN0UFQ9aj17X25leHQ6dGhpcy5fZmlyc3RQVCx0OmgscDpcInNldFJhdGlvXCIsczowLGM6MSxmOiEwLG46ZSxwZzohMCxwcjpoLl9wcmlvcml0eX0sZj1oLl9vdmVyd3JpdGVQcm9wcy5sZW5ndGg7LS1mPi0xOyliW2guX292ZXJ3cml0ZVByb3BzW2ZdXT10aGlzLl9maXJzdFBUOyhoLl9wcmlvcml0eXx8aC5fb25Jbml0QWxsUHJvcHMpJiYoZz0hMCksKGguX29uRGlzYWJsZXx8aC5fb25FbmFibGUpJiYodGhpcy5fbm90aWZ5UGx1Z2luc09mRW5hYmxlZD0hMCl9ZWxzZSB0aGlzLl9maXJzdFBUPWJbZV09aj17X25leHQ6dGhpcy5fZmlyc3RQVCx0OmEscDplLGY6XCJmdW5jdGlvblwiPT10eXBlb2YgYVtlXSxuOmUscGc6ITEscHI6MH0sai5zPWouZj9hW2UuaW5kZXhPZihcInNldFwiKXx8XCJmdW5jdGlvblwiIT10eXBlb2YgYVtcImdldFwiK2Uuc3Vic3RyKDMpXT9lOlwiZ2V0XCIrZS5zdWJzdHIoMyldKCk6cGFyc2VGbG9hdChhW2VdKSxrPXRoaXMudmFyc1tlXSxqLmM9XCJzdHJpbmdcIj09dHlwZW9mIGsmJlwiPVwiPT09ay5jaGFyQXQoMSk/cGFyc2VJbnQoay5jaGFyQXQoMCkrXCIxXCIsMTApKk51bWJlcihrLnN1YnN0cigyKSk6TnVtYmVyKGspLWouc3x8MDtqJiZqLl9uZXh0JiYoai5fbmV4dC5fcHJldj1qKX1yZXR1cm4gZCYmdGhpcy5fa2lsbChkLGEpP3RoaXMuX2luaXRQcm9wcyhhLGIsYyxkKTp0aGlzLl9vdmVyd3JpdGU+MSYmdGhpcy5fZmlyc3RQVCYmYy5sZW5ndGg+MSYmSyhhLHRoaXMsYix0aGlzLl9vdmVyd3JpdGUsYyk/KHRoaXMuX2tpbGwoYixhKSx0aGlzLl9pbml0UHJvcHMoYSxiLGMsZCkpOmd9LGcucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZSxmLGcsZD10aGlzLl90aW1lO2lmKGE+PXRoaXMuX2R1cmF0aW9uKXRoaXMuX3RvdGFsVGltZT10aGlzLl90aW1lPXRoaXMuX2R1cmF0aW9uLHRoaXMucmF0aW89dGhpcy5fZWFzZS5fY2FsY0VuZD90aGlzLl9lYXNlLmdldFJhdGlvKDEpOjEsdGhpcy5fcmV2ZXJzZWR8fChlPSEwLGY9XCJvbkNvbXBsZXRlXCIpLDA9PT10aGlzLl9kdXJhdGlvbiYmKCgwPT09YXx8MD50aGlzLl9yYXdQcmV2VGltZSkmJnRoaXMuX3Jhd1ByZXZUaW1lIT09YSYmKGM9ITApLHRoaXMuX3Jhd1ByZXZUaW1lPWEpO2Vsc2UgaWYoMD49YSl0aGlzLl90b3RhbFRpbWU9dGhpcy5fdGltZT0wLHRoaXMucmF0aW89dGhpcy5fZWFzZS5fY2FsY0VuZD90aGlzLl9lYXNlLmdldFJhdGlvKDApOjAsKDAhPT1kfHwwPT09dGhpcy5fZHVyYXRpb24mJnRoaXMuX3Jhd1ByZXZUaW1lPjApJiYoZj1cIm9uUmV2ZXJzZUNvbXBsZXRlXCIsZT10aGlzLl9yZXZlcnNlZCksMD5hPyh0aGlzLl9hY3RpdmU9ITEsMD09PXRoaXMuX2R1cmF0aW9uJiYodGhpcy5fcmF3UHJldlRpbWU+PTAmJihjPSEwKSx0aGlzLl9yYXdQcmV2VGltZT1hKSk6dGhpcy5faW5pdHRlZHx8KGM9ITApO2Vsc2UgaWYodGhpcy5fdG90YWxUaW1lPXRoaXMuX3RpbWU9YSx0aGlzLl9lYXNlVHlwZSl7dmFyIGg9YS90aGlzLl9kdXJhdGlvbixpPXRoaXMuX2Vhc2VUeXBlLGo9dGhpcy5fZWFzZVBvd2VyOygxPT09aXx8Mz09PWkmJmg+PS41KSYmKGg9MS1oKSwzPT09aSYmKGgqPTIpLDE9PT1qP2gqPWg6Mj09PWo/aCo9aCpoOjM9PT1qP2gqPWgqaCpoOjQ9PT1qJiYoaCo9aCpoKmgqaCksdGhpcy5yYXRpbz0xPT09aT8xLWg6Mj09PWk/aDouNT5hL3RoaXMuX2R1cmF0aW9uP2gvMjoxLWgvMn1lbHNlIHRoaXMucmF0aW89dGhpcy5fZWFzZS5nZXRSYXRpbyhhL3RoaXMuX2R1cmF0aW9uKTtpZih0aGlzLl90aW1lIT09ZHx8Yyl7Zm9yKHRoaXMuX2luaXR0ZWR8fCh0aGlzLl9pbml0KCksIWUmJnRoaXMuX3RpbWUmJih0aGlzLnJhdGlvPXRoaXMuX2Vhc2UuZ2V0UmF0aW8odGhpcy5fdGltZS90aGlzLl9kdXJhdGlvbikpKSx0aGlzLl9hY3RpdmV8fHRoaXMuX3BhdXNlZHx8KHRoaXMuX2FjdGl2ZT0hMCksMD09PWQmJnRoaXMudmFycy5vblN0YXJ0JiYoMCE9PXRoaXMuX3RpbWV8fDA9PT10aGlzLl9kdXJhdGlvbikmJihifHx0aGlzLnZhcnMub25TdGFydC5hcHBseSh0aGlzLnZhcnMub25TdGFydFNjb3BlfHx0aGlzLHRoaXMudmFycy5vblN0YXJ0UGFyYW1zfHxuKSksZz10aGlzLl9maXJzdFBUO2c7KWcuZj9nLnRbZy5wXShnLmMqdGhpcy5yYXRpbytnLnMpOmcudFtnLnBdPWcuYyp0aGlzLnJhdGlvK2cucyxnPWcuX25leHQ7dGhpcy5fb25VcGRhdGUmJihifHx0aGlzLl9vblVwZGF0ZS5hcHBseSh0aGlzLnZhcnMub25VcGRhdGVTY29wZXx8dGhpcyx0aGlzLnZhcnMub25VcGRhdGVQYXJhbXN8fG4pKSxmJiYodGhpcy5fZ2N8fChlJiYodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuJiZ0aGlzLl9lbmFibGVkKCExLCExKSx0aGlzLl9hY3RpdmU9ITEpLGJ8fHRoaXMudmFyc1tmXSYmdGhpcy52YXJzW2ZdLmFwcGx5KHRoaXMudmFyc1tmK1wiU2NvcGVcIl18fHRoaXMsdGhpcy52YXJzW2YrXCJQYXJhbXNcIl18fG4pKSl9fSxnLl9raWxsPWZ1bmN0aW9uKGEsYil7aWYoXCJhbGxcIj09PWEmJihhPW51bGwpLG51bGw9PWEmJihudWxsPT1ifHxiPT09dGhpcy50YXJnZXQpKXJldHVybiB0aGlzLl9lbmFibGVkKCExLCExKTtiPVwic3RyaW5nXCIhPXR5cGVvZiBiP2J8fHRoaXMuX3RhcmdldHN8fHRoaXMudGFyZ2V0Onkuc2VsZWN0b3IoYil8fGI7dmFyIGMsZCxlLGYsZyxoLGksajtpZigoYiBpbnN0YW5jZW9mIEFycmF5fHx6KGIpKSYmXCJudW1iZXJcIiE9dHlwZW9mIGJbMF0pZm9yKGM9Yi5sZW5ndGg7LS1jPi0xOyl0aGlzLl9raWxsKGEsYltjXSkmJihoPSEwKTtlbHNle2lmKHRoaXMuX3RhcmdldHMpe2ZvcihjPXRoaXMuX3RhcmdldHMubGVuZ3RoOy0tYz4tMTspaWYoYj09PXRoaXMuX3RhcmdldHNbY10pe2c9dGhpcy5fcHJvcExvb2t1cFtjXXx8e30sdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcz10aGlzLl9vdmVyd3JpdHRlblByb3BzfHxbXSxkPXRoaXMuX292ZXJ3cml0dGVuUHJvcHNbY109YT90aGlzLl9vdmVyd3JpdHRlblByb3BzW2NdfHx7fTpcImFsbFwiO2JyZWFrfX1lbHNle2lmKGIhPT10aGlzLnRhcmdldClyZXR1cm4hMTtnPXRoaXMuX3Byb3BMb29rdXAsZD10aGlzLl9vdmVyd3JpdHRlblByb3BzPWE/dGhpcy5fb3ZlcndyaXR0ZW5Qcm9wc3x8e306XCJhbGxcIn1pZihnKXtpPWF8fGcsaj1hIT09ZCYmXCJhbGxcIiE9PWQmJmEhPT1nJiYobnVsbD09YXx8YS5fdGVtcEtpbGwhPT0hMCk7Zm9yKGUgaW4gaSkoZj1nW2VdKSYmKGYucGcmJmYudC5fa2lsbChpKSYmKGg9ITApLGYucGcmJjAhPT1mLnQuX292ZXJ3cml0ZVByb3BzLmxlbmd0aHx8KGYuX3ByZXY/Zi5fcHJldi5fbmV4dD1mLl9uZXh0OmY9PT10aGlzLl9maXJzdFBUJiYodGhpcy5fZmlyc3RQVD1mLl9uZXh0KSxmLl9uZXh0JiYoZi5fbmV4dC5fcHJldj1mLl9wcmV2KSxmLl9uZXh0PWYuX3ByZXY9bnVsbCksZGVsZXRlIGdbZV0pLGomJihkW2VdPTEpfX1yZXR1cm4gaH0sZy5pbnZhbGlkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQmJnkuX29uUGx1Z2luRXZlbnQoXCJfb25EaXNhYmxlXCIsdGhpcyksdGhpcy5fZmlyc3RQVD1udWxsLHRoaXMuX292ZXJ3cml0dGVuUHJvcHM9bnVsbCx0aGlzLl9vblVwZGF0ZT1udWxsLHRoaXMuX2luaXR0ZWQ9dGhpcy5fYWN0aXZlPXRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQ9ITEsdGhpcy5fcHJvcExvb2t1cD10aGlzLl90YXJnZXRzP3t9OltdLHRoaXN9LGcuX2VuYWJsZWQ9ZnVuY3Rpb24oYSxiKXtpZihhJiZ0aGlzLl9nYylpZih0aGlzLl90YXJnZXRzKWZvcih2YXIgYz10aGlzLl90YXJnZXRzLmxlbmd0aDstLWM+LTE7KXRoaXMuX3NpYmxpbmdzW2NdPUoodGhpcy5fdGFyZ2V0c1tjXSx0aGlzLCEwKTtlbHNlIHRoaXMuX3NpYmxpbmdzPUoodGhpcy50YXJnZXQsdGhpcywhMCk7cmV0dXJuIHYucHJvdG90eXBlLl9lbmFibGVkLmNhbGwodGhpcyxhLGIpLHRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQmJnRoaXMuX2ZpcnN0UFQ/eS5fb25QbHVnaW5FdmVudChhP1wiX29uRW5hYmxlXCI6XCJfb25EaXNhYmxlXCIsdGhpcyk6ITF9LHkudG89ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuZXcgeShhLGIsYyl9LHkuZnJvbT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGMucnVuQmFja3dhcmRzPSEwLGMuaW1tZWRpYXRlUmVuZGVyIT09ITEmJihjLmltbWVkaWF0ZVJlbmRlcj0hMCksbmV3IHkoYSxiLGMpfSx5LmZyb21Ubz1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gZC5zdGFydEF0PWMsYy5pbW1lZGlhdGVSZW5kZXImJihkLmltbWVkaWF0ZVJlbmRlcj0hMCksbmV3IHkoYSxiLGQpfSx5LmRlbGF5ZWRDYWxsPWZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIG5ldyB5KGIsMCx7ZGVsYXk6YSxvbkNvbXBsZXRlOmIsb25Db21wbGV0ZVBhcmFtczpjLG9uQ29tcGxldGVTY29wZTpkLG9uUmV2ZXJzZUNvbXBsZXRlOmIsb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6YyxvblJldmVyc2VDb21wbGV0ZVNjb3BlOmQsaW1tZWRpYXRlUmVuZGVyOiExLHVzZUZyYW1lczplLG92ZXJ3cml0ZTowfSl9LHkuc2V0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyB5KGEsMCxiKX0seS5raWxsVHdlZW5zT2Y9eS5raWxsRGVsYXllZENhbGxzVG89ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9eS5nZXRUd2VlbnNPZihhKSxkPWMubGVuZ3RoOy0tZD4tMTspY1tkXS5fa2lsbChiLGEpfSx5LmdldFR3ZWVuc09mPWZ1bmN0aW9uKGEpe2lmKG51bGwhPWEpe2E9XCJzdHJpbmdcIiE9dHlwZW9mIGE/YTp5LnNlbGVjdG9yKGEpfHxhO3ZhciBiLGMsZCxlO2lmKChhIGluc3RhbmNlb2YgQXJyYXl8fHooYSkpJiZcIm51bWJlclwiIT10eXBlb2YgYVswXSl7Zm9yKGI9YS5sZW5ndGgsYz1bXTstLWI+LTE7KWM9Yy5jb25jYXQoeS5nZXRUd2VlbnNPZihhW2JdKSk7Zm9yKGI9Yy5sZW5ndGg7LS1iPi0xOylmb3IoZT1jW2JdLGQ9YjstLWQ+LTE7KWU9PT1jW2RdJiZjLnNwbGljZShiLDEpfWVsc2UgZm9yKGM9SihhKS5jb25jYXQoKSxiPWMubGVuZ3RoOy0tYj4tMTspY1tiXS5fZ2MmJmMuc3BsaWNlKGIsMSk7cmV0dXJuIGN9fTt2YXIgTT1sKFwicGx1Z2lucy5Ud2VlblBsdWdpblwiLGZ1bmN0aW9uKGEsYil7dGhpcy5fb3ZlcndyaXRlUHJvcHM9KGF8fFwiXCIpLnNwbGl0KFwiLFwiKSx0aGlzLl9wcm9wTmFtZT10aGlzLl9vdmVyd3JpdGVQcm9wc1swXSx0aGlzLl9wcmlvcml0eT1ifHwwfSwhMCk7aWYoZz1NLnByb3RvdHlwZSxNLnZlcnNpb249MTIsTS5BUEk9MixnLl9maXJzdFBUPW51bGwsZy5fYWRkVHdlZW49ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZhciBnLGg7bnVsbCE9ZCYmKGc9XCJudW1iZXJcIj09dHlwZW9mIGR8fFwiPVwiIT09ZC5jaGFyQXQoMSk/TnVtYmVyKGQpLWM6cGFyc2VJbnQoZC5jaGFyQXQoMCkrXCIxXCIsMTApKk51bWJlcihkLnN1YnN0cigyKSkpJiYodGhpcy5fZmlyc3RQVD1oPXtfbmV4dDp0aGlzLl9maXJzdFBULHQ6YSxwOmIsczpjLGM6ZyxmOlwiZnVuY3Rpb25cIj09dHlwZW9mIGFbYl0sbjplfHxiLHI6Zn0saC5fbmV4dCYmKGguX25leHQuX3ByZXY9aCkpfSxnLnNldFJhdGlvPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYyxiPXRoaXMuX2ZpcnN0UFQ7YjspYz1iLmMqYStiLnMsYi5yJiYoYz1jKyhjPjA/LjU6LS41KT4+MCksYi5mP2IudFtiLnBdKGMpOmIudFtiLnBdPWMsYj1iLl9uZXh0fSxnLl9raWxsPWZ1bmN0aW9uKGEpe2lmKG51bGwhPWFbdGhpcy5fcHJvcE5hbWVdKXRoaXMuX292ZXJ3cml0ZVByb3BzPVtdO2Vsc2UgZm9yKHZhciBiPXRoaXMuX292ZXJ3cml0ZVByb3BzLmxlbmd0aDstLWI+LTE7KW51bGwhPWFbdGhpcy5fb3ZlcndyaXRlUHJvcHNbYl1dJiZ0aGlzLl9vdmVyd3JpdGVQcm9wcy5zcGxpY2UoYiwxKTtmb3IodmFyIGM9dGhpcy5fZmlyc3RQVDtjOyludWxsIT1hW2Mubl0mJihjLl9uZXh0JiYoYy5fbmV4dC5fcHJldj1jLl9wcmV2KSxjLl9wcmV2PyhjLl9wcmV2Ll9uZXh0PWMuX25leHQsYy5fcHJldj1udWxsKTp0aGlzLl9maXJzdFBUPT09YyYmKHRoaXMuX2ZpcnN0UFQ9Yy5fbmV4dCkpLGM9Yy5fbmV4dDtyZXR1cm4hMX0sZy5fcm91bmRQcm9wcz1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLl9maXJzdFBUO2M7KShhW3RoaXMuX3Byb3BOYW1lXXx8bnVsbCE9Yy5uJiZhW2Mubi5zcGxpdCh0aGlzLl9wcm9wTmFtZStcIl9cIikuam9pbihcIlwiKV0pJiYoYy5yPWIpLGM9Yy5fbmV4dH0seS5fb25QbHVnaW5FdmVudD1mdW5jdGlvbihhLGIpe3ZhciBkLGM9Yi5fZmlyc3RQVDtpZihcIl9vbkluaXRBbGxQcm9wc1wiPT09YSl7Zm9yKHZhciBlLGYsZyxoO2M7KXtmb3IoaD1jLl9uZXh0LGU9ZjtlJiZlLnByPmMucHI7KWU9ZS5fbmV4dDsoYy5fcHJldj1lP2UuX3ByZXY6Zyk/Yy5fcHJldi5fbmV4dD1jOmY9YywoYy5fbmV4dD1lKT9lLl9wcmV2PWM6Zz1jLGM9aH1jPWIuX2ZpcnN0UFQ9Zn1mb3IoO2M7KWMucGcmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGMudFthXSYmYy50W2FdKCkmJihkPSEwKSxjPWMuX25leHQ7cmV0dXJuIGR9LE0uYWN0aXZhdGU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoOy0tYj4tMTspYVtiXS5BUEk9PT1NLkFQSSYmKHkuX3BsdWdpbnNbKG5ldyBhW2JdKS5fcHJvcE5hbWVdPWFbYl0pO3JldHVybiEwfSxlPWEuX2dzUXVldWUpe2ZvcihmPTA7ZS5sZW5ndGg+ZjtmKyspZVtmXSgpO2ZvcihnIGluIGkpaVtnXS5mdW5jfHxhLmNvbnNvbGUubG9nKFwiR1NBUCBlbmNvdW50ZXJlZCBtaXNzaW5nIGRlcGVuZGVuY3k6IGNvbS5ncmVlbnNvY2suXCIrZyl9aD0hMX0pKHdpbmRvdyk7IiwiLyohXG4gKiBWRVJTSU9OOiBiZXRhIDEuOC4xXG4gKiBEQVRFOiAyMDEzLTAxLTI5XG4gKiBKYXZhU2NyaXB0IChBY3Rpb25TY3JpcHQgMyBhbmQgMiBhbHNvIGF2YWlsYWJsZSlcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly93d3cuZ3JlZW5zb2NrLmNvbVxuICogXG4gKiBJbmNsdWRlcyBhbGwgb2YgdGhlIGZvbGxvd2luZzogVHdlZW5MaXRlLCBUd2Vlbk1heCwgVGltZWxpbmVMaXRlLCBUaW1lbGluZU1heCwgZWFzaW5nLkVhc2VQYWNrLCBwbHVnaW5zLkNTU1BsdWdpbiwgcGx1Z2lucy5Sb3VuZFByb3BzUGx1Z2luLCBwbHVnaW5zLkJlemllclBsdWdpblxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDEzLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgaW4gaHR0cDovL3d3dy5ncmVlbnNvY2suY29tL3Rlcm1zX29mX3VzZS5odG1sIG9yIGZvciBcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBzb2Z0d2FyZSBhZ3JlZW1lbnQgdGhhdCB3YXMgaXNzdWVkIHdpdGggeW91ciBtZW1iZXJzaGlwLlxuICogXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqKi9cbih3aW5kb3cuX2dzUXVldWV8fCh3aW5kb3cuX2dzUXVldWU9W10pKS5wdXNoKGZ1bmN0aW9uKCl7X2dzRGVmaW5lKFwiVHdlZW5NYXhcIixbXCJjb3JlLkFuaW1hdGlvblwiLFwiY29yZS5TaW1wbGVUaW1lbGluZVwiLFwiVHdlZW5MaXRlXCJdLGZ1bmN0aW9uKGEsYixjKXt2YXIgZD1mdW5jdGlvbihhLGIsZCl7Yy5jYWxsKHRoaXMsYSxiLGQpLHRoaXMuX2N5Y2xlPTAsdGhpcy5feW95bz10aGlzLnZhcnMueW95bz09PSEwLHRoaXMuX3JlcGVhdD10aGlzLnZhcnMucmVwZWF0fHwwLHRoaXMuX3JlcGVhdERlbGF5PXRoaXMudmFycy5yZXBlYXREZWxheXx8MCx0aGlzLl9kaXJ0eT0hMH0sZT1kLnByb3RvdHlwZT1jLnRvKHt9LC4xLHt9KSxmPVtdO2QudmVyc2lvbj1cIjEuOC4xXCIsZS5jb25zdHJ1Y3Rvcj1kLGUua2lsbCgpLl9nYz0hMSxkLmtpbGxUd2VlbnNPZj1kLmtpbGxEZWxheWVkQ2FsbHNUbz1jLmtpbGxUd2VlbnNPZixkLmdldFR3ZWVuc09mPWMuZ2V0VHdlZW5zT2YsZC50aWNrZXI9Yy50aWNrZXIsZS5pbnZhbGlkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3lveW89dGhpcy52YXJzLnlveW89PT0hMCx0aGlzLl9yZXBlYXQ9dGhpcy52YXJzLnJlcGVhdHx8MCx0aGlzLl9yZXBlYXREZWxheT10aGlzLnZhcnMucmVwZWF0RGVsYXl8fDAsdGhpcy5fdW5jYWNoZSghMCksYy5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpfSxlLnVwZGF0ZVRvPWZ1bmN0aW9uKGEsYil7dmFyIGUsZD10aGlzLnJhdGlvO2ImJm51bGwhPXRoaXMudGltZWxpbmUmJnRoaXMuX3N0YXJ0VGltZTx0aGlzLl90aW1lbGluZS5fdGltZSYmKHRoaXMuX3N0YXJ0VGltZT10aGlzLl90aW1lbGluZS5fdGltZSx0aGlzLl91bmNhY2hlKCExKSx0aGlzLl9nYz90aGlzLl9lbmFibGVkKCEwLCExKTp0aGlzLl90aW1lbGluZS5pbnNlcnQodGhpcyx0aGlzLl9zdGFydFRpbWUtdGhpcy5fZGVsYXkpKTtmb3IoZSBpbiBhKXRoaXMudmFyc1tlXT1hW2VdO2lmKHRoaXMuX2luaXR0ZWQpaWYoYil0aGlzLl9pbml0dGVkPSExO2Vsc2UgaWYodGhpcy5fbm90aWZ5UGx1Z2luc09mRW5hYmxlZCYmdGhpcy5fZmlyc3RQVCYmYy5fb25QbHVnaW5FdmVudChcIl9vbkRpc2FibGVcIix0aGlzKSx0aGlzLl90aW1lL3RoaXMuX2R1cmF0aW9uPi45OTgpe3ZhciBmPXRoaXMuX3RpbWU7dGhpcy5yZW5kZXIoMCwhMCwhMSksdGhpcy5faW5pdHRlZD0hMSx0aGlzLnJlbmRlcihmLCEwLCExKX1lbHNlIGlmKHRoaXMuX3RpbWU+MCl7dGhpcy5faW5pdHRlZD0hMSx0aGlzLl9pbml0KCk7Zm9yKHZhciBpLGc9MS8oMS1kKSxoPXRoaXMuX2ZpcnN0UFQ7aDspaT1oLnMraC5jLGguYyo9ZyxoLnM9aS1oLmMsaD1oLl9uZXh0fXJldHVybiB0aGlzfSxlLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7dmFyIGksaixrLGQ9dGhpcy5fZGlydHk/dGhpcy50b3RhbER1cmF0aW9uKCk6dGhpcy5fdG90YWxEdXJhdGlvbixlPXRoaXMuX3RpbWUsZz10aGlzLl90b3RhbFRpbWUsaD10aGlzLl9jeWNsZTtpZihhPj1kKXRoaXMuX3RvdGFsVGltZT1kLHRoaXMuX2N5Y2xlPXRoaXMuX3JlcGVhdCx0aGlzLl95b3lvJiYwIT09KDEmdGhpcy5fY3ljbGUpPyh0aGlzLl90aW1lPTAsdGhpcy5yYXRpbz10aGlzLl9lYXNlLl9jYWxjRW5kP3RoaXMuX2Vhc2UuZ2V0UmF0aW8oMCk6MCk6KHRoaXMuX3RpbWU9dGhpcy5fZHVyYXRpb24sdGhpcy5yYXRpbz10aGlzLl9lYXNlLl9jYWxjRW5kP3RoaXMuX2Vhc2UuZ2V0UmF0aW8oMSk6MSksdGhpcy5fcmV2ZXJzZWR8fChpPSEwLGo9XCJvbkNvbXBsZXRlXCIpLDA9PT10aGlzLl9kdXJhdGlvbiYmKCgwPT09YXx8MD50aGlzLl9yYXdQcmV2VGltZSkmJnRoaXMuX3Jhd1ByZXZUaW1lIT09YSYmKGM9ITApLHRoaXMuX3Jhd1ByZXZUaW1lPWEpO2Vsc2UgaWYoMD49YSl0aGlzLl90b3RhbFRpbWU9dGhpcy5fdGltZT10aGlzLl9jeWNsZT0wLHRoaXMucmF0aW89dGhpcy5fZWFzZS5fY2FsY0VuZD90aGlzLl9lYXNlLmdldFJhdGlvKDApOjAsKDAhPT1nfHwwPT09dGhpcy5fZHVyYXRpb24mJnRoaXMuX3Jhd1ByZXZUaW1lPjApJiYoaj1cIm9uUmV2ZXJzZUNvbXBsZXRlXCIsaT10aGlzLl9yZXZlcnNlZCksMD5hPyh0aGlzLl9hY3RpdmU9ITEsMD09PXRoaXMuX2R1cmF0aW9uJiYodGhpcy5fcmF3UHJldlRpbWU+PTAmJihjPSEwKSx0aGlzLl9yYXdQcmV2VGltZT1hKSk6dGhpcy5faW5pdHRlZHx8KGM9ITApO2Vsc2V7aWYodGhpcy5fdG90YWxUaW1lPXRoaXMuX3RpbWU9YSwwIT09dGhpcy5fcmVwZWF0KXt2YXIgbD10aGlzLl9kdXJhdGlvbit0aGlzLl9yZXBlYXREZWxheTt0aGlzLl9jeWNsZT10aGlzLl90b3RhbFRpbWUvbD4+MCwwIT09dGhpcy5fY3ljbGUmJnRoaXMuX2N5Y2xlPT09dGhpcy5fdG90YWxUaW1lL2wmJnRoaXMuX2N5Y2xlLS0sdGhpcy5fdGltZT10aGlzLl90b3RhbFRpbWUtdGhpcy5fY3ljbGUqbCx0aGlzLl95b3lvJiYwIT09KDEmdGhpcy5fY3ljbGUpJiYodGhpcy5fdGltZT10aGlzLl9kdXJhdGlvbi10aGlzLl90aW1lKSx0aGlzLl90aW1lPnRoaXMuX2R1cmF0aW9uP3RoaXMuX3RpbWU9dGhpcy5fZHVyYXRpb246MD50aGlzLl90aW1lJiYodGhpcy5fdGltZT0wKX1pZih0aGlzLl9lYXNlVHlwZSl7dmFyIG09dGhpcy5fdGltZS90aGlzLl9kdXJhdGlvbixuPXRoaXMuX2Vhc2VUeXBlLG89dGhpcy5fZWFzZVBvd2VyOygxPT09bnx8Mz09PW4mJm0+PS41KSYmKG09MS1tKSwzPT09biYmKG0qPTIpLDE9PT1vP20qPW06Mj09PW8/bSo9bSptOjM9PT1vP20qPW0qbSptOjQ9PT1vJiYobSo9bSptKm0qbSksdGhpcy5yYXRpbz0xPT09bj8xLW06Mj09PW4/bTouNT50aGlzLl90aW1lL3RoaXMuX2R1cmF0aW9uP20vMjoxLW0vMn1lbHNlIHRoaXMucmF0aW89dGhpcy5fZWFzZS5nZXRSYXRpbyh0aGlzLl90aW1lL3RoaXMuX2R1cmF0aW9uKX1pZihlPT09dGhpcy5fdGltZSYmIWMpcmV0dXJuIGchPT10aGlzLl90b3RhbFRpbWUmJnRoaXMuX29uVXBkYXRlJiYoYnx8dGhpcy5fb25VcGRhdGUuYXBwbHkodGhpcy52YXJzLm9uVXBkYXRlU2NvcGV8fHRoaXMsdGhpcy52YXJzLm9uVXBkYXRlUGFyYW1zfHxmKSksdm9pZCAwO2Zvcih0aGlzLl9pbml0dGVkfHwodGhpcy5faW5pdCgpLCFpJiZ0aGlzLl90aW1lJiYodGhpcy5yYXRpbz10aGlzLl9lYXNlLmdldFJhdGlvKHRoaXMuX3RpbWUvdGhpcy5fZHVyYXRpb24pKSksdGhpcy5fYWN0aXZlfHx0aGlzLl9wYXVzZWR8fCh0aGlzLl9hY3RpdmU9ITApLDA9PT1nJiZ0aGlzLnZhcnMub25TdGFydCYmKDAhPT10aGlzLl90b3RhbFRpbWV8fDA9PT10aGlzLl9kdXJhdGlvbikmJihifHx0aGlzLnZhcnMub25TdGFydC5hcHBseSh0aGlzLnZhcnMub25TdGFydFNjb3BlfHx0aGlzLHRoaXMudmFycy5vblN0YXJ0UGFyYW1zfHxmKSksaz10aGlzLl9maXJzdFBUO2s7KWsuZj9rLnRbay5wXShrLmMqdGhpcy5yYXRpbytrLnMpOmsudFtrLnBdPWsuYyp0aGlzLnJhdGlvK2sucyxrPWsuX25leHQ7dGhpcy5fb25VcGRhdGUmJihifHx0aGlzLl9vblVwZGF0ZS5hcHBseSh0aGlzLnZhcnMub25VcGRhdGVTY29wZXx8dGhpcyx0aGlzLnZhcnMub25VcGRhdGVQYXJhbXN8fGYpKSx0aGlzLl9jeWNsZSE9PWgmJihifHx0aGlzLl9nY3x8dGhpcy52YXJzLm9uUmVwZWF0JiZ0aGlzLnZhcnMub25SZXBlYXQuYXBwbHkodGhpcy52YXJzLm9uUmVwZWF0U2NvcGV8fHRoaXMsdGhpcy52YXJzLm9uUmVwZWF0UGFyYW1zfHxmKSksaiYmKHRoaXMuX2djfHwoaSYmKHRoaXMuX3RpbWVsaW5lLmF1dG9SZW1vdmVDaGlsZHJlbiYmdGhpcy5fZW5hYmxlZCghMSwhMSksdGhpcy5fYWN0aXZlPSExKSxifHx0aGlzLnZhcnNbal0mJnRoaXMudmFyc1tqXS5hcHBseSh0aGlzLnZhcnNbaitcIlNjb3BlXCJdfHx0aGlzLHRoaXMudmFyc1tqK1wiUGFyYW1zXCJdfHxmKSkpfSxkLnRvPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbmV3IGQoYSxiLGMpfSxkLmZyb209ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjLnJ1bkJhY2t3YXJkcz0hMCxjLmltbWVkaWF0ZVJlbmRlciE9PSExJiYoYy5pbW1lZGlhdGVSZW5kZXI9ITApLG5ldyBkKGEsYixjKX0sZC5mcm9tVG89ZnVuY3Rpb24oYSxiLGMsZSl7cmV0dXJuIGUuc3RhcnRBdD1jLGMuaW1tZWRpYXRlUmVuZGVyJiYoZS5pbW1lZGlhdGVSZW5kZXI9ITApLG5ldyBkKGEsYixlKX0sZC5zdGFnZ2VyVG89ZC5hbGxUbz1mdW5jdGlvbihhLGIsYyxlLGYsZyxoKXtlPWV8fDA7dmFyIGwsbSxuLGk9W10saj1hLmxlbmd0aCxrPWMuZGVsYXl8fDA7Zm9yKG09MDtqPm07bSsrKXtsPXt9O2ZvcihuIGluIGMpbFtuXT1jW25dO2wuZGVsYXk9ayxtPT09ai0xJiZmJiYobC5vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7Yy5vbkNvbXBsZXRlJiZjLm9uQ29tcGxldGUuYXBwbHkoYy5vbkNvbXBsZXRlU2NvcGUsYy5vbkNvbXBsZXRlUGFyYW1zKSxmLmFwcGx5KGgsZyl9KSxpW21dPW5ldyBkKGFbbV0sYixsKSxrKz1lfXJldHVybiBpfSxkLnN0YWdnZXJGcm9tPWQuYWxsRnJvbT1mdW5jdGlvbihhLGIsYyxlLGYsZyxoKXtyZXR1cm4gYy5ydW5CYWNrd2FyZHM9ITAsYy5pbW1lZGlhdGVSZW5kZXIhPT0hMSYmKGMuaW1tZWRpYXRlUmVuZGVyPSEwKSxkLnN0YWdnZXJUbyhhLGIsYyxlLGYsZyxoKX0sZC5zdGFnZ2VyRnJvbVRvPWQuYWxsRnJvbVRvPWZ1bmN0aW9uKGEsYixjLGUsZixnLGgsaSl7cmV0dXJuIGUuc3RhcnRBdD1jLGMuaW1tZWRpYXRlUmVuZGVyJiYoZS5pbW1lZGlhdGVSZW5kZXI9ITApLGQuc3RhZ2dlclRvKGEsYixlLGYsZyxoLGkpfSxkLmRlbGF5ZWRDYWxsPWZ1bmN0aW9uKGEsYixjLGUsZil7cmV0dXJuIG5ldyBkKGIsMCx7ZGVsYXk6YSxvbkNvbXBsZXRlOmIsb25Db21wbGV0ZVBhcmFtczpjLG9uQ29tcGxldGVTY29wZTplLG9uUmV2ZXJzZUNvbXBsZXRlOmIsb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6YyxvblJldmVyc2VDb21wbGV0ZVNjb3BlOmUsaW1tZWRpYXRlUmVuZGVyOiExLHVzZUZyYW1lczpmLG92ZXJ3cml0ZTowfSl9LGQuc2V0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBkKGEsMCxiKX0sZC5pc1R3ZWVuaW5nPWZ1bmN0aW9uKGEpe2Zvcih2YXIgZSxiPWMuZ2V0VHdlZW5zT2YoYSksZD1iLmxlbmd0aDstLWQ+LTE7KWlmKChlPWJbZF0pLl9hY3RpdmV8fGUuX3N0YXJ0VGltZT09PWUudGltZWxpbmUuX3RpbWUmJmUudGltZWxpbmUuX2FjdGl2ZSlyZXR1cm4hMDtyZXR1cm4hMX07dmFyIGc9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGQ9W10sZT0wLGY9YS5fZmlyc3Q7ZjspZiBpbnN0YW5jZW9mIGM/ZFtlKytdPWY6KGImJihkW2UrK109ZiksZD1kLmNvbmNhdChnKGYsYikpLGU9ZC5sZW5ndGgpLGY9Zi5fbmV4dDtyZXR1cm4gZH0saD1kLmdldEFsbFR3ZWVucz1mdW5jdGlvbihiKXt2YXIgYz1nKGEuX3Jvb3RUaW1lbGluZSxiKTtyZXR1cm4gYy5jb25jYXQoZyhhLl9yb290RnJhbWVzVGltZWxpbmUsYikpfTtkLmtpbGxBbGw9ZnVuY3Rpb24oYSxjLGQsZSl7bnVsbD09YyYmKGM9ITApLG51bGw9PWQmJihkPSEwKTt2YXIgaixrLGwsZj1oKDAhPWUpLGc9Zi5sZW5ndGgsaT1jJiZkJiZlO2ZvcihsPTA7Zz5sO2wrKylrPWZbbF0sKGl8fGsgaW5zdGFuY2VvZiBifHwoaj1rLnRhcmdldD09PWsudmFycy5vbkNvbXBsZXRlKSYmZHx8YyYmIWopJiYoYT9rLnRvdGFsVGltZShrLnRvdGFsRHVyYXRpb24oKSk6ay5fZW5hYmxlZCghMSwhMSkpfSxkLmtpbGxDaGlsZFR3ZWVuc09mPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9YSl7aWYoYS5qcXVlcnkpcmV0dXJuIGEuZWFjaChmdW5jdGlvbihhLGMpe2Qua2lsbENoaWxkVHdlZW5zT2YoYyxiKX0pLHZvaWQgMDt2YXIgZyxoLGksaixlPWMuX3R3ZWVuTG9va3VwLGY9W107Zm9yKGggaW4gZSlmb3IoZz1lW2hdLnRhcmdldC5wYXJlbnROb2RlO2c7KWc9PT1hJiYoZj1mLmNvbmNhdChlW2hdLnR3ZWVucykpLGc9Zy5wYXJlbnROb2RlO2ZvcihqPWYubGVuZ3RoLGk9MDtqPmk7aSsrKWImJmZbaV0udG90YWxUaW1lKGZbaV0udG90YWxEdXJhdGlvbigpKSxmW2ldLl9lbmFibGVkKCExLCExKX19LGQucGF1c2VBbGw9ZnVuY3Rpb24oYSxiLGMpe2koITAsYSxiLGMpfSxkLnJlc3VtZUFsbD1mdW5jdGlvbihhLGIsYyl7aSghMSxhLGIsYyl9O3ZhciBpPWZ1bmN0aW9uKGEsYyxkLGUpe3ZvaWQgMD09PWMmJihjPSEwKSx2b2lkIDA9PT1kJiYoZD0hMCk7Zm9yKHZhciBqLGssZj1oKGUpLGc9YyYmZCYmZSxpPWYubGVuZ3RoOy0taT4tMTspaz1mW2ldLChnfHxrIGluc3RhbmNlb2YgYnx8KGo9ay50YXJnZXQ9PT1rLnZhcnMub25Db21wbGV0ZSkmJmR8fGMmJiFqKSYmay5wYXVzZWQoYSl9O3JldHVybiBlLnByb2dyZXNzPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoP3RoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSoodGhpcy5feW95byYmMCE9PSgxJnRoaXMuX2N5Y2xlKT8xLWE6YSkrdGhpcy5fY3ljbGUqKHRoaXMuX2R1cmF0aW9uK3RoaXMuX3JlcGVhdERlbGF5KSwhMSk6dGhpcy5fdGltZS90aGlzLmR1cmF0aW9uKCl9LGUudG90YWxQcm9ncmVzcz1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD90aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSphLCExKTp0aGlzLl90b3RhbFRpbWUvdGhpcy50b3RhbER1cmF0aW9uKCl9LGUudGltZT1mdW5jdGlvbihhLGIpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9kaXJ0eSYmdGhpcy50b3RhbER1cmF0aW9uKCksYT50aGlzLl9kdXJhdGlvbiYmKGE9dGhpcy5fZHVyYXRpb24pLHRoaXMuX3lveW8mJjAhPT0oMSZ0aGlzLl9jeWNsZSk/YT10aGlzLl9kdXJhdGlvbi1hK3RoaXMuX2N5Y2xlKih0aGlzLl9kdXJhdGlvbit0aGlzLl9yZXBlYXREZWxheSk6MCE9PXRoaXMuX3JlcGVhdCYmKGErPXRoaXMuX2N5Y2xlKih0aGlzLl9kdXJhdGlvbit0aGlzLl9yZXBlYXREZWxheSkpLHRoaXMudG90YWxUaW1lKGEsYikpOnRoaXMuX3RpbWV9LGUudG90YWxEdXJhdGlvbj1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8tMT09PXRoaXMuX3JlcGVhdD90aGlzOnRoaXMuZHVyYXRpb24oKGEtdGhpcy5fcmVwZWF0KnRoaXMuX3JlcGVhdERlbGF5KS8odGhpcy5fcmVwZWF0KzEpKToodGhpcy5fZGlydHkmJih0aGlzLl90b3RhbER1cmF0aW9uPS0xPT09dGhpcy5fcmVwZWF0Pzk5OTk5OTk5OTk5OTp0aGlzLl9kdXJhdGlvbioodGhpcy5fcmVwZWF0KzEpK3RoaXMuX3JlcGVhdERlbGF5KnRoaXMuX3JlcGVhdCx0aGlzLl9kaXJ0eT0hMSksdGhpcy5fdG90YWxEdXJhdGlvbil9LGUucmVwZWF0PWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9yZXBlYXQ9YSx0aGlzLl91bmNhY2hlKCEwKSk6dGhpcy5fcmVwZWF0fSxlLnJlcGVhdERlbGF5PWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9yZXBlYXREZWxheT1hLHRoaXMuX3VuY2FjaGUoITApKTp0aGlzLl9yZXBlYXREZWxheX0sZS55b3lvPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl95b3lvPWEsdGhpcyk6dGhpcy5feW95b30sZH0sITApLF9nc0RlZmluZShcIlRpbWVsaW5lTGl0ZVwiLFtcImNvcmUuQW5pbWF0aW9uXCIsXCJjb3JlLlNpbXBsZVRpbWVsaW5lXCIsXCJUd2VlbkxpdGVcIl0sZnVuY3Rpb24oYSxiLGMpe1widXNlIHN0cmljdFwiO3ZhciBkPWZ1bmN0aW9uKGEpe2IuY2FsbCh0aGlzLGEpLHRoaXMuX2xhYmVscz17fSx0aGlzLmF1dG9SZW1vdmVDaGlsZHJlbj10aGlzLnZhcnMuYXV0b1JlbW92ZUNoaWxkcmVuPT09ITAsdGhpcy5zbW9vdGhDaGlsZFRpbWluZz10aGlzLnZhcnMuc21vb3RoQ2hpbGRUaW1pbmc9PT0hMCx0aGlzLl9zb3J0Q2hpbGRyZW49ITAsdGhpcy5fb25VcGRhdGU9dGhpcy52YXJzLm9uVXBkYXRlO2Zvcih2YXIgZCxmLGM9ZS5sZW5ndGg7LS1jPi0xOylpZihmPXRoaXMudmFyc1tlW2NdXSlmb3IoZD1mLmxlbmd0aDstLWQ+LTE7KVwie3NlbGZ9XCI9PT1mW2RdJiYoZj10aGlzLnZhcnNbZVtjXV09Zi5jb25jYXQoKSxmW2RdPXRoaXMpO3RoaXMudmFycy50d2VlbnMgaW5zdGFuY2VvZiBBcnJheSYmdGhpcy5hZGQodGhpcy52YXJzLnR3ZWVucywwLHRoaXMudmFycy5hbGlnbix0aGlzLnZhcnMuc3RhZ2dlcil9LGU9W1wib25TdGFydFBhcmFtc1wiLFwib25VcGRhdGVQYXJhbXNcIixcIm9uQ29tcGxldGVQYXJhbXNcIixcIm9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zXCIsXCJvblJlcGVhdFBhcmFtc1wiXSxmPVtdLGc9ZnVuY3Rpb24oYSl7dmFyIGMsYj17fTtmb3IoYyBpbiBhKWJbY109YVtjXTtyZXR1cm4gYn0saD1kLnByb3RvdHlwZT1uZXcgYjtyZXR1cm4gZC52ZXJzaW9uPVwiMS44LjBcIixoLmNvbnN0cnVjdG9yPWQsaC5raWxsKCkuX2djPSExLGgudG89ZnVuY3Rpb24oYSxiLGQsZSl7cmV0dXJuIHRoaXMuYWRkKG5ldyBjKGEsYixkKSxlKX0saC5mcm9tPWZ1bmN0aW9uKGEsYixkLGUpe3JldHVybiB0aGlzLmFkZChjLmZyb20oYSxiLGQpLGUpfSxoLmZyb21Ubz1mdW5jdGlvbihhLGIsZCxlLGYpe3JldHVybiB0aGlzLmFkZChjLmZyb21UbyhhLGIsZCxlKSxmKX0saC5zdGFnZ2VyVG89ZnVuY3Rpb24oYSxiLGUsZixoLGksaixrKXt2YXIgbD1uZXcgZCh7b25Db21wbGV0ZTppLG9uQ29tcGxldGVQYXJhbXM6aixvbkNvbXBsZXRlU2NvcGU6a30pO2Y9Znx8MDtmb3IodmFyIG09MDthLmxlbmd0aD5tO20rKyludWxsIT1lLnN0YXJ0QXQmJihlLnN0YXJ0QXQ9ZyhlLnN0YXJ0QXQpKSxsLmFkZChuZXcgYyhhW21dLGIsZyhlKSksbSpmKTtyZXR1cm4gdGhpcy5hZGQobCxoKX0saC5zdGFnZ2VyRnJvbT1mdW5jdGlvbihhLGIsYyxkLGUsZixnLGgpe3JldHVybiBudWxsPT1jLmltbWVkaWF0ZVJlbmRlciYmKGMuaW1tZWRpYXRlUmVuZGVyPSEwKSxjLnJ1bkJhY2t3YXJkcz0hMCx0aGlzLnN0YWdnZXJUbyhhLGIsYyxkLGUsZixnLGgpfSxoLnN0YWdnZXJGcm9tVG89ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGkpe3JldHVybiBkLnN0YXJ0QXQ9YyxjLmltbWVkaWF0ZVJlbmRlciYmKGQuaW1tZWRpYXRlUmVuZGVyPSEwKSx0aGlzLnN0YWdnZXJUbyhhLGIsZCxlLGYsZyxoLGkpfSxoLmNhbGw9ZnVuY3Rpb24oYSxiLGQsZSl7cmV0dXJuIHRoaXMuYWRkKGMuZGVsYXllZENhbGwoMCxhLGIsZCksZSl9LGguc2V0PWZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gYi5pbW1lZGlhdGVSZW5kZXI9ITEsdGhpcy5hZGQobmV3IGMoYSwwLGIpLGQpfSxkLmV4cG9ydFJvb3Q9ZnVuY3Rpb24oYSxiKXthPWF8fHt9LG51bGw9PWEuc21vb3RoQ2hpbGRUaW1pbmcmJihhLnNtb290aENoaWxkVGltaW5nPSEwKTt2YXIgZT1uZXcgZChhKSxmPWUuX3RpbWVsaW5lO251bGw9PWImJihiPSEwKSxmLl9yZW1vdmUoZSwhMCksZS5fc3RhcnRUaW1lPTAsZS5fcmF3UHJldlRpbWU9ZS5fdGltZT1lLl90b3RhbFRpbWU9Zi5fdGltZTtmb3IodmFyIGgsZz1mLl9maXJzdDtnOyloPWcuX25leHQsYiYmZyBpbnN0YW5jZW9mIGMmJmcudGFyZ2V0PT09Zy52YXJzLm9uQ29tcGxldGV8fGUuYWRkKGcsZy5fc3RhcnRUaW1lLWcuX2RlbGF5KSxnPWg7cmV0dXJuIGYuYWRkKGUsMCksZX0saC5hZGQ9ZnVuY3Rpb24oZSxmLGcsaCl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGYmJihmPXRoaXMuX3BhcnNlVGltZU9yTGFiZWwoZiwwLCEwLGUpKSxlIGluc3RhbmNlb2YgYSk7ZWxzZXtpZihlIGluc3RhbmNlb2YgQXJyYXkpe2c9Z3x8XCJub3JtYWxcIixoPWh8fDA7dmFyIGssbCxpPWYsaj1lLmxlbmd0aDtmb3Ioaz0wO2o+aztrKyspKGw9ZVtrXSlpbnN0YW5jZW9mIEFycmF5JiYobD1uZXcgZCh7dHdlZW5zOmx9KSksdGhpcy5hZGQobCxpKSxcInN0cmluZ1wiIT10eXBlb2YgbCYmXCJmdW5jdGlvblwiIT10eXBlb2YgbCYmKFwic2VxdWVuY2VcIj09PWc/aT1sLl9zdGFydFRpbWUrbC50b3RhbER1cmF0aW9uKCkvbC5fdGltZVNjYWxlOlwic3RhcnRcIj09PWcmJihsLl9zdGFydFRpbWUtPWwuZGVsYXkoKSkpLGkrPWg7cmV0dXJuIHRoaXMuX3VuY2FjaGUoITApfWlmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiB0aGlzLmFkZExhYmVsKGUsZik7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvd1wiQ2Fubm90IGFkZCBcIitlK1wiIGludG8gdGhlIFRpbWVsaW5lTGl0ZS9NYXg6IGl0IGlzIG5laXRoZXIgYSB0d2VlbiwgdGltZWxpbmUsIGZ1bmN0aW9uLCBub3IgYSBTdHJpbmcuXCI7ZT1jLmRlbGF5ZWRDYWxsKDAsZSl9aWYoYi5wcm90b3R5cGUuYWRkLmNhbGwodGhpcyxlLGYpLHRoaXMuX2djJiYhdGhpcy5fcGF1c2VkJiZ0aGlzLl90aW1lPT09dGhpcy5fZHVyYXRpb24mJnRoaXMuX3RpbWU8dGhpcy5kdXJhdGlvbigpKWZvcih2YXIgbT10aGlzO20uX2djJiZtLl90aW1lbGluZTspbS5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmc/bS50b3RhbFRpbWUobS5fdG90YWxUaW1lLCEwKTptLl9lbmFibGVkKCEwLCExKSxtPW0uX3RpbWVsaW5lO3JldHVybiB0aGlzfSxoLnJlbW92ZT1mdW5jdGlvbihiKXtpZihiIGluc3RhbmNlb2YgYSlyZXR1cm4gdGhpcy5fcmVtb3ZlKGIsITEpO2lmKGIgaW5zdGFuY2VvZiBBcnJheSl7Zm9yKHZhciBjPWIubGVuZ3RoOy0tYz4tMTspdGhpcy5yZW1vdmUoYltjXSk7cmV0dXJuIHRoaXN9cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGI/dGhpcy5yZW1vdmVMYWJlbChiKTp0aGlzLmtpbGwobnVsbCxiKX0saC5hcHBlbmQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5hZGQoYSx0aGlzLl9wYXJzZVRpbWVPckxhYmVsKG51bGwsYiwhMCxhKSl9LGguaW5zZXJ0PWguaW5zZXJ0TXVsdGlwbGU9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMuYWRkKGEsYnx8MCxjLGQpfSxoLmFwcGVuZE11bHRpcGxlPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmFkZChhLHRoaXMuX3BhcnNlVGltZU9yTGFiZWwobnVsbCxiLCEwLGEpLGMsZCl9LGguYWRkTGFiZWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5fbGFiZWxzW2FdPXRoaXMuX3BhcnNlVGltZU9yTGFiZWwoYiksdGhpc30saC5yZW1vdmVMYWJlbD1mdW5jdGlvbihhKXtyZXR1cm4gZGVsZXRlIHRoaXMuX2xhYmVsc1thXSx0aGlzfSxoLmdldExhYmVsVGltZT1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9dGhpcy5fbGFiZWxzW2FdP3RoaXMuX2xhYmVsc1thXTotMX0saC5fcGFyc2VUaW1lT3JMYWJlbD1mdW5jdGlvbihiLGMsZCxlKXt2YXIgZjtpZihlIGluc3RhbmNlb2YgYSYmZS50aW1lbGluZT09PXRoaXMpdGhpcy5yZW1vdmUoZSk7ZWxzZSBpZihlIGluc3RhbmNlb2YgQXJyYXkpZm9yKGY9ZS5sZW5ndGg7LS1mPi0xOyllW2ZdaW5zdGFuY2VvZiBhJiZlW2ZdLnRpbWVsaW5lPT09dGhpcyYmdGhpcy5yZW1vdmUoZVtmXSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGMpcmV0dXJuIHRoaXMuX3BhcnNlVGltZU9yTGFiZWwoYyxkJiZcIm51bWJlclwiPT10eXBlb2YgYiYmbnVsbD09dGhpcy5fbGFiZWxzW2NdP2ItdGhpcy5kdXJhdGlvbigpOjAsZCk7aWYoYz1jfHwwLFwic3RyaW5nXCIhPXR5cGVvZiBifHwhaXNOYU4oYikmJm51bGw9PXRoaXMuX2xhYmVsc1tiXSludWxsPT1iJiYoYj10aGlzLmR1cmF0aW9uKCkpO2Vsc2V7aWYoZj1iLmluZGV4T2YoXCI9XCIpLC0xPT09ZilyZXR1cm4gbnVsbD09dGhpcy5fbGFiZWxzW2JdP2Q/dGhpcy5fbGFiZWxzW2JdPXRoaXMuZHVyYXRpb24oKStjOmM6dGhpcy5fbGFiZWxzW2JdK2M7Yz1wYXJzZUludChiLmNoYXJBdChmLTEpK1wiMVwiLDEwKSpOdW1iZXIoYi5zdWJzdHIoZisxKSksYj1mPjE/dGhpcy5fcGFyc2VUaW1lT3JMYWJlbChiLnN1YnN0cigwLGYtMSksMCxkKTp0aGlzLmR1cmF0aW9uKCl9cmV0dXJuIE51bWJlcihiKStjfSxoLnNlZWs9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy50b3RhbFRpbWUoXCJudW1iZXJcIj09dHlwZW9mIGE/YTp0aGlzLl9wYXJzZVRpbWVPckxhYmVsKGEpLGIhPT0hMSl9LGguc3RvcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhdXNlZCghMCl9LGguZ290b0FuZFBsYXk9ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYi5wcm90b3R5cGUucGxheS5jYWxsKHRoaXMsYSxjKX0saC5nb3RvQW5kU3RvcD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnBhdXNlKGEsYil9LGgucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXt0aGlzLl9nYyYmdGhpcy5fZW5hYmxlZCghMCwhMSksdGhpcy5fYWN0aXZlPSF0aGlzLl9wYXVzZWQ7dmFyIGosayxsLG0sZD10aGlzLl9kaXJ0eT90aGlzLnRvdGFsRHVyYXRpb24oKTp0aGlzLl90b3RhbER1cmF0aW9uLGU9dGhpcy5fdGltZSxnPXRoaXMuX3N0YXJ0VGltZSxoPXRoaXMuX3RpbWVTY2FsZSxpPXRoaXMuX3BhdXNlZDtpZihhPj1kPyh0aGlzLl90b3RhbFRpbWU9dGhpcy5fdGltZT1kLHRoaXMuX3JldmVyc2VkfHx0aGlzLl9oYXNQYXVzZWRDaGlsZCgpfHwoaz0hMCxtPVwib25Db21wbGV0ZVwiLDA9PT10aGlzLl9kdXJhdGlvbiYmKDA9PT1hfHwwPnRoaXMuX3Jhd1ByZXZUaW1lKSYmdGhpcy5fcmF3UHJldlRpbWUhPT1hJiYoYz0hMCkpLHRoaXMuX3Jhd1ByZXZUaW1lPWEsYT1kKzFlLTYpOjA+PWE/KHRoaXMuX3RvdGFsVGltZT10aGlzLl90aW1lPTAsKDAhPT1lfHwwPT09dGhpcy5fZHVyYXRpb24mJnRoaXMuX3Jhd1ByZXZUaW1lPjApJiYobT1cIm9uUmV2ZXJzZUNvbXBsZXRlXCIsaz10aGlzLl9yZXZlcnNlZCksMD5hPyh0aGlzLl9hY3RpdmU9ITEsMD09PXRoaXMuX2R1cmF0aW9uJiZ0aGlzLl9yYXdQcmV2VGltZT49MCYmKGM9ITApKTp0aGlzLl9pbml0dGVkfHwoYz0hMCksdGhpcy5fcmF3UHJldlRpbWU9YSxhPS0xZS02KTp0aGlzLl90b3RhbFRpbWU9dGhpcy5fdGltZT10aGlzLl9yYXdQcmV2VGltZT1hLHRoaXMuX3RpbWUhPT1lfHxjKXtpZih0aGlzLl9pbml0dGVkfHwodGhpcy5faW5pdHRlZD0hMCksMD09PWUmJnRoaXMudmFycy5vblN0YXJ0JiYwIT09dGhpcy5fdGltZSYmKGJ8fHRoaXMudmFycy5vblN0YXJ0LmFwcGx5KHRoaXMudmFycy5vblN0YXJ0U2NvcGV8fHRoaXMsdGhpcy52YXJzLm9uU3RhcnRQYXJhbXN8fGYpKSx0aGlzLl90aW1lPmUpZm9yKGo9dGhpcy5fZmlyc3Q7aiYmKGw9ai5fbmV4dCwhdGhpcy5fcGF1c2VkfHxpKTspKGouX2FjdGl2ZXx8ai5fc3RhcnRUaW1lPD10aGlzLl90aW1lJiYhai5fcGF1c2VkJiYhai5fZ2MpJiYoai5fcmV2ZXJzZWQ/ai5yZW5kZXIoKGouX2RpcnR5P2oudG90YWxEdXJhdGlvbigpOmouX3RvdGFsRHVyYXRpb24pLShhLWouX3N0YXJ0VGltZSkqai5fdGltZVNjYWxlLGIsITEpOmoucmVuZGVyKChhLWouX3N0YXJ0VGltZSkqai5fdGltZVNjYWxlLGIsITEpKSxqPWw7ZWxzZSBmb3Ioaj10aGlzLl9sYXN0O2omJihsPWouX3ByZXYsIXRoaXMuX3BhdXNlZHx8aSk7KShqLl9hY3RpdmV8fGU+PWouX3N0YXJ0VGltZSYmIWouX3BhdXNlZCYmIWouX2djKSYmKGouX3JldmVyc2VkP2oucmVuZGVyKChqLl9kaXJ0eT9qLnRvdGFsRHVyYXRpb24oKTpqLl90b3RhbER1cmF0aW9uKS0oYS1qLl9zdGFydFRpbWUpKmouX3RpbWVTY2FsZSxiLCExKTpqLnJlbmRlcigoYS1qLl9zdGFydFRpbWUpKmouX3RpbWVTY2FsZSxiLCExKSksaj1sO3RoaXMuX29uVXBkYXRlJiYoYnx8dGhpcy5fb25VcGRhdGUuYXBwbHkodGhpcy52YXJzLm9uVXBkYXRlU2NvcGV8fHRoaXMsdGhpcy52YXJzLm9uVXBkYXRlUGFyYW1zfHxmKSksbSYmKHRoaXMuX2djfHwoZz09PXRoaXMuX3N0YXJ0VGltZXx8aCE9dGhpcy5fdGltZVNjYWxlKSYmKDA9PT10aGlzLl90aW1lfHxkPj10aGlzLnRvdGFsRHVyYXRpb24oKSkmJihrJiYodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuJiZ0aGlzLl9lbmFibGVkKCExLCExKSx0aGlzLl9hY3RpdmU9ITEpLGJ8fHRoaXMudmFyc1ttXSYmdGhpcy52YXJzW21dLmFwcGx5KHRoaXMudmFyc1ttK1wiU2NvcGVcIl18fHRoaXMsdGhpcy52YXJzW20rXCJQYXJhbXNcIl18fGYpKSl9fSxoLl9oYXNQYXVzZWRDaGlsZD1mdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl9maXJzdDthOyl7aWYoYS5fcGF1c2VkfHxhIGluc3RhbmNlb2YgZCYmYS5faGFzUGF1c2VkQ2hpbGQoKSlyZXR1cm4hMDthPWEuX25leHR9cmV0dXJuITF9LGguZ2V0Q2hpbGRyZW49ZnVuY3Rpb24oYSxiLGQsZSl7ZT1lfHwtOTk5OTk5OTk5OTtmb3IodmFyIGY9W10sZz10aGlzLl9maXJzdCxoPTA7ZzspZT5nLl9zdGFydFRpbWV8fChnIGluc3RhbmNlb2YgYz9iIT09ITEmJihmW2grK109Zyk6KGQhPT0hMSYmKGZbaCsrXT1nKSxhIT09ITEmJihmPWYuY29uY2F0KGcuZ2V0Q2hpbGRyZW4oITAsYixkKSksaD1mLmxlbmd0aCkpKSxnPWcuX25leHQ7cmV0dXJuIGZ9LGguZ2V0VHdlZW5zT2Y9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGQ9Yy5nZXRUd2VlbnNPZihhKSxlPWQubGVuZ3RoLGY9W10sZz0wOy0tZT4tMTspKGRbZV0udGltZWxpbmU9PT10aGlzfHxiJiZ0aGlzLl9jb250YWlucyhkW2VdKSkmJihmW2crK109ZFtlXSk7cmV0dXJuIGZ9LGguX2NvbnRhaW5zPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLnRpbWVsaW5lO2I7KXtpZihiPT09dGhpcylyZXR1cm4hMDtiPWIudGltZWxpbmV9cmV0dXJuITF9LGguc2hpZnRDaGlsZHJlbj1mdW5jdGlvbihhLGIsYyl7Yz1jfHwwO2Zvcih2YXIgZD10aGlzLl9maXJzdDtkOylkLl9zdGFydFRpbWU+PWMmJihkLl9zdGFydFRpbWUrPWEpLGQ9ZC5fbmV4dDtpZihiKWZvcih2YXIgZSBpbiB0aGlzLl9sYWJlbHMpdGhpcy5fbGFiZWxzW2VdPj1jJiYodGhpcy5fbGFiZWxzW2VdKz1hKTtyZXR1cm4gdGhpcy5fdW5jYWNoZSghMCl9LGguX2tpbGw9ZnVuY3Rpb24oYSxiKXtpZihudWxsPT1hJiZudWxsPT1iKXJldHVybiB0aGlzLl9lbmFibGVkKCExLCExKTtmb3IodmFyIGM9bnVsbD09Yj90aGlzLmdldENoaWxkcmVuKCEwLCEwLCExKTp0aGlzLmdldFR3ZWVuc09mKGIpLGQ9Yy5sZW5ndGgsZT0hMTstLWQ+LTE7KWNbZF0uX2tpbGwoYSxiKSYmKGU9ITApO3JldHVybiBlfSxoLmNsZWFyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZ2V0Q2hpbGRyZW4oITEsITAsITApLGM9Yi5sZW5ndGg7Zm9yKHRoaXMuX3RpbWU9dGhpcy5fdG90YWxUaW1lPTA7LS1jPi0xOyliW2NdLl9lbmFibGVkKCExLCExKTtyZXR1cm4gYSE9PSExJiYodGhpcy5fbGFiZWxzPXt9KSx0aGlzLl91bmNhY2hlKCEwKX0saC5pbnZhbGlkYXRlPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuX2ZpcnN0O2E7KWEuaW52YWxpZGF0ZSgpLGE9YS5fbmV4dDtyZXR1cm4gdGhpc30saC5fZW5hYmxlZD1mdW5jdGlvbihhLGMpe2lmKGE9PT10aGlzLl9nYylmb3IodmFyIGQ9dGhpcy5fZmlyc3Q7ZDspZC5fZW5hYmxlZChhLCEwKSxkPWQuX25leHQ7cmV0dXJuIGIucHJvdG90eXBlLl9lbmFibGVkLmNhbGwodGhpcyxhLGMpfSxoLnByb2dyZXNzPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoP3RoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSphLCExKTp0aGlzLl90aW1lL3RoaXMuZHVyYXRpb24oKX0saC5kdXJhdGlvbj1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oMCE9PXRoaXMuZHVyYXRpb24oKSYmMCE9PWEmJnRoaXMudGltZVNjYWxlKHRoaXMuX2R1cmF0aW9uL2EpLHRoaXMpOih0aGlzLl9kaXJ0eSYmdGhpcy50b3RhbER1cmF0aW9uKCksdGhpcy5fZHVyYXRpb24pfSxoLnRvdGFsRHVyYXRpb249ZnVuY3Rpb24oYSl7aWYoIWFyZ3VtZW50cy5sZW5ndGgpe2lmKHRoaXMuX2RpcnR5KXtmb3IodmFyIGUsZixiPTAsYz10aGlzLl9maXJzdCxkPS05OTk5OTk5OTk5OTk7YzspZT1jLl9uZXh0LGQ+Yy5fc3RhcnRUaW1lJiZ0aGlzLl9zb3J0Q2hpbGRyZW4/dGhpcy5hZGQoYyxjLl9zdGFydFRpbWUtYy5fZGVsYXkpOmQ9Yy5fc3RhcnRUaW1lLDA+Yy5fc3RhcnRUaW1lJiYoYi09Yy5fc3RhcnRUaW1lLHRoaXMuc2hpZnRDaGlsZHJlbigtYy5fc3RhcnRUaW1lLCExLC05OTk5OTk5OTk5KSksZj1jLl9zdGFydFRpbWUrKGMuX2RpcnR5P2MudG90YWxEdXJhdGlvbigpOmMuX3RvdGFsRHVyYXRpb24pL2MuX3RpbWVTY2FsZSxmPmImJihiPWYpLGM9ZTt0aGlzLl9kdXJhdGlvbj10aGlzLl90b3RhbER1cmF0aW9uPWIsdGhpcy5fZGlydHk9ITF9cmV0dXJuIHRoaXMuX3RvdGFsRHVyYXRpb259cmV0dXJuIDAhPT10aGlzLnRvdGFsRHVyYXRpb24oKSYmMCE9PWEmJnRoaXMudGltZVNjYWxlKHRoaXMuX3RvdGFsRHVyYXRpb24vYSksdGhpc30saC51c2VzRnJhbWVzPWZ1bmN0aW9uKCl7Zm9yKHZhciBiPXRoaXMuX3RpbWVsaW5lO2IuX3RpbWVsaW5lOyliPWIuX3RpbWVsaW5lO3JldHVybiBiPT09YS5fcm9vdEZyYW1lc1RpbWVsaW5lfSxoLnJhd1RpbWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcGF1c2VkfHwwIT09dGhpcy5fdG90YWxUaW1lJiZ0aGlzLl90b3RhbFRpbWUhPT10aGlzLl90b3RhbER1cmF0aW9uP3RoaXMuX3RvdGFsVGltZToodGhpcy5fdGltZWxpbmUucmF3VGltZSgpLXRoaXMuX3N0YXJ0VGltZSkqdGhpcy5fdGltZVNjYWxlfSxkfSwhMCksX2dzRGVmaW5lKFwiVGltZWxpbmVNYXhcIixbXCJUaW1lbGluZUxpdGVcIixcIlR3ZWVuTGl0ZVwiLFwiZWFzaW5nLkVhc2VcIl0sZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWZ1bmN0aW9uKGIpe2EuY2FsbCh0aGlzLGIpLHRoaXMuX3JlcGVhdD10aGlzLnZhcnMucmVwZWF0fHwwLHRoaXMuX3JlcGVhdERlbGF5PXRoaXMudmFycy5yZXBlYXREZWxheXx8MCx0aGlzLl9jeWNsZT0wLHRoaXMuX3lveW89dGhpcy52YXJzLnlveW89PT0hMCx0aGlzLl9kaXJ0eT0hMH0sZT1bXSxmPW5ldyBjKG51bGwsbnVsbCwxLDApLGc9ZnVuY3Rpb24oYSl7Zm9yKDthOyl7aWYoYS5fcGF1c2VkKXJldHVybiEwO2E9YS5fdGltZWxpbmV9cmV0dXJuITF9LGg9ZC5wcm90b3R5cGU9bmV3IGE7cmV0dXJuIGguY29uc3RydWN0b3I9ZCxoLmtpbGwoKS5fZ2M9ITEsZC52ZXJzaW9uPVwiMS44LjBcIixoLmludmFsaWRhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5feW95bz10aGlzLnZhcnMueW95bz09PSEwLHRoaXMuX3JlcGVhdD10aGlzLnZhcnMucmVwZWF0fHwwLHRoaXMuX3JlcGVhdERlbGF5PXRoaXMudmFycy5yZXBlYXREZWxheXx8MCx0aGlzLl91bmNhY2hlKCEwKSxhLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcyl9LGguYWRkQ2FsbGJhY2s9ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIHRoaXMuYWRkKGIuZGVsYXllZENhbGwoMCxhLGQsZSksYyl9LGgucmVtb3ZlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtpZihudWxsPT1iKXRoaXMuX2tpbGwobnVsbCxhKTtlbHNlIGZvcih2YXIgYz10aGlzLmdldFR3ZWVuc09mKGEsITEpLGQ9Yy5sZW5ndGgsZT10aGlzLl9wYXJzZVRpbWVPckxhYmVsKGIpOy0tZD4tMTspY1tkXS5fc3RhcnRUaW1lPT09ZSYmY1tkXS5fZW5hYmxlZCghMSwhMSk7cmV0dXJuIHRoaXN9LGgudHdlZW5Ubz1mdW5jdGlvbihhLGMpe2M9Y3x8e307dmFyIGcsaCxkPXtlYXNlOmYsb3ZlcndyaXRlOjIsdXNlRnJhbWVzOnRoaXMudXNlc0ZyYW1lcygpLGltbWVkaWF0ZVJlbmRlcjohMX07Zm9yKGcgaW4gYylkW2ddPWNbZ107cmV0dXJuIGQudGltZT10aGlzLl9wYXJzZVRpbWVPckxhYmVsKGEpLGg9bmV3IGIodGhpcyxNYXRoLmFicyhOdW1iZXIoZC50aW1lKS10aGlzLl90aW1lKS90aGlzLl90aW1lU2NhbGV8fC4wMDEsZCksZC5vblN0YXJ0PWZ1bmN0aW9uKCl7aC50YXJnZXQucGF1c2VkKCEwKSxoLnZhcnMudGltZSE9PWgudGFyZ2V0LnRpbWUoKSYmaC5kdXJhdGlvbihNYXRoLmFicyhoLnZhcnMudGltZS1oLnRhcmdldC50aW1lKCkpL2gudGFyZ2V0Ll90aW1lU2NhbGUpLGMub25TdGFydCYmYy5vblN0YXJ0LmFwcGx5KGMub25TdGFydFNjb3BlfHxoLGMub25TdGFydFBhcmFtc3x8ZSl9LGh9LGgudHdlZW5Gcm9tVG89ZnVuY3Rpb24oYSxiLGMpe2M9Y3x8e30sYy5zdGFydEF0PXt0aW1lOnRoaXMuX3BhcnNlVGltZU9yTGFiZWwoYSl9O3ZhciBkPXRoaXMudHdlZW5UbyhiLGMpO3JldHVybiBkLmR1cmF0aW9uKE1hdGguYWJzKGQudmFycy50aW1lLWQudmFycy5zdGFydEF0LnRpbWUpL3RoaXMuX3RpbWVTY2FsZXx8LjAwMSl9LGgucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXt0aGlzLl9nYyYmdGhpcy5fZW5hYmxlZCghMCwhMSksdGhpcy5fYWN0aXZlPSF0aGlzLl9wYXVzZWQ7dmFyIG0sbixvLHEsZD10aGlzLl9kaXJ0eT90aGlzLnRvdGFsRHVyYXRpb24oKTp0aGlzLl90b3RhbER1cmF0aW9uLGY9dGhpcy5fdGltZSxnPXRoaXMuX3RvdGFsVGltZSxoPXRoaXMuX3N0YXJ0VGltZSxpPXRoaXMuX3RpbWVTY2FsZSxqPXRoaXMuX3Jhd1ByZXZUaW1lLGs9dGhpcy5fcGF1c2VkLGw9dGhpcy5fY3ljbGU7aWYoYT49ZCl0aGlzLl9sb2NrZWR8fCh0aGlzLl90b3RhbFRpbWU9ZCx0aGlzLl9jeWNsZT10aGlzLl9yZXBlYXQpLHRoaXMuX3JldmVyc2VkfHx0aGlzLl9oYXNQYXVzZWRDaGlsZCgpfHwobj0hMCxxPVwib25Db21wbGV0ZVwiLDA9PT10aGlzLl9kdXJhdGlvbiYmKDA9PT1hfHwwPnRoaXMuX3Jhd1ByZXZUaW1lKSYmdGhpcy5fcmF3UHJldlRpbWUhPT1hJiYoYz0hMCkpLHRoaXMuX3Jhd1ByZXZUaW1lPWEsdGhpcy5feW95byYmMCE9PSgxJnRoaXMuX2N5Y2xlKT8odGhpcy5fdGltZT0wLGE9LTFlLTYpOih0aGlzLl90aW1lPXRoaXMuX2R1cmF0aW9uLGE9dGhpcy5fZHVyYXRpb24rMWUtNik7ZWxzZSBpZigwPj1hKXRoaXMuX2xvY2tlZHx8KHRoaXMuX3RvdGFsVGltZT10aGlzLl9jeWNsZT0wKSx0aGlzLl90aW1lPTAsKDAhPT1mfHwwPT09dGhpcy5fZHVyYXRpb24mJnRoaXMuX3Jhd1ByZXZUaW1lPjAmJiF0aGlzLl9sb2NrZWQpJiYocT1cIm9uUmV2ZXJzZUNvbXBsZXRlXCIsbj10aGlzLl9yZXZlcnNlZCksMD5hPyh0aGlzLl9hY3RpdmU9ITEsMD09PXRoaXMuX2R1cmF0aW9uJiZ0aGlzLl9yYXdQcmV2VGltZT49MCYmKGM9ITApKTp0aGlzLl9pbml0dGVkfHwoYz0hMCksdGhpcy5fcmF3UHJldlRpbWU9YSxhPTA9PT10aGlzLl9kdXJhdGlvbj8wOi0xZS02O2Vsc2UgaWYodGhpcy5fdGltZT10aGlzLl9yYXdQcmV2VGltZT1hLCF0aGlzLl9sb2NrZWQmJih0aGlzLl90b3RhbFRpbWU9YSwwIT09dGhpcy5fcmVwZWF0KSl7dmFyIHI9dGhpcy5fZHVyYXRpb24rdGhpcy5fcmVwZWF0RGVsYXk7dGhpcy5fY3ljbGU9dGhpcy5fdG90YWxUaW1lL3I+PjAsMCE9PXRoaXMuX2N5Y2xlJiZ0aGlzLl9jeWNsZT09PXRoaXMuX3RvdGFsVGltZS9yJiZ0aGlzLl9jeWNsZS0tLHRoaXMuX3RpbWU9dGhpcy5fdG90YWxUaW1lLXRoaXMuX2N5Y2xlKnIsdGhpcy5feW95byYmMCE9PSgxJnRoaXMuX2N5Y2xlKSYmKHRoaXMuX3RpbWU9dGhpcy5fZHVyYXRpb24tdGhpcy5fdGltZSksdGhpcy5fdGltZT50aGlzLl9kdXJhdGlvbj8odGhpcy5fdGltZT10aGlzLl9kdXJhdGlvbixhPXRoaXMuX2R1cmF0aW9uKzFlLTYpOjA+dGhpcy5fdGltZT90aGlzLl90aW1lPWE9MDphPXRoaXMuX3RpbWV9aWYodGhpcy5fY3ljbGUhPT1sJiYhdGhpcy5fbG9ja2VkKXt2YXIgcz10aGlzLl95b3lvJiYwIT09KDEmbCksdD1zPT09KHRoaXMuX3lveW8mJjAhPT0oMSZ0aGlzLl9jeWNsZSkpLHU9dGhpcy5fdG90YWxUaW1lLHY9dGhpcy5fY3ljbGUsdz10aGlzLl9yYXdQcmV2VGltZSx4PXRoaXMuX3RpbWU7dGhpcy5fdG90YWxUaW1lPWwqdGhpcy5fZHVyYXRpb24sbD50aGlzLl9jeWNsZT9zPSFzOnRoaXMuX3RvdGFsVGltZSs9dGhpcy5fZHVyYXRpb24sdGhpcy5fdGltZT1mLHRoaXMuX3Jhd1ByZXZUaW1lPTA9PT10aGlzLl9kdXJhdGlvbj9qLTFlLTU6aix0aGlzLl9jeWNsZT1sLHRoaXMuX2xvY2tlZD0hMCxmPXM/MDp0aGlzLl9kdXJhdGlvbix0aGlzLnJlbmRlcihmLGIsMD09PXRoaXMuX2R1cmF0aW9uKSxifHx0aGlzLl9nY3x8dGhpcy52YXJzLm9uUmVwZWF0JiZ0aGlzLnZhcnMub25SZXBlYXQuYXBwbHkodGhpcy52YXJzLm9uUmVwZWF0U2NvcGV8fHRoaXMsdGhpcy52YXJzLm9uUmVwZWF0UGFyYW1zfHxlKSx0JiYoZj1zP3RoaXMuX2R1cmF0aW9uKzFlLTY6LTFlLTYsdGhpcy5yZW5kZXIoZiwhMCwhMSkpLHRoaXMuX3RpbWU9eCx0aGlzLl90b3RhbFRpbWU9dSx0aGlzLl9jeWNsZT12LHRoaXMuX3Jhd1ByZXZUaW1lPXcsdGhpcy5fbG9ja2VkPSExfWlmKHRoaXMuX3RpbWU9PT1mJiYhYylyZXR1cm4gZyE9PXRoaXMuX3RvdGFsVGltZSYmdGhpcy5fb25VcGRhdGUmJihifHx0aGlzLl9vblVwZGF0ZS5hcHBseSh0aGlzLnZhcnMub25VcGRhdGVTY29wZXx8dGhpcyx0aGlzLnZhcnMub25VcGRhdGVQYXJhbXN8fGUpKSx2b2lkIDA7aWYodGhpcy5faW5pdHRlZHx8KHRoaXMuX2luaXR0ZWQ9ITApLDA9PT1nJiZ0aGlzLnZhcnMub25TdGFydCYmMCE9PXRoaXMuX3RvdGFsVGltZSYmKGJ8fHRoaXMudmFycy5vblN0YXJ0LmFwcGx5KHRoaXMudmFycy5vblN0YXJ0U2NvcGV8fHRoaXMsdGhpcy52YXJzLm9uU3RhcnRQYXJhbXN8fGUpKSx0aGlzLl90aW1lPmYpZm9yKG09dGhpcy5fZmlyc3Q7bSYmKG89bS5fbmV4dCwhdGhpcy5fcGF1c2VkfHxrKTspKG0uX2FjdGl2ZXx8bS5fc3RhcnRUaW1lPD10aGlzLl90aW1lJiYhbS5fcGF1c2VkJiYhbS5fZ2MpJiYobS5fcmV2ZXJzZWQ/bS5yZW5kZXIoKG0uX2RpcnR5P20udG90YWxEdXJhdGlvbigpOm0uX3RvdGFsRHVyYXRpb24pLShhLW0uX3N0YXJ0VGltZSkqbS5fdGltZVNjYWxlLGIsITEpOm0ucmVuZGVyKChhLW0uX3N0YXJ0VGltZSkqbS5fdGltZVNjYWxlLGIsITEpKSxtPW87ZWxzZSBmb3IobT10aGlzLl9sYXN0O20mJihvPW0uX3ByZXYsIXRoaXMuX3BhdXNlZHx8ayk7KShtLl9hY3RpdmV8fGY+PW0uX3N0YXJ0VGltZSYmIW0uX3BhdXNlZCYmIW0uX2djKSYmKG0uX3JldmVyc2VkP20ucmVuZGVyKChtLl9kaXJ0eT9tLnRvdGFsRHVyYXRpb24oKTptLl90b3RhbER1cmF0aW9uKS0oYS1tLl9zdGFydFRpbWUpKm0uX3RpbWVTY2FsZSxiLCExKTptLnJlbmRlcigoYS1tLl9zdGFydFRpbWUpKm0uX3RpbWVTY2FsZSxiLCExKSksbT1vO3RoaXMuX29uVXBkYXRlJiYoYnx8dGhpcy5fb25VcGRhdGUuYXBwbHkodGhpcy52YXJzLm9uVXBkYXRlU2NvcGV8fHRoaXMsdGhpcy52YXJzLm9uVXBkYXRlUGFyYW1zfHxlKSkscSYmKHRoaXMuX2xvY2tlZHx8dGhpcy5fZ2N8fChoPT09dGhpcy5fc3RhcnRUaW1lfHxpIT09dGhpcy5fdGltZVNjYWxlKSYmKDA9PT10aGlzLl90aW1lfHxkPj10aGlzLnRvdGFsRHVyYXRpb24oKSkmJihuJiYodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuJiZ0aGlzLl9lbmFibGVkKCExLCExKSx0aGlzLl9hY3RpdmU9ITEpLGJ8fHRoaXMudmFyc1txXSYmdGhpcy52YXJzW3FdLmFwcGx5KHRoaXMudmFyc1txK1wiU2NvcGVcIl18fHRoaXMsdGhpcy52YXJzW3ErXCJQYXJhbXNcIl18fGUpKSl9LGguZ2V0QWN0aXZlPWZ1bmN0aW9uKGEsYixjKXtudWxsPT1hJiYoYT0hMCksbnVsbD09YiYmKGI9ITApLG51bGw9PWMmJihjPSExKTt2YXIgaSxqLGQ9W10sZT10aGlzLmdldENoaWxkcmVuKGEsYixjKSxmPTAsaD1lLmxlbmd0aDtmb3IoaT0wO2g+aTtpKyspaj1lW2ldLGouX3BhdXNlZHx8ai5fdGltZWxpbmUuX3RpbWU+PWouX3N0YXJ0VGltZSYmai5fdGltZWxpbmUuX3RpbWU8ai5fc3RhcnRUaW1lK2ouX3RvdGFsRHVyYXRpb24vai5fdGltZVNjYWxlJiYoZyhqLl90aW1lbGluZSl8fChkW2YrK109aikpO3JldHVybiBkfSxoLmdldExhYmVsQWZ0ZXI9ZnVuY3Rpb24oYSl7YXx8MCE9PWEmJihhPXRoaXMuX3RpbWUpO3ZhciBkLGI9dGhpcy5nZXRMYWJlbHNBcnJheSgpLGM9Yi5sZW5ndGg7Zm9yKGQ9MDtjPmQ7ZCsrKWlmKGJbZF0udGltZT5hKXJldHVybiBiW2RdLm5hbWU7cmV0dXJuIG51bGx9LGguZ2V0TGFiZWxCZWZvcmU9ZnVuY3Rpb24oYSl7bnVsbD09YSYmKGE9dGhpcy5fdGltZSk7Zm9yKHZhciBiPXRoaXMuZ2V0TGFiZWxzQXJyYXkoKSxjPWIubGVuZ3RoOy0tYz4tMTspaWYoYT5iW2NdLnRpbWUpcmV0dXJuIGJbY10ubmFtZTtyZXR1cm4gbnVsbH0saC5nZXRMYWJlbHNBcnJheT1mdW5jdGlvbigpe3ZhciBjLGE9W10sYj0wO2ZvcihjIGluIHRoaXMuX2xhYmVscylhW2IrK109e3RpbWU6dGhpcy5fbGFiZWxzW2NdLG5hbWU6Y307cmV0dXJuIGEuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBhLnRpbWUtYi50aW1lfSksYX0saC5wcm9ncmVzcz1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD90aGlzLnRvdGFsVGltZSh0aGlzLmR1cmF0aW9uKCkqKHRoaXMuX3lveW8mJjAhPT0oMSZ0aGlzLl9jeWNsZSk/MS1hOmEpK3RoaXMuX2N5Y2xlKih0aGlzLl9kdXJhdGlvbit0aGlzLl9yZXBlYXREZWxheSksITEpOnRoaXMuX3RpbWUvdGhpcy5kdXJhdGlvbigpfSxoLnRvdGFsUHJvZ3Jlc3M9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/dGhpcy50b3RhbFRpbWUodGhpcy50b3RhbER1cmF0aW9uKCkqYSwhMSk6dGhpcy5fdG90YWxUaW1lL3RoaXMudG90YWxEdXJhdGlvbigpfSxoLnRvdGFsRHVyYXRpb249ZnVuY3Rpb24oYil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/LTE9PT10aGlzLl9yZXBlYXQ/dGhpczp0aGlzLmR1cmF0aW9uKChiLXRoaXMuX3JlcGVhdCp0aGlzLl9yZXBlYXREZWxheSkvKHRoaXMuX3JlcGVhdCsxKSk6KHRoaXMuX2RpcnR5JiYoYS5wcm90b3R5cGUudG90YWxEdXJhdGlvbi5jYWxsKHRoaXMpLHRoaXMuX3RvdGFsRHVyYXRpb249LTE9PT10aGlzLl9yZXBlYXQ/OTk5OTk5OTk5OTk5OnRoaXMuX2R1cmF0aW9uKih0aGlzLl9yZXBlYXQrMSkrdGhpcy5fcmVwZWF0RGVsYXkqdGhpcy5fcmVwZWF0KSx0aGlzLl90b3RhbER1cmF0aW9uKX0saC50aW1lPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX2RpcnR5JiZ0aGlzLnRvdGFsRHVyYXRpb24oKSxhPnRoaXMuX2R1cmF0aW9uJiYoYT10aGlzLl9kdXJhdGlvbiksdGhpcy5feW95byYmMCE9PSgxJnRoaXMuX2N5Y2xlKT9hPXRoaXMuX2R1cmF0aW9uLWErdGhpcy5fY3ljbGUqKHRoaXMuX2R1cmF0aW9uK3RoaXMuX3JlcGVhdERlbGF5KTowIT09dGhpcy5fcmVwZWF0JiYoYSs9dGhpcy5fY3ljbGUqKHRoaXMuX2R1cmF0aW9uK3RoaXMuX3JlcGVhdERlbGF5KSksdGhpcy50b3RhbFRpbWUoYSxiKSk6dGhpcy5fdGltZX0saC5yZXBlYXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX3JlcGVhdD1hLHRoaXMuX3VuY2FjaGUoITApKTp0aGlzLl9yZXBlYXR9LGgucmVwZWF0RGVsYXk9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX3JlcGVhdERlbGF5PWEsdGhpcy5fdW5jYWNoZSghMCkpOnRoaXMuX3JlcGVhdERlbGF5fSxoLnlveW89ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX3lveW89YSx0aGlzKTp0aGlzLl95b3lvfSxoLmN1cnJlbnRMYWJlbD1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD90aGlzLnNlZWsoYSwhMCk6dGhpcy5nZXRMYWJlbEJlZm9yZSh0aGlzLl90aW1lKzFlLTgpfSxkfSwhMCksX2dzRGVmaW5lKFwicGx1Z2lucy5CZXppZXJQbHVnaW5cIixbXCJwbHVnaW5zLlR3ZWVuUGx1Z2luXCJdLGZ1bmN0aW9uKGEpe3ZhciBiPWZ1bmN0aW9uKCl7YS5jYWxsKHRoaXMsXCJiZXppZXJcIiwtMSksdGhpcy5fb3ZlcndyaXRlUHJvcHMucG9wKCksdGhpcy5fZnVuYz17fSx0aGlzLl9yb3VuZD17fX0sYz1iLnByb3RvdHlwZT1uZXcgYShcImJlemllclwiLDEpLGQ9MTgwL01hdGguUEksZT1NYXRoLlBJLzE4MCxmPVtdLGc9W10saD1bXSxpPXt9LGo9ZnVuY3Rpb24gaihhLGIsYyxkKXt0aGlzLmE9YSx0aGlzLmI9Yix0aGlzLmM9Yyx0aGlzLmQ9ZCx0aGlzLmRhPWQtYSx0aGlzLmNhPWMtYSx0aGlzLmJhPWItYX0saz1cIix4LHkseixsZWZ0LHRvcCxyaWdodCxib3R0b20sbWFyZ2luVG9wLG1hcmdpbkxlZnQsbWFyZ2luUmlnaHQsbWFyZ2luQm90dG9tLHBhZGRpbmdMZWZ0LHBhZGRpbmdUb3AscGFkZGluZ1JpZ2h0LHBhZGRpbmdCb3R0b20sYmFja2dyb3VuZFBvc2l0aW9uLGJhY2tncm91bmRQb3NpdGlvbl95LFwiLGw9Yi5iZXppZXJUaHJvdWdoPWZ1bmN0aW9uKGEsYixjLGQsZSxqKXt2YXIgcSxyLHMsdCx1LHYsdyx4LGw9e30sbT1bXSxwPWp8fGFbMF07ZT1cInN0cmluZ1wiPT10eXBlb2YgZT9cIixcIitlK1wiLFwiOmssbnVsbD09YiYmKGI9MSk7Zm9yKHIgaW4gYVswXSltLnB1c2gocik7aWYoYS5sZW5ndGg+MSl7Zm9yKHg9YVthLmxlbmd0aC0xXSx3PSEwLHE9bS5sZW5ndGg7LS1xPi0xOylpZihyPW1bcV0sTWF0aC5hYnMocFtyXS14W3JdKT4uMDUpe3c9ITE7YnJlYWt9dyYmKGE9YS5jb25jYXQoKSxqJiZhLnVuc2hpZnQoaiksYS5wdXNoKGFbMV0pLGo9YVthLmxlbmd0aC0zXSl9Zm9yKGYubGVuZ3RoPWcubGVuZ3RoPWgubGVuZ3RoPTAscT1tLmxlbmd0aDstLXE+LTE7KXI9bVtxXSxpW3JdPS0xIT09ZS5pbmRleE9mKFwiLFwiK3IrXCIsXCIpLGxbcl09bihhLHIsaVtyXSxqKTtmb3IocT1mLmxlbmd0aDstLXE+LTE7KWZbcV09TWF0aC5zcXJ0KGZbcV0pLGdbcV09TWF0aC5zcXJ0KGdbcV0pO2lmKCFkKXtmb3IocT1tLmxlbmd0aDstLXE+LTE7KWlmKGlbcl0pZm9yKHM9bFttW3FdXSx2PXMubGVuZ3RoLTEsdD0wO3Y+dDt0KyspdT1zW3QrMV0uZGEvZ1t0XStzW3RdLmRhL2ZbdF0saFt0XT0oaFt0XXx8MCkrdSp1O2ZvcihxPWgubGVuZ3RoOy0tcT4tMTspaFtxXT1NYXRoLnNxcnQoaFtxXSl9Zm9yKHE9bS5sZW5ndGgsdD1jPzQ6MTstLXE+LTE7KXI9bVtxXSxzPWxbcl0sbyhzLGIsYyxkLGlbcl0pLHcmJihzLnNwbGljZSgwLHQpLHMuc3BsaWNlKHMubGVuZ3RoLXQsdCkpO3JldHVybiBsfSxtPWZ1bmN0aW9uKGEsYixjKXtiPWJ8fFwic29mdFwiO3ZhciBoLGksayxsLG0sbixvLHAscSxyLHMsZD17fSxlPVwiY3ViaWNcIj09PWI/MzoyLGY9XCJzb2Z0XCI9PT1iLGc9W107aWYoZiYmYyYmKGE9W2NdLmNvbmNhdChhKSksbnVsbD09YXx8ZSsxPmEubGVuZ3RoKXRocm93XCJpbnZhbGlkIEJlemllciBkYXRhXCI7Zm9yKHEgaW4gYVswXSlnLnB1c2gocSk7Zm9yKG49Zy5sZW5ndGg7LS1uPi0xOyl7Zm9yKHE9Z1tuXSxkW3FdPW09W10scj0wLHA9YS5sZW5ndGgsbz0wO3A+bztvKyspaD1udWxsPT1jP2Fbb11bcV06XCJzdHJpbmdcIj09dHlwZW9mKHM9YVtvXVtxXSkmJlwiPVwiPT09cy5jaGFyQXQoMSk/Y1txXStOdW1iZXIocy5jaGFyQXQoMCkrcy5zdWJzdHIoMikpOk51bWJlcihzKSxmJiZvPjEmJnAtMT5vJiYobVtyKytdPShoK21bci0yXSkvMiksbVtyKytdPWg7Zm9yKHA9ci1lKzEscj0wLG89MDtwPm87bys9ZSloPW1bb10saT1tW28rMV0saz1tW28rMl0sbD0yPT09ZT8wOm1bbyszXSxtW3IrK109cz0zPT09ZT9uZXcgaihoLGksayxsKTpuZXcgaihoLCgyKmkraCkvMywoMippK2spLzMsayk7bS5sZW5ndGg9cn1yZXR1cm4gZH0sbj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgaCxpLGssbCxtLG4sZT1bXTtpZihkKWZvcihhPVtkXS5jb25jYXQoYSksaT1hLmxlbmd0aDstLWk+LTE7KVwic3RyaW5nXCI9PXR5cGVvZihuPWFbaV1bYl0pJiZcIj1cIj09PW4uY2hhckF0KDEpJiYoYVtpXVtiXT1kW2JdK051bWJlcihuLmNoYXJBdCgwKStuLnN1YnN0cigyKSkpO2lmKGg9YS5sZW5ndGgtMiwwPmgpcmV0dXJuIGVbMF09bmV3IGooYVswXVtiXSwwLDAsYVstMT5oPzA6MV1bYl0pLGU7Zm9yKGk9MDtoPmk7aSsrKWs9YVtpXVtiXSxsPWFbaSsxXVtiXSxlW2ldPW5ldyBqKGssMCwwLGwpLGMmJihtPWFbaSsyXVtiXSxmW2ldPShmW2ldfHwwKSsobC1rKSoobC1rKSxnW2ldPShnW2ldfHwwKSsobS1sKSoobS1sKSk7cmV0dXJuIGVbaV09bmV3IGooYVtpXVtiXSwwLDAsYVtpKzFdW2JdKSxlfSxvPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGwsbSxuLG8scSxyLHMsdCx1LHYsdyx4LHksaT1hLmxlbmd0aC0xLGo9MCxrPWFbMF0uYTtmb3IobD0wO2k+bDtsKyspcT1hW2pdLG09cS5hLG49cS5kLG89YVtqKzFdLmQsZT8odz1mW2xdLHg9Z1tsXSx5PS4yNSooeCt3KSpiLyhkPy41OmhbbF18fC41KSxyPW4tKG4tbSkqKGQ/LjUqYjp5L3cpLHM9bisoby1uKSooZD8uNSpiOnkveCksdD1uLShyKyhzLXIpKigzKncvKHcreCkrLjUpLzQpKToocj1uLS41KihuLW0pKmIscz1uKy41KihvLW4pKmIsdD1uLShyK3MpLzIpLHIrPXQscys9dCxxLmM9dT1yLHEuYj0wIT09bD9rOms9cS5hKy42KihxLmMtcS5hKSxxLmRhPW4tbSxxLmNhPXUtbSxxLmJhPWstbSxjPyh2PXAobSxrLHUsbiksYS5zcGxpY2UoaiwxLHZbMF0sdlsxXSx2WzJdLHZbM10pLGorPTQpOmorKyxrPXM7cT1hW2pdLHEuYj1rLHEuYz1rKy40KihxLmQtaykscS5kYT1xLmQtcS5hLHEuY2E9cS5jLXEuYSxxLmJhPWstcS5hLGMmJih2PXAocS5hLGsscS5jLHEuZCksYS5zcGxpY2UoaiwxLHZbMF0sdlsxXSx2WzJdLHZbM10pKX0scD1iLmN1YmljVG9RdWFkcmF0aWM9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9e2E6YX0sZj17fSxnPXt9LGg9e2M6ZH0saT0oYStiKS8yLGo9KGIrYykvMixrPShjK2QpLzIsbD0oaStqKS8yLG09KGoraykvMixuPShtLWwpLzg7cmV0dXJuIGUuYj1pKyhhLWkpLzQsZi5iPWwrbixlLmM9Zi5hPShlLmIrZi5iKS8yLGYuYz1nLmE9KGwrbSkvMixnLmI9bS1uLGguYj1rKyhkLWspLzQsZy5jPWguYT0oZy5iK2guYikvMixbZSxmLGcsaF19LHE9ZnVuY3Rpb24oYSxiKXtiPWI+PjB8fDY7dmFyIGosayxsLG0sYz1bXSxkPVtdLGU9MCxmPTAsZz1iLTEsaD1bXSxpPVtdO2ZvcihqIGluIGEpcihhW2pdLGMsYik7Zm9yKGw9Yy5sZW5ndGgsaz0wO2w+aztrKyspZSs9TWF0aC5zcXJ0KGNba10pLG09ayViLGlbbV09ZSxtPT09ZyYmKGYrPWUsbT1rL2I+PjAsaFttXT1pLGRbbV09ZixlPTAsaT1bXSk7cmV0dXJue2xlbmd0aDpmLGxlbmd0aHM6ZCxzZWdtZW50czpofX0scj1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBmLGcsaCxpLGosayxsLG0sbixvLHAsZD0xL2MsZT1hLmxlbmd0aDstLWU+LTE7KWZvcihvPWFbZV0saD1vLmEsaT1vLmQtaCxqPW8uYy1oLGs9by5iLWgsZj1nPTAsbT0xO2M+PW07bSsrKWw9ZCptLG49MS1sLGY9Zy0oZz0obCpsKmkrMypuKihsKmorbiprKSkqbCkscD1lKmMrbS0xLGJbcF09KGJbcF18fDApK2YqZn07cmV0dXJuIGMuY29uc3RydWN0b3I9YixiLkFQST0yLGIuX2F1dG9DU1M9ITAsYi5xdWFkcmF0aWNUb0N1YmljPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbmV3IGooYSwoMipiK2EpLzMsKDIqYitjKS8zLGMpfSxiLl9jc3NSZWdpc3Rlcj1mdW5jdGlvbigpe3ZhciBhPSh3aW5kb3cuR3JlZW5Tb2NrR2xvYmFsc3x8d2luZG93KS5jb20uZ3JlZW5zb2NrLnBsdWdpbnMuQ1NTUGx1Z2luO2lmKGEpe3ZhciBjPWEuX2ludGVybmFscyxkPWMuX3BhcnNlVG9Qcm94eSxmPWMuX3NldFBsdWdpblJhdGlvLGc9Yy5DU1NQcm9wVHdlZW47Yy5fcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJiZXppZXJcIixudWxsLGZ1bmN0aW9uKGEsYyxoLGksaixrKXtjIGluc3RhbmNlb2YgQXJyYXkmJihjPXt2YWx1ZXM6Y30pLGs9bmV3IGI7dmFyIHAscSxyLGw9Yy52YWx1ZXMsbT1sLmxlbmd0aC0xLG49W10sbz17fTtpZigwPm0pcmV0dXJuIGo7Zm9yKHA9MDttPj1wO3ArKylyPWQoYSxsW3BdLGksaixrLG0hPT1wKSxuW3BdPXIuZW5kO2ZvcihxIGluIGMpb1txXT1jW3FdO3JldHVybiBvLnZhbHVlcz1uLGo9bmV3IGcoYSxcImJlemllclwiLDAsMCxyLnB0LDIpLGouZGF0YT1yLGoucGx1Z2luPWssai5zZXRSYXRpbz1mLDA9PT1vLmF1dG9Sb3RhdGUmJihvLmF1dG9Sb3RhdGU9ITApLG8uYXV0b1JvdGF0ZSYmKG8uYXV0b1JvdGF0ZSBpbnN0YW5jZW9mIEFycmF5fHwocD1vLmF1dG9Sb3RhdGU9PT0hMD8wOk51bWJlcihvLmF1dG9Sb3RhdGUpKmUsby5hdXRvUm90YXRlPW51bGwhPXIuZW5kLmxlZnQ/W1tcImxlZnRcIixcInRvcFwiLFwicm90YXRpb25cIixwLCEwXV06bnVsbCE9ci5lbmQueD9bW1wieFwiLFwieVwiLFwicm90YXRpb25cIixwLCEwXV06ITEpKSxvLmF1dG9Sb3RhdGUmJihpLl90cmFuc2Zvcm18fGkuX2VuYWJsZVRyYW5zZm9ybXMoITEpLHIuYXV0b1JvdGF0ZT1pLl90YXJnZXQuX2dzVHJhbnNmb3JtKSxrLl9vbkluaXRUd2VlbihyLnByb3h5LG8saS5fdHdlZW4pLGp9KX19LGMuX29uSW5pdFR3ZWVuPWZ1bmN0aW9uKGEsYixjKXt0aGlzLl90YXJnZXQ9YSxiIGluc3RhbmNlb2YgQXJyYXkmJihiPXt2YWx1ZXM6Yn0pLHRoaXMuX3Byb3BzPVtdLHRoaXMuX3RpbWVSZXM9bnVsbD09Yi50aW1lUmVzb2x1dGlvbj82OnBhcnNlSW50KGIudGltZVJlc29sdXRpb24sMTApO3ZhciBoLGksaixrLG4sZD1iLnZhbHVlc3x8W10sZT17fSxmPWRbMF0sZz1iLmF1dG9Sb3RhdGV8fGMudmFycy5vcmllbnRUb0Jlemllcjt0aGlzLl9hdXRvUm90YXRlPWc/ZyBpbnN0YW5jZW9mIEFycmF5P2c6W1tcInhcIixcInlcIixcInJvdGF0aW9uXCIsZz09PSEwPzA6TnVtYmVyKGcpfHwwXV06bnVsbDtmb3IoaCBpbiBmKXRoaXMuX3Byb3BzLnB1c2goaCk7Zm9yKGo9dGhpcy5fcHJvcHMubGVuZ3RoOy0taj4tMTspaD10aGlzLl9wcm9wc1tqXSx0aGlzLl9vdmVyd3JpdGVQcm9wcy5wdXNoKGgpLGk9dGhpcy5fZnVuY1toXT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhW2hdLGVbaF09aT9hW2guaW5kZXhPZihcInNldFwiKXx8XCJmdW5jdGlvblwiIT10eXBlb2YgYVtcImdldFwiK2guc3Vic3RyKDMpXT9oOlwiZ2V0XCIraC5zdWJzdHIoMyldKCk6cGFyc2VGbG9hdChhW2hdKSxufHxlW2hdIT09ZFswXVtoXSYmKG49ZSk7aWYodGhpcy5fYmV6aWVycz1cImN1YmljXCIhPT1iLnR5cGUmJlwicXVhZHJhdGljXCIhPT1iLnR5cGUmJlwic29mdFwiIT09Yi50eXBlP2woZCxpc05hTihiLmN1cnZpbmVzcyk/MTpiLmN1cnZpbmVzcywhMSxcInRocnVCYXNpY1wiPT09Yi50eXBlLGIuY29ycmVsYXRlLG4pOm0oZCxiLnR5cGUsZSksdGhpcy5fc2VnQ291bnQ9dGhpcy5fYmV6aWVyc1toXS5sZW5ndGgsdGhpcy5fdGltZVJlcyl7dmFyIG89cSh0aGlzLl9iZXppZXJzLHRoaXMuX3RpbWVSZXMpO3RoaXMuX2xlbmd0aD1vLmxlbmd0aCx0aGlzLl9sZW5ndGhzPW8ubGVuZ3Rocyx0aGlzLl9zZWdtZW50cz1vLnNlZ21lbnRzLHRoaXMuX2wxPXRoaXMuX2xpPXRoaXMuX3MxPXRoaXMuX3NpPTAsdGhpcy5fbDI9dGhpcy5fbGVuZ3Roc1swXSx0aGlzLl9jdXJTZWc9dGhpcy5fc2VnbWVudHNbMF0sdGhpcy5fczI9dGhpcy5fY3VyU2VnWzBdLHRoaXMuX3ByZWM9MS90aGlzLl9jdXJTZWcubGVuZ3RofWlmKGc9dGhpcy5fYXV0b1JvdGF0ZSlmb3IoZ1swXWluc3RhbmNlb2YgQXJyYXl8fCh0aGlzLl9hdXRvUm90YXRlPWc9W2ddKSxqPWcubGVuZ3RoOy0taj4tMTspZm9yKGs9MDszPms7aysrKWg9Z1tqXVtrXSx0aGlzLl9mdW5jW2hdPVwiZnVuY3Rpb25cIj09dHlwZW9mIGFbaF0/YVtoLmluZGV4T2YoXCJzZXRcIil8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGFbXCJnZXRcIitoLnN1YnN0cigzKV0/aDpcImdldFwiK2guc3Vic3RyKDMpXTohMTtyZXR1cm4hMH0sYy5zZXRSYXRpbz1mdW5jdGlvbihhKXt2YXIgZixnLGgsaSxqLGssbCxtLG4sbyxiPXRoaXMuX3NlZ0NvdW50LGM9dGhpcy5fZnVuYyxlPXRoaXMuX3RhcmdldDtpZih0aGlzLl90aW1lUmVzKXtpZihuPXRoaXMuX2xlbmd0aHMsbz10aGlzLl9jdXJTZWcsYSo9dGhpcy5fbGVuZ3RoLGg9dGhpcy5fbGksYT50aGlzLl9sMiYmYi0xPmgpe2ZvcihtPWItMTttPmgmJmE+PSh0aGlzLl9sMj1uWysraF0pOyk7dGhpcy5fbDE9bltoLTFdLHRoaXMuX2xpPWgsdGhpcy5fY3VyU2VnPW89dGhpcy5fc2VnbWVudHNbaF0sdGhpcy5fczI9b1t0aGlzLl9zMT10aGlzLl9zaT0wXX1lbHNlIGlmKHRoaXMuX2wxPmEmJmg+MCl7Zm9yKDtoPjAmJih0aGlzLl9sMT1uWy0taF0pPj1hOyk7MD09PWgmJnRoaXMuX2wxPmE/dGhpcy5fbDE9MDpoKyssdGhpcy5fbDI9bltoXSx0aGlzLl9saT1oLHRoaXMuX2N1clNlZz1vPXRoaXMuX3NlZ21lbnRzW2hdLHRoaXMuX3MxPW9bKHRoaXMuX3NpPW8ubGVuZ3RoLTEpLTFdfHwwLHRoaXMuX3MyPW9bdGhpcy5fc2ldfWlmKGY9aCxhLT10aGlzLl9sMSxoPXRoaXMuX3NpLGE+dGhpcy5fczImJm8ubGVuZ3RoLTE+aCl7Zm9yKG09by5sZW5ndGgtMTttPmgmJmE+PSh0aGlzLl9zMj1vWysraF0pOyk7dGhpcy5fczE9b1toLTFdLHRoaXMuX3NpPWh9ZWxzZSBpZih0aGlzLl9zMT5hJiZoPjApe2Zvcig7aD4wJiYodGhpcy5fczE9b1stLWhdKT49YTspOzA9PT1oJiZ0aGlzLl9zMT5hP3RoaXMuX3MxPTA6aCsrLHRoaXMuX3MyPW9baF0sdGhpcy5fc2k9aH1rPShoKyhhLXRoaXMuX3MxKS8odGhpcy5fczItdGhpcy5fczEpKSp0aGlzLl9wcmVjfWVsc2UgZj0wPmE/MDphPj0xP2ItMTpiKmE+PjAsaz0oYS1mKigxL2IpKSpiO2ZvcihnPTEtayxoPXRoaXMuX3Byb3BzLmxlbmd0aDstLWg+LTE7KWk9dGhpcy5fcHJvcHNbaF0saj10aGlzLl9iZXppZXJzW2ldW2ZdLGw9KGsqaypqLmRhKzMqZyooaypqLmNhK2cqai5iYSkpKmsrai5hLHRoaXMuX3JvdW5kW2ldJiYobD1sKyhsPjA/LjU6LS41KT4+MCksY1tpXT9lW2ldKGwpOmVbaV09bDtpZih0aGlzLl9hdXRvUm90YXRlKXt2YXIgcSxyLHMsdCx1LHYsdyxwPXRoaXMuX2F1dG9Sb3RhdGU7Zm9yKGg9cC5sZW5ndGg7LS1oPi0xOylpPXBbaF1bMl0sdj1wW2hdWzNdfHwwLHc9cFtoXVs0XT09PSEwPzE6ZCxqPXRoaXMuX2JlemllcnNbcFtoXVswXV1bZl0scT10aGlzLl9iZXppZXJzW3BbaF1bMV1dW2ZdLHI9ai5hKyhqLmItai5hKSprLHQ9ai5iKyhqLmMtai5iKSprLHIrPSh0LXIpKmssdCs9KGouYysoai5kLWouYykqay10KSprLHM9cS5hKyhxLmItcS5hKSprLHU9cS5iKyhxLmMtcS5iKSprLHMrPSh1LXMpKmssdSs9KHEuYysocS5kLXEuYykqay11KSprLGw9TWF0aC5hdGFuMih1LXMsdC1yKSp3K3YsY1tpXT9jW2ldLmNhbGwoZSxsKTplW2ldPWx9fSxjLl9yb3VuZFByb3BzPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMuX292ZXJ3cml0ZVByb3BzLGQ9Yy5sZW5ndGg7LS1kPi0xOykoYVtjW2RdXXx8YS5iZXppZXJ8fGEuYmV6aWVyVGhyb3VnaCkmJih0aGlzLl9yb3VuZFtjW2RdXT1iKX0sYy5fa2lsbD1mdW5jdGlvbihiKXt2YXIgZCxlLGM9dGhpcy5fcHJvcHM7Zm9yKGQgaW4gdGhpcy5fYmV6aWVycylpZihkIGluIGIpZm9yKGRlbGV0ZSB0aGlzLl9iZXppZXJzW2RdLGRlbGV0ZSB0aGlzLl9mdW5jW2RdLGU9Yy5sZW5ndGg7LS1lPi0xOyljW2VdPT09ZCYmYy5zcGxpY2UoZSwxKTtyZXR1cm4gYS5wcm90b3R5cGUuX2tpbGwuY2FsbCh0aGlzLGIpfSxhLmFjdGl2YXRlKFtiXSksYn0sITApLF9nc0RlZmluZShcInBsdWdpbnMuQ1NTUGx1Z2luXCIsW1wicGx1Z2lucy5Ud2VlblBsdWdpblwiLFwiVHdlZW5MaXRlXCJdLGZ1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO3ZhciBkLGUsZixnLGM9ZnVuY3Rpb24oKXthLmNhbGwodGhpcyxcImNzc1wiKSx0aGlzLl9vdmVyd3JpdGVQcm9wcy5sZW5ndGg9MH0saD17fSxpPWMucHJvdG90eXBlPW5ldyBhKFwiY3NzXCIpO2kuY29uc3RydWN0b3I9YyxjLnZlcnNpb249XCIxLjguMVwiLGMuQVBJPTIsYy5kZWZhdWx0VHJhbnNmb3JtUGVyc3BlY3RpdmU9MCxpPVwicHhcIixjLnN1ZmZpeE1hcD17dG9wOmkscmlnaHQ6aSxib3R0b206aSxsZWZ0Omksd2lkdGg6aSxoZWlnaHQ6aSxmb250U2l6ZTppLHBhZGRpbmc6aSxtYXJnaW46aSxwZXJzcGVjdGl2ZTppfTt2YXIgRyxILEksSixLLEwsaj0vKD86XFxkfFxcLVxcZHxcXC5cXGR8XFwtXFwuXFxkKSsvZyxrPS8oPzpcXGR8XFwtXFxkfFxcLlxcZHxcXC1cXC5cXGR8XFwrPVxcZHxcXC09XFxkfFxcKz0uXFxkfFxcLT1cXC5cXGQpKy9nLGw9Lyg/OlxcKz18XFwtPXxcXC18XFxiKVtcXGRcXC1cXC5dK1thLXpBLVowLTldKig/OiV8XFxiKS9naSxtPS9bXlxcZFxcLVxcLl0vZyxuPS8oPzpcXGR8XFwtfFxcK3w9fCN8XFwuKSovZyxvPS9vcGFjaXR5ICo9ICooW14pXSopLyxwPS9vcGFjaXR5OihbXjtdKikvLHE9L2FscGhhXFwob3BhY2l0eSAqPS4rP1xcKS9pLHI9LyhbQS1aXSkvZyxzPS8tKFthLXpdKS9naSx0PS8oXig/OnVybFxcKFxcXCJ8dXJsXFwoKSl8KD86KFxcXCJcXCkpJHxcXCkkKS9naSx1PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIudG9VcHBlckNhc2UoKX0sdj0vKD86TGVmdHxSaWdodHxXaWR0aCkvaSx3PS8oTTExfE0xMnxNMjF8TTIyKT1bXFxkXFwtXFwuZV0rL2dpLHg9L3Byb2dpZFxcOkRYSW1hZ2VUcmFuc2Zvcm1cXC5NaWNyb3NvZnRcXC5NYXRyaXhcXCguKz9cXCkvaSx5PU1hdGguUEkvMTgwLHo9MTgwL01hdGguUEksQT17fSxCPWRvY3VtZW50LEM9Qi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLEQ9Qi5jcmVhdGVFbGVtZW50KFwiaW1nXCIpLEU9Yy5faW50ZXJuYWxzPXtfc3BlY2lhbFByb3BzOmh9LEY9bmF2aWdhdG9yLnVzZXJBZ2VudCxNPWZ1bmN0aW9uKCl7dmFyIGMsYT1GLmluZGV4T2YoXCJBbmRyb2lkXCIpLGI9Qi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xucmV0dXJuIEk9LTEhPT1GLmluZGV4T2YoXCJTYWZhcmlcIikmJi0xPT09Ri5pbmRleE9mKFwiQ2hyb21lXCIpJiYoLTE9PT1hfHxOdW1iZXIoRi5zdWJzdHIoYSs4LDEpKT4zKSxLPUkmJjY+TnVtYmVyKEYuc3Vic3RyKEYuaW5kZXhPZihcIlZlcnNpb24vXCIpKzgsMSkpLEo9LTEhPT1GLmluZGV4T2YoXCJGaXJlZm94XCIpLC9NU0lFIChbMC05XXsxLH1bXFwuMC05XXswLH0pLy5leGVjKEYpLEw9cGFyc2VGbG9hdChSZWdFeHAuJDEpLGIuaW5uZXJIVE1MPVwiPGEgc3R5bGU9J3RvcDoxcHg7b3BhY2l0eTouNTU7Jz5hPC9hPlwiLGM9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImFcIilbMF0sYz8vXjAuNTUvLnRlc3QoYy5zdHlsZS5vcGFjaXR5KTohMX0oKSxOPWZ1bmN0aW9uKGEpe3JldHVybiBvLnRlc3QoXCJzdHJpbmdcIj09dHlwZW9mIGE/YTooYS5jdXJyZW50U3R5bGU/YS5jdXJyZW50U3R5bGUuZmlsdGVyOmEuc3R5bGUuZmlsdGVyKXx8XCJcIik/cGFyc2VGbG9hdChSZWdFeHAuJDEpLzEwMDoxfSxPPWZ1bmN0aW9uKGEpe3dpbmRvdy5jb25zb2xlJiZjb25zb2xlLmxvZyhhKX0sUD1cIlwiLFE9XCJcIixSPWZ1bmN0aW9uKGEsYil7Yj1ifHxDO3ZhciBkLGUsYz1iLnN0eWxlO2lmKHZvaWQgMCE9PWNbYV0pcmV0dXJuIGE7Zm9yKGE9YS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cigxKSxkPVtcIk9cIixcIk1velwiLFwibXNcIixcIk1zXCIsXCJXZWJraXRcIl0sZT01Oy0tZT4tMSYmdm9pZCAwPT09Y1tkW2VdK2FdOyk7cmV0dXJuIGU+PTA/KFE9Mz09PWU/XCJtc1wiOmRbZV0sUD1cIi1cIitRLnRvTG93ZXJDYXNlKCkrXCItXCIsUSthKTpudWxsfSxTPUIuZGVmYXVsdFZpZXc/Qi5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlOmZ1bmN0aW9uKCl7fSxUPWMuZ2V0U3R5bGU9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZjtyZXR1cm4gTXx8XCJvcGFjaXR5XCIhPT1iPyghZCYmYS5zdHlsZVtiXT9mPWEuc3R5bGVbYl06KGM9Y3x8UyhhLG51bGwpKT8oYT1jLmdldFByb3BlcnR5VmFsdWUoYi5yZXBsYWNlKHIsXCItJDFcIikudG9Mb3dlckNhc2UoKSksZj1hfHxjLmxlbmd0aD9hOmNbYl0pOmEuY3VycmVudFN0eWxlJiYoYz1hLmN1cnJlbnRTdHlsZSxmPWNbYl0pLG51bGw9PWV8fGYmJlwibm9uZVwiIT09ZiYmXCJhdXRvXCIhPT1mJiZcImF1dG8gYXV0b1wiIT09Zj9mOmUpOk4oYSl9LFU9ZnVuY3Rpb24oYSxiLGMpe3ZhciBmLGcsZD17fSxlPWEuX2dzT3ZlcndyaXR0ZW5DbGFzc05hbWVQVDtpZihlJiYhYyl7Zm9yKDtlOyllLnNldFJhdGlvKDApLGU9ZS5fbmV4dDthLl9nc092ZXJ3cml0dGVuQ2xhc3NOYW1lUFQ9bnVsbH1pZihiPWJ8fFMoYSxudWxsKSlpZihmPWIubGVuZ3RoKWZvcig7LS1mPi0xOylkW2JbZl0ucmVwbGFjZShzLHUpXT1iLmdldFByb3BlcnR5VmFsdWUoYltmXSk7ZWxzZSBmb3IoZiBpbiBiKWRbZl09YltmXTtlbHNlIGlmKGI9YS5jdXJyZW50U3R5bGV8fGEuc3R5bGUpZm9yKGYgaW4gYilkW2YucmVwbGFjZShzLHUpXT1iW2ZdO3JldHVybiBNfHwoZC5vcGFjaXR5PU4oYSkpLGc9d2IoYSxiLCExKSxkLnJvdGF0aW9uPWcucm90YXRpb24qeixkLnNrZXdYPWcuc2tld1gqeixkLnNjYWxlWD1nLnNjYWxlWCxkLnNjYWxlWT1nLnNjYWxlWSxkLng9Zy54LGQueT1nLnksdmImJihkLno9Zy56LGQucm90YXRpb25YPWcucm90YXRpb25YKnosZC5yb3RhdGlvblk9Zy5yb3RhdGlvblkqeixkLnNjYWxlWj1nLnNjYWxlWiksZC5maWx0ZXJzJiZkZWxldGUgZC5maWx0ZXJzLGR9LFY9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGcsaCxpLGU9e30sZj1hLnN0eWxlO2ZvcihoIGluIGMpXCJjc3NUZXh0XCIhPT1oJiZcImxlbmd0aFwiIT09aCYmaXNOYU4oaCkmJmJbaF0hPT0oZz1jW2hdKSYmLTE9PT1oLmluZGV4T2YoXCJPcmlnaW5cIikmJihcIm51bWJlclwiPT10eXBlb2YgZ3x8XCJzdHJpbmdcIj09dHlwZW9mIGcpJiYoZVtoXT1cIlwiIT09ZyYmXCJhdXRvXCIhPT1nJiZcIm5vbmVcIiE9PWd8fFwic3RyaW5nXCIhPXR5cGVvZiBiW2hdfHxcIlwiPT09YltoXS5yZXBsYWNlKG0sXCJcIik/ZzowLHZvaWQgMCE9PWZbaF0mJihpPW5ldyBqYihmLGgsZltoXSxpKSkpO2lmKGQpZm9yKGggaW4gZClcImNsYXNzTmFtZVwiIT09aCYmKGVbaF09ZFtoXSk7cmV0dXJue2RpZnM6ZSxmaXJzdE1QVDppfX0sVz17d2lkdGg6W1wiTGVmdFwiLFwiUmlnaHRcIl0saGVpZ2h0OltcIlRvcFwiLFwiQm90dG9tXCJdfSxYPVtcIm1hcmdpbkxlZnRcIixcIm1hcmdpblJpZ2h0XCIsXCJtYXJnaW5Ub3BcIixcIm1hcmdpbkJvdHRvbVwiXSxZPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1wYXJzZUZsb2F0KFwid2lkdGhcIj09PWI/YS5vZmZzZXRXaWR0aDphLm9mZnNldEhlaWdodCksZT1XW2JdLGY9ZS5sZW5ndGg7Zm9yKGM9Y3x8UyhhLG51bGwpOy0tZj4tMTspZC09cGFyc2VGbG9hdChUKGEsXCJwYWRkaW5nXCIrZVtmXSxjLCEwKSl8fDAsZC09cGFyc2VGbG9hdChUKGEsXCJib3JkZXJcIitlW2ZdK1wiV2lkdGhcIixjLCEwKSl8fDA7cmV0dXJuIGR9LFo9ZnVuY3Rpb24oYSxiLGMsZCxlKXtpZihcInB4XCI9PT1kfHwhZClyZXR1cm4gYztpZihcImF1dG9cIj09PWR8fCFjKXJldHVybiAwO3ZhciBqLGY9di50ZXN0KGIpLGc9YSxoPUMuc3R5bGUsaT0wPmM7cmV0dXJuIGkmJihjPS1jKSxcIiVcIj09PWQmJi0xIT09Yi5pbmRleE9mKFwiYm9yZGVyXCIpP2o9Yy8xMDAqKGY/YS5jbGllbnRXaWR0aDphLmNsaWVudEhlaWdodCk6KGguY3NzVGV4dD1cImJvcmRlci1zdHlsZTpzb2xpZDsgYm9yZGVyLXdpZHRoOjA7IHBvc2l0aW9uOmFic29sdXRlOyBsaW5lLWhlaWdodDowO1wiLFwiJVwiIT09ZCYmXCJlbVwiIT09ZCYmZy5hcHBlbmRDaGlsZD9oW2Y/XCJib3JkZXJMZWZ0V2lkdGhcIjpcImJvcmRlclRvcFdpZHRoXCJdPWMrZDooZz1hLnBhcmVudE5vZGV8fEIuYm9keSxoW2Y/XCJ3aWR0aFwiOlwiaGVpZ2h0XCJdPWMrZCksZy5hcHBlbmRDaGlsZChDKSxqPXBhcnNlRmxvYXQoQ1tmP1wib2Zmc2V0V2lkdGhcIjpcIm9mZnNldEhlaWdodFwiXSksZy5yZW1vdmVDaGlsZChDKSwwIT09anx8ZXx8KGo9WihhLGIsYyxkLCEwKSkpLGk/LWo6an0sJD1mdW5jdGlvbihhLGIpeyhudWxsPT1hfHxcIlwiPT09YXx8XCJhdXRvXCI9PT1hfHxcImF1dG8gYXV0b1wiPT09YSkmJihhPVwiMCAwXCIpO3ZhciBjPWEuc3BsaXQoXCIgXCIpLGQ9LTEhPT1hLmluZGV4T2YoXCJsZWZ0XCIpP1wiMCVcIjotMSE9PWEuaW5kZXhPZihcInJpZ2h0XCIpP1wiMTAwJVwiOmNbMF0sZT0tMSE9PWEuaW5kZXhPZihcInRvcFwiKT9cIjAlXCI6LTEhPT1hLmluZGV4T2YoXCJib3R0b21cIik/XCIxMDAlXCI6Y1sxXTtyZXR1cm4gbnVsbD09ZT9lPVwiMFwiOlwiY2VudGVyXCI9PT1lJiYoZT1cIjUwJVwiKSwoXCJjZW50ZXJcIj09PWR8fGlzTmFOKHBhcnNlRmxvYXQoZCkpKSYmKGQ9XCI1MCVcIiksYiYmKGIub3hwPS0xIT09ZC5pbmRleE9mKFwiJVwiKSxiLm95cD0tMSE9PWUuaW5kZXhPZihcIiVcIiksYi5veHI9XCI9XCI9PT1kLmNoYXJBdCgxKSxiLm95cj1cIj1cIj09PWUuY2hhckF0KDEpLGIub3g9cGFyc2VGbG9hdChkLnJlcGxhY2UobSxcIlwiKSksYi5veT1wYXJzZUZsb2F0KGUucmVwbGFjZShtLFwiXCIpKSksZCtcIiBcIitlKyhjLmxlbmd0aD4yP1wiIFwiK2NbMl06XCJcIil9LF89ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYSYmXCI9XCI9PT1hLmNoYXJBdCgxKT9wYXJzZUludChhLmNoYXJBdCgwKStcIjFcIiwxMCkqcGFyc2VGbG9hdChhLnN1YnN0cigyKSk6cGFyc2VGbG9hdChhKS1wYXJzZUZsb2F0KGIpfSxhYj1mdW5jdGlvbihhLGIpe3JldHVybiBudWxsPT1hP2I6XCJzdHJpbmdcIj09dHlwZW9mIGEmJlwiPVwiPT09YS5jaGFyQXQoMSk/cGFyc2VJbnQoYS5jaGFyQXQoMCkrXCIxXCIsMTApKk51bWJlcihhLnN1YnN0cigyKSkrYjpwYXJzZUZsb2F0KGEpfSxiYj1mdW5jdGlvbihhLGIpe2lmKG51bGw9PWEpcmV0dXJuIGI7dmFyIGM9LTE9PT1hLmluZGV4T2YoXCJyYWRcIik/eToxLGQ9XCI9XCI9PT1hLmNoYXJBdCgxKTtyZXR1cm4gYT1OdW1iZXIoYS5yZXBsYWNlKG0sXCJcIikpKmMsZD9hK2I6YX0sY2I9ZnVuY3Rpb24oYSxiKXt2YXIgYz1cIm51bWJlclwiPT10eXBlb2YgYT9hKnk6YmIoYSxiKSxkPShjLWIpJSgyKk1hdGguUEkpO3JldHVybiBkIT09ZCVNYXRoLlBJJiYoZCs9TWF0aC5QSSooMD5kPzI6LTIpKSxiK2R9LGRiPXthcXVhOlswLDI1NSwyNTVdLGxpbWU6WzAsMjU1LDBdLHNpbHZlcjpbMTkyLDE5MiwxOTJdLGJsYWNrOlswLDAsMF0sbWFyb29uOlsxMjgsMCwwXSx0ZWFsOlswLDEyOCwxMjhdLGJsdWU6WzAsMCwyNTVdLG5hdnk6WzAsMCwxMjhdLHdoaXRlOlsyNTUsMjU1LDI1NV0sZnVjaHNpYTpbMjU1LDAsMjU1XSxvbGl2ZTpbMTI4LDEyOCwwXSx5ZWxsb3c6WzI1NSwyNTUsMF0sb3JhbmdlOlsyNTUsMTY1LDBdLGdyYXk6WzEyOCwxMjgsMTI4XSxwdXJwbGU6WzEyOCwwLDEyOF0sZ3JlZW46WzAsMTI4LDBdLHJlZDpbMjU1LDAsMF0scGluazpbMjU1LDE5MiwyMDNdLGN5YW46WzAsMjU1LDI1NV0sdHJhbnNwYXJlbnQ6WzI1NSwyNTUsMjU1LDBdfSxlYj1mdW5jdGlvbihhKXtpZighYXx8XCJcIj09PWEpcmV0dXJuIGRiLmJsYWNrO2lmKGRiW2FdKXJldHVybiBkYlthXTtpZihcIm51bWJlclwiPT10eXBlb2YgYSlyZXR1cm5bYT4+MTYsMjU1JmE+PjgsMjU1JmFdO2lmKFwiI1wiPT09YS5jaGFyQXQoMCkpe2lmKDQ9PT1hLmxlbmd0aCl7dmFyIGI9YS5jaGFyQXQoMSksYz1hLmNoYXJBdCgyKSxkPWEuY2hhckF0KDMpO2E9XCIjXCIrYitiK2MrYytkK2R9cmV0dXJuIGE9cGFyc2VJbnQoYS5zdWJzdHIoMSksMTYpLFthPj4xNiwyNTUmYT4+OCwyNTUmYV19cmV0dXJuIGE9YS5tYXRjaChqKXx8ZGIudHJhbnNwYXJlbnQsYVswXT1OdW1iZXIoYVswXSksYVsxXT1OdW1iZXIoYVsxXSksYVsyXT1OdW1iZXIoYVsyXSksYS5sZW5ndGg+MyYmKGFbM109TnVtYmVyKGFbM10pKSxhfSxmYj1cIig/OlxcXFxiKD86KD86cmdifHJnYmEpXFxcXCguKz9cXFxcKSl8XFxcXEIjLis/XFxcXGJcIjtmb3IoaSBpbiBkYilmYis9XCJ8XCIraStcIlxcXFxiXCI7ZmI9UmVnRXhwKGZiK1wiKVwiLFwiZ2lcIik7dmFyIGdiPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gYX07dmFyIGQ9Yj8oYS5tYXRjaChmYil8fFtcIlwiXSlbMF06XCJcIixlPWEuc3BsaXQoZCkuam9pbihcIlwiKS5tYXRjaChsKXx8W10sZj1hLnN1YnN0cigwLGEuaW5kZXhPZihlWzBdKSksZz1cIilcIj09PWEuY2hhckF0KGEubGVuZ3RoLTEpP1wiKVwiOlwiXCIsaD0tMSE9PWEuaW5kZXhPZihcIiBcIik/XCIgXCI6XCIsXCIsaT1lLmxlbmd0aCxrPWk+MD9lWzBdLnJlcGxhY2UoaixcIlwiKTpcIlwiO3JldHVybiBiP2Z1bmN0aW9uKGEpe1wibnVtYmVyXCI9PXR5cGVvZiBhJiYoYSs9ayk7dmFyIGI9KGEubWF0Y2goZmIpfHxbZF0pWzBdLGo9YS5zcGxpdChiKS5qb2luKFwiXCIpLm1hdGNoKGwpfHxbXSxtPWoubGVuZ3RoO2lmKGk+bS0tKWZvcig7aT4rK207KWpbbV09Yz9qWyhtLTEpLzI+PjBdOmVbbV07cmV0dXJuIGYrai5qb2luKGgpK2grYitnfTpmdW5jdGlvbihhKXtcIm51bWJlclwiPT10eXBlb2YgYSYmKGErPWspO3ZhciBiPWEubWF0Y2gobCl8fFtdLGQ9Yi5sZW5ndGg7aWYoaT5kLS0pZm9yKDtpPisrZDspYltkXT1jP2JbKGQtMSkvMj4+MF06ZVtkXTtyZXR1cm4gZitiLmpvaW4oaCkrZ319LGhiPWZ1bmN0aW9uKGEpe3JldHVybiBhPWEuc3BsaXQoXCIsXCIpLGZ1bmN0aW9uKGIsYyxkLGUsZixnLGgpe3ZhciBqLGk9KGMrXCJcIikuc3BsaXQoXCIgXCIpO2ZvcihoPXt9LGo9MDs0Pmo7aisrKWhbYVtqXV09aVtqXT1pW2pdfHxpWyhqLTEpLzI+PjBdO3JldHVybiBlLnBhcnNlKGIsaCxmLGcpfX0samI9KEUuX3NldFBsdWdpblJhdGlvPWZ1bmN0aW9uKGEpe3RoaXMucGx1Z2luLnNldFJhdGlvKGEpO2Zvcih2YXIgZixnLGgsaSxiPXRoaXMuZGF0YSxjPWIucHJveHksZD1iLmZpcnN0TVBULGU9MWUtNjtkOylmPWNbZC52XSxkLnI/Zj1mPjA/ZisuNT4+MDpmLS41Pj4wOmU+ZiYmZj4tZSYmKGY9MCksZC50W2QucF09ZixkPWQuX25leHQ7aWYoYi5hdXRvUm90YXRlJiYoYi5hdXRvUm90YXRlLnJvdGF0aW9uPWMucm90YXRpb24pLDE9PT1hKWZvcihkPWIuZmlyc3RNUFQ7ZDspe2lmKGc9ZC50LGcudHlwZSl7aWYoMT09PWcudHlwZSl7Zm9yKGk9Zy54czArZy5zK2cueHMxLGg9MTtnLmw+aDtoKyspaSs9Z1tcInhuXCIraF0rZ1tcInhzXCIrKGgrMSldO2cuZT1pfX1lbHNlIGcuZT1nLnMrZy54czA7ZD1kLl9uZXh0fX0sZnVuY3Rpb24oYSxiLGMsZCxlKXt0aGlzLnQ9YSx0aGlzLnA9Yix0aGlzLnY9Yyx0aGlzLnI9ZSxkJiYoZC5fcHJldj10aGlzLHRoaXMuX25leHQ9ZCl9KSxsYj0oRS5fcGFyc2VUb1Byb3h5PWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgbCxtLG4sbyxwLGc9ZCxoPXt9LGk9e30saj1jLl90cmFuc2Zvcm0saz1BO2ZvcihjLl90cmFuc2Zvcm09bnVsbCxBPWIsZD1wPWMucGFyc2UoYSxiLGQsZSksQT1rLGYmJihjLl90cmFuc2Zvcm09aixnJiYoZy5fcHJldj1udWxsLGcuX3ByZXYmJihnLl9wcmV2Ll9uZXh0PW51bGwpKSk7ZCYmZCE9PWc7KXtpZigxPj1kLnR5cGUmJihtPWQucCxpW21dPWQucytkLmMsaFttXT1kLnMsZnx8KG89bmV3IGpiKGQsXCJzXCIsbSxvLGQuciksZC5jPTApLDE9PT1kLnR5cGUpKWZvcihsPWQubDstLWw+MDspbj1cInhuXCIrbCxtPWQucCtcIl9cIituLGlbbV09ZC5kYXRhW25dLGhbbV09ZFtuXSxmfHwobz1uZXcgamIoZCxuLG0sbyxkLnJ4cFtuXSkpO2Q9ZC5fbmV4dH1yZXR1cm57cHJveHk6aCxlbmQ6aSxmaXJzdE1QVDpvLHB0OnB9fSxFLkNTU1Byb3BUd2Vlbj1mdW5jdGlvbihhLGIsYyxlLGYsaCxpLGosayxsLG0pe3RoaXMudD1hLHRoaXMucD1iLHRoaXMucz1jLHRoaXMuYz1lLHRoaXMubj1pfHxcImNzc19cIitiLGEgaW5zdGFuY2VvZiBsYnx8Zy5wdXNoKHRoaXMubiksdGhpcy5yPWosdGhpcy50eXBlPWh8fDAsayYmKHRoaXMucHI9ayxkPSEwKSx0aGlzLmI9dm9pZCAwPT09bD9jOmwsdGhpcy5lPXZvaWQgMD09PW0/YytlOm0sZiYmKHRoaXMuX25leHQ9ZixmLl9wcmV2PXRoaXMpfSksbWI9Yy5wYXJzZUNvbXBsZXg9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGksbCl7Zz1uZXcgbGIoYSxiLDAsMCxnLGw/MjoxLG51bGwsITEsaCxjLGQpO3ZhciBxLHIscyx0LHUsdix3LHgseSx6LEEsQixtPWMuc3BsaXQoXCIsIFwiKS5qb2luKFwiLFwiKS5zcGxpdChcIiBcIiksbj0oZCtcIlwiKS5zcGxpdChcIiwgXCIpLmpvaW4oXCIsXCIpLnNwbGl0KFwiIFwiKSxvPW0ubGVuZ3RoLHA9RyE9PSExO2ZvcihvIT09bi5sZW5ndGgmJihtPShmfHxcIlwiKS5zcGxpdChcIiBcIiksbz1tLmxlbmd0aCksZy5wbHVnaW49aSxnLnNldFJhdGlvPWwscT0wO28+cTtxKyspaWYodD1tW3FdLHU9bltxXSx4PXBhcnNlRmxvYXQodCkseHx8MD09PXgpZy5hcHBlbmRYdHJhKFwiXCIseCxfKHUseCksdS5yZXBsYWNlKGssXCJcIikscCYmLTEhPT11LmluZGV4T2YoXCJweFwiKSwhMCk7ZWxzZSBpZihlJiYoXCIjXCI9PT10LmNoYXJBdCgwKXx8MD09PXQuaW5kZXhPZihcInJnYlwiKXx8ZGJbdF0pKXQ9ZWIodCksdT1lYih1KSx5PXQubGVuZ3RoK3UubGVuZ3RoPjYseSYmIU0mJjA9PT11WzNdPyhnW1wieHNcIitnLmxdKz1nLmw/XCIgdHJhbnNwYXJlbnRcIjpcInRyYW5zcGFyZW50XCIsZy5lPWcuZS5zcGxpdChuW3FdKS5qb2luKFwidHJhbnNwYXJlbnRcIikpOihNfHwoeT0hMSksZy5hcHBlbmRYdHJhKHk/XCJyZ2JhKFwiOlwicmdiKFwiLHRbMF0sdVswXS10WzBdLFwiLFwiLCEwLCEwKS5hcHBlbmRYdHJhKFwiXCIsdFsxXSx1WzFdLXRbMV0sXCIsXCIsITApLmFwcGVuZFh0cmEoXCJcIix0WzJdLHVbMl0tdFsyXSx5P1wiLFwiOlwiKVwiLCEwKSx5JiYodD00PnQubGVuZ3RoPzE6dFszXSxnLmFwcGVuZFh0cmEoXCJcIix0LCg0PnUubGVuZ3RoPzE6dVszXSktdCxcIilcIiwhMSkpKTtlbHNlIGlmKHY9dC5tYXRjaChqKSl7aWYodz11Lm1hdGNoKGspLCF3fHx3Lmxlbmd0aCE9PXYubGVuZ3RoKXJldHVybiBnO2ZvcihzPTAscj0wO3YubGVuZ3RoPnI7cisrKUE9dltyXSx6PXQuaW5kZXhPZihBLHMpLGcuYXBwZW5kWHRyYSh0LnN1YnN0cihzLHotcyksTnVtYmVyKEEpLF8od1tyXSxBKSxcIlwiLHAmJlwicHhcIj09PXQuc3Vic3RyKHorQS5sZW5ndGgsMiksMD09PXIpLHM9eitBLmxlbmd0aDtnW1wieHNcIitnLmxdKz10LnN1YnN0cihzKX1lbHNlIGdbXCJ4c1wiK2cubF0rPWcubD9cIiBcIit0OnQ7aWYoLTEhPT1kLmluZGV4T2YoXCI9XCIpJiZnLmRhdGEpe2ZvcihCPWcueHMwK2cuZGF0YS5zLHE9MTtnLmw+cTtxKyspQis9Z1tcInhzXCIrcV0rZy5kYXRhW1wieG5cIitxXTtnLmU9QitnW1wieHNcIitxXX1yZXR1cm4gZy5sfHwoZy50eXBlPS0xLGcueHMwPWcuZSksZy54Zmlyc3R8fGd9LG5iPTk7Zm9yKGk9bGIucHJvdG90eXBlLGkubD1pLnByPTA7LS1uYj4wOylpW1wieG5cIituYl09MCxpW1wieHNcIituYl09XCJcIjtpLnhzMD1cIlwiLGkuX25leHQ9aS5fcHJldj1pLnhmaXJzdD1pLmRhdGE9aS5wbHVnaW49aS5zZXRSYXRpbz1pLnJ4cD1udWxsLGkuYXBwZW5kWHRyYT1mdW5jdGlvbihhLGIsYyxkLGUsZil7dmFyIGc9dGhpcyxoPWcubDtyZXR1cm4gZ1tcInhzXCIraF0rPWYmJmg/XCIgXCIrYTphfHxcIlwiLGN8fDA9PT1ofHxnLnBsdWdpbj8oZy5sKyssZy50eXBlPWcuc2V0UmF0aW8/MjoxLGdbXCJ4c1wiK2cubF09ZHx8XCJcIixoPjA/KGcuZGF0YVtcInhuXCIraF09YitjLGcucnhwW1wieG5cIitoXT1lLGdbXCJ4blwiK2hdPWIsZy5wbHVnaW58fChnLnhmaXJzdD1uZXcgbGIoZyxcInhuXCIraCxiLGMsZy54Zmlyc3R8fGcsMCxnLm4sZSxnLnByKSxnLnhmaXJzdC54czA9MCksZyk6KGcuZGF0YT17czpiK2N9LGcucnhwPXt9LGcucz1iLGcuYz1jLGcucj1lLGcpKTooZ1tcInhzXCIraF0rPWIrKGR8fFwiXCIpLGcpfTt2YXIgb2I9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7dGhpcy5wPWQ/UihhKXx8YTphLGhbYV09aFt0aGlzLnBdPXRoaXMsdGhpcy5mb3JtYXQ9Znx8Z2IoYixlKSxjJiYodGhpcy5wYXJzZT1jKSx0aGlzLmNscnM9ZSx0aGlzLmRmbHQ9Yix0aGlzLnByPWd8fDB9LHBiPUUuX3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe2Zvcih2YXIgayxoPWEuc3BsaXQoXCIsXCIpLGk9YiBpbnN0YW5jZW9mIEFycmF5P2I6W2JdLGo9aC5sZW5ndGg7LS1qPi0xOylrPW5ldyBvYihoW2pdLGlbal0sYyxkJiYwPT09aixlLGYsZyl9LHFiPWZ1bmN0aW9uKGEpe2lmKCFoW2FdKXt2YXIgYj1hLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyKDEpK1wiUGx1Z2luXCI7cGIoYSxudWxsLGZ1bmN0aW9uKGEsYyxkLGUsZixnLGkpe3ZhciBqPSh3aW5kb3cuR3JlZW5Tb2NrR2xvYmFsc3x8d2luZG93KS5jb20uZ3JlZW5zb2NrLnBsdWdpbnNbYl07cmV0dXJuIGo/KGouX2Nzc1JlZ2lzdGVyKCksaFtkXS5wYXJzZShhLGMsZCxlLGYsZyxpKSk6KE8oXCJFcnJvcjogXCIrYitcIiBqcyBmaWxlIG5vdCBsb2FkZWQuXCIpLGYpfSl9fTtpPW9iLnByb3RvdHlwZSxpLnBhcnNlQ29tcGxleD1mdW5jdGlvbihhLGIsYyxkLGUsZil7cmV0dXJuIG1iKGEsdGhpcy5wLGIsYyx0aGlzLmNscnMsdGhpcy5kZmx0LGQsdGhpcy5wcixlLGYpfSxpLnBhcnNlPWZ1bmN0aW9uKGEsYixjLGQsZSxnKXtyZXR1cm4gdGhpcy5wYXJzZUNvbXBsZXgoYS5zdHlsZSx0aGlzLmZvcm1hdChUKGEsYyxmLCExLHRoaXMuZGZsdCkpLHRoaXMuZm9ybWF0KGIpLGUsZyl9LGMucmVnaXN0ZXJTcGVjaWFsUHJvcD1mdW5jdGlvbihhLGIsYyl7cGIoYSxudWxsLGZ1bmN0aW9uKGEsZCxlLGYsZyxoKXt2YXIgaj1uZXcgbGIoYSxlLDAsMCxnLDIsZSwhMSxjKTtyZXR1cm4gai5wbHVnaW49aCxqLnNldFJhdGlvPWIoYSxkLGYuX3R3ZWVuLGUpLGp9LCExLCExLG51bGwsYyl9O3ZhciByYj1bXCJzY2FsZVhcIixcInNjYWxlWVwiLFwic2NhbGVaXCIsXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJza2V3WFwiLFwicm90YXRpb25cIixcInJvdGF0aW9uWFwiLFwicm90YXRpb25ZXCIsXCJwZXJzcGVjdGl2ZVwiXSxzYj1SKFwidHJhbnNmb3JtXCIpLHRiPVArXCJ0cmFuc2Zvcm1cIix1Yj1SKFwidHJhbnNmb3JtT3JpZ2luXCIpLHZiPW51bGwhPT1SKFwicGVyc3BlY3RpdmVcIiksd2I9ZnVuY3Rpb24oYSxiLGQpe3ZhciBsLG0sbixvLHAscSxyLHMsdCx1LHYseCxlPWQ/YS5fZ3NUcmFuc2Zvcm18fHtza2V3WTowfTp7c2tld1k6MH0sZj0wPmUuc2NhbGVYLGc9MmUtNSxoPTFlNSxpPS1NYXRoLlBJKzFlLTQsaj1NYXRoLlBJLTFlLTQsaz12Yj9wYXJzZUZsb2F0KFQoYSx1YixiLCExLFwiMCAwIDBcIikuc3BsaXQoXCIgXCIpWzJdKXx8ZS56T3JpZ2lufHwwOjA7Zm9yKHNiP2w9VChhLHRiLGIsITApOmEuY3VycmVudFN0eWxlJiYobD1hLmN1cnJlbnRTdHlsZS5maWx0ZXIubWF0Y2godyksbD1sJiY0PT09bC5sZW5ndGg/bFswXS5zdWJzdHIoNCkrXCIsXCIrTnVtYmVyKGxbMl0uc3Vic3RyKDQpKStcIixcIitOdW1iZXIobFsxXS5zdWJzdHIoNCkpK1wiLFwiK2xbM10uc3Vic3RyKDQpK1wiLFwiKyhlP2UueDowKStcIixcIisoZT9lLnk6MCk6bnVsbCksbT0obHx8XCJcIikubWF0Y2goLyg/OlxcLXxcXGIpW1xcZFxcLVxcLmVdK1xcYi9naSl8fFtdLG49bS5sZW5ndGg7LS1uPi0xOylvPU51bWJlcihtW25dKSxtW25dPShvKmgrKDA+bz8tLjU6LjUpPj4wKS9oO2lmKDE2PT09bS5sZW5ndGgpe3ZhciB5PW1bOF0sej1tWzldLEE9bVsxMF0sQj1tWzEyXSxDPW1bMTNdLEQ9bVsxNF07aWYoZS56T3JpZ2luJiYoRD0tZS56T3JpZ2luLEI9eSpELW1bMTJdLEM9eipELW1bMTNdLEQ9QSpEK2Uuek9yaWdpbi1tWzE0XSksIWR8fEIhPT1lLnh8fEMhPT1lLnl8fEQhPT1lLnope3ZhciBQLFEsUixTLFUsVixXLFgsRT1tWzBdLEY9bVsxXSxHPW1bMl0sSD1tWzNdLEk9bVs0XSxKPW1bNV0sSz1tWzZdLEw9bVs3XSxNPW1bMTFdLE49ZS5yb3RhdGlvblg9TWF0aC5hdGFuMihLLEEpLE89aT5OfHxOPmo7TiYmKFU9TWF0aC5jb3MoLU4pLFY9TWF0aC5zaW4oLU4pLFA9SSpVK3kqVixRPUoqVSt6KlYsUj1LKlUrQSpWLFM9TCpVK00qVix5PUkqLVYreSpVLHo9SiotVit6KlUsQT1LKi1WK0EqVSxNPUwqLVYrTSpVLEk9UCxKPVEsSz1SKSxOPWUucm90YXRpb25ZPU1hdGguYXRhbjIoeSxFKSxOJiYoVz1pPk58fE4+aixVPU1hdGguY29zKC1OKSxWPU1hdGguc2luKC1OKSxQPUUqVS15KlYsUT1GKlUteipWLFI9RypVLUEqVixTPUgqVS1NKlYsej1GKlYreipVLEE9RypWK0EqVSxNPUgqVitNKlUsRT1QLEY9USxHPVIpLE49ZS5yb3RhdGlvbj1NYXRoLmF0YW4yKEYsSiksTiYmKFg9aT5OfHxOPmosVT1NYXRoLmNvcygtTiksVj1NYXRoLnNpbigtTiksRT1FKlUrSSpWLFE9RipVK0oqVixKPUYqLVYrSipVLEs9RyotVitLKlUsRj1RKSxYJiZPP2Uucm90YXRpb249ZS5yb3RhdGlvblg9MDpYJiZXP2Uucm90YXRpb249ZS5yb3RhdGlvblk9MDpXJiZPJiYoZS5yb3RhdGlvblk9ZS5yb3RhdGlvblg9MCksZS5zY2FsZVg9KE1hdGguc3FydChFKkUrRipGKSpoKy41Pj4wKS9oLGUuc2NhbGVZPShNYXRoLnNxcnQoSipKK3oqeikqaCsuNT4+MCkvaCxlLnNjYWxlWj0oTWF0aC5zcXJ0KEsqSytBKkEpKmgrLjU+PjApL2gsZS5za2V3WD0wLGUucGVyc3BlY3RpdmU9TT8xL006MCxlLng9QixlLnk9QyxlLno9RH19ZWxzZSBpZighdmJ8fDA9PT1tLmxlbmd0aHx8ZS54IT09bVs0XXx8ZS55IT09bVs1XXx8IWUucm90YXRpb25YJiYhZS5yb3RhdGlvblkpe3ZhciBZPW0ubGVuZ3RoPj02LFo9WT9tWzBdOjEsJD1tWzFdfHwwLF89bVsyXXx8MCxhYj1ZP21bM106MTtlLng9bVs0XXx8MCxlLnk9bVs1XXx8MCxwPU1hdGguc3FydChaKlorJCokKSxxPU1hdGguc3FydChhYiphYitfKl8pLHI9Wnx8JD9NYXRoLmF0YW4yKCQsWik6ZS5yb3RhdGlvbnx8MCxzPV98fGFiP01hdGguYXRhbjIoXyxhYikrcjplLnNrZXdYfHwwLHQ9cC1NYXRoLmFicyhlLnNjYWxlWHx8MCksdT1xLU1hdGguYWJzKGUuc2NhbGVZfHwwKSxNYXRoLmFicyhzKT5NYXRoLlBJLzImJk1hdGguYWJzKHMpPDEuNSpNYXRoLlBJJiYoZj8ocCo9LTEscys9MD49cj9NYXRoLlBJOi1NYXRoLlBJLHIrPTA+PXI/TWF0aC5QSTotTWF0aC5QSSk6KHEqPS0xLHMrPTA+PXM/TWF0aC5QSTotTWF0aC5QSSkpLHY9KHItZS5yb3RhdGlvbiklTWF0aC5QSSx4PShzLWUuc2tld1gpJU1hdGguUEksKHZvaWQgMD09PWUuc2tld1h8fHQ+Z3x8LWc+dHx8dT5nfHwtZz51fHx2PmkmJmo+diYmMCE9PXYqaD4+MHx8eD5pJiZqPngmJjAhPT14Kmg+PjApJiYoZS5zY2FsZVg9cCxlLnNjYWxlWT1xLGUucm90YXRpb249cixlLnNrZXdYPXMpLHZiJiYoZS5yb3RhdGlvblg9ZS5yb3RhdGlvblk9ZS56PTAsZS5wZXJzcGVjdGl2ZT1wYXJzZUZsb2F0KGMuZGVmYXVsdFRyYW5zZm9ybVBlcnNwZWN0aXZlKXx8MCxlLnNjYWxlWj0xKX1lLnpPcmlnaW49aztmb3IobiBpbiBlKWc+ZVtuXSYmZVtuXT4tZyYmKGVbbl09MCk7cmV0dXJuIGQmJihhLl9nc1RyYW5zZm9ybT1lKSxlfSx4Yj1mdW5jdGlvbihhKXt2YXIgbCxtLGI9dGhpcy5kYXRhLGM9LWIucm90YXRpb24sZD1jK2Iuc2tld1gsZT0xZTUsZj0oTWF0aC5jb3MoYykqYi5zY2FsZVgqZT4+MCkvZSxnPShNYXRoLnNpbihjKSpiLnNjYWxlWCplPj4wKS9lLGg9KE1hdGguc2luKGQpKi1iLnNjYWxlWSplPj4wKS9lLGk9KE1hdGguY29zKGQpKmIuc2NhbGVZKmU+PjApL2Usaj10aGlzLnQuc3R5bGUsaz10aGlzLnQuY3VycmVudFN0eWxlO2lmKGspe209ZyxnPS1oLGg9LW0sbD1rLmZpbHRlcixqLmZpbHRlcj1cIlwiO3ZhciB2LHcscD10aGlzLnQub2Zmc2V0V2lkdGgscT10aGlzLnQub2Zmc2V0SGVpZ2h0LHI9XCJhYnNvbHV0ZVwiIT09ay5wb3NpdGlvbixzPVwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeChNMTE9XCIrZitcIiwgTTEyPVwiK2crXCIsIE0yMT1cIitoK1wiLCBNMjI9XCIraSx0PWIueCx1PWIueTtpZihudWxsIT1iLm94JiYodj0oYi5veHA/LjAxKnAqYi5veDpiLm94KS1wLzIsdz0oYi5veXA/LjAxKnEqYi5veTpiLm95KS1xLzIsdCs9di0odipmK3cqZyksdSs9dy0odipoK3cqaSkpLHIpdj1wLzIsdz1xLzIscys9XCIsIER4PVwiKyh2LSh2KmYrdypnKSt0KStcIiwgRHk9XCIrKHctKHYqaCt3KmkpK3UpK1wiKVwiO2Vsc2V7dmFyIHosQSxCLHk9OD5MPzE6LTE7Zm9yKHY9Yi5pZU9mZnNldFh8fDAsdz1iLmllT2Zmc2V0WXx8MCxiLmllT2Zmc2V0WD1NYXRoLnJvdW5kKChwLSgoMD5mPy1mOmYpKnArKDA+Zz8tZzpnKSpxKSkvMit0KSxiLmllT2Zmc2V0WT1NYXRoLnJvdW5kKChxLSgoMD5pPy1pOmkpKnErKDA+aD8taDpoKSpwKSkvMit1KSxuYj0wOzQ+bmI7bmIrKylBPVhbbmJdLHo9a1tBXSxtPS0xIT09ei5pbmRleE9mKFwicHhcIik/cGFyc2VGbG9hdCh6KTpaKHRoaXMudCxBLHBhcnNlRmxvYXQoeiksei5yZXBsYWNlKG4sXCJcIikpfHwwLEI9bSE9PWJbQV0/Mj5uYj8tYi5pZU9mZnNldFg6LWIuaWVPZmZzZXRZOjI+bmI/di1iLmllT2Zmc2V0WDp3LWIuaWVPZmZzZXRZLGpbQV09KGJbQV09TWF0aC5yb3VuZChtLUIqKDA9PT1uYnx8Mj09PW5iPzE6eSkpKStcInB4XCI7cys9XCIsIHNpemluZ01ldGhvZD0nYXV0byBleHBhbmQnKVwifWouZmlsdGVyPS0xIT09bC5pbmRleE9mKFwiRFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuTWF0cml4KFwiKT9sLnJlcGxhY2UoeCxzKTpzK1wiIFwiK2wsKDA9PT1hfHwxPT09YSkmJjE9PT1mJiYwPT09ZyYmMD09PWgmJjE9PT1pJiYociYmLTE9PT1zLmluZGV4T2YoXCJEeD0wLCBEeT0wXCIpfHxvLnRlc3QobCkmJjEwMCE9PXBhcnNlRmxvYXQoUmVnRXhwLiQxKXx8LTE9PT1sLmluZGV4T2YoXCJncmFkaWVudChcIikmJmoucmVtb3ZlQXR0cmlidXRlKFwiZmlsdGVyXCIpKX19LHliPWZ1bmN0aW9uKCl7dmFyIHgseSx6LEEsQixDLEQsRSxGLGI9dGhpcy5kYXRhLGM9dGhpcy50LnN0eWxlLGQ9Yi5wZXJzcGVjdGl2ZSxlPWIuc2NhbGVYLGY9MCxnPTAsaD0wLGk9MCxqPWIuc2NhbGVZLGs9MCxsPTAsbT0wLG49MCxvPWIuc2NhbGVaLHA9MCxxPTAscj0wLHM9ZD8tMS9kOjAsdD1iLnJvdGF0aW9uLHU9Yi56T3JpZ2luLHY9XCIsXCIsdz0xZTU7SiYmKEQ9VCh0aGlzLnQsXCJ0b3BcIixudWxsLCExLFwiMFwiKSxFPXBhcnNlRmxvYXQoRCl8fDAsRj1ELnN1YnN0cigoRStcIlwiKS5sZW5ndGgpLGIuX2ZmRml4PSFiLl9mZkZpeCxjLnRvcD0oYi5fZmZGaXg/RSsuMDU6RS0uMDUpKyhcIlwiPT09Rj9cInB4XCI6RikpLCh0fHxiLnNrZXdYKSYmKHo9ZSpNYXRoLmNvcyh0KSxBPWoqTWF0aC5zaW4odCksdC09Yi5za2V3WCxmPWUqLU1hdGguc2luKHQpLGoqPU1hdGguY29zKHQpLGU9eixpPUEpLHQ9Yi5yb3RhdGlvblksdCYmKHg9TWF0aC5jb3ModCkseT1NYXRoLnNpbih0KSx6PWUqeCxBPWkqeCxCPW8qLXksQz1zKi15LGc9ZSp5LGs9aSp5LG8qPXgscyo9eCxlPXosaT1BLG09QixxPUMpLHQ9Yi5yb3RhdGlvblgsdCYmKHg9TWF0aC5jb3ModCkseT1NYXRoLnNpbih0KSx6PWYqeCtnKnksQT1qKngrayp5LEI9bip4K28qeSxDPXIqeCtzKnksZz1mKi15K2cqeCxrPWoqLXkrayp4LG89bioteStvKngscz1yKi15K3MqeCxmPXosaj1BLG49QixyPUMpLHUmJihwLT11LGg9ZypwLGw9aypwLHA9bypwK3UpLGgrPWIueCxsKz1iLnkscD0oKHArYi56KSp3Pj4wKS93LGNbc2JdPVwibWF0cml4M2QoXCIrKGUqdz4+MCkvdyt2KyhpKnc+PjApL3crdisobSp3Pj4wKS93K3YrKHEqdz4+MCkvdyt2KyhmKnc+PjApL3crdisoaip3Pj4wKS93K3YrKG4qdz4+MCkvdyt2KyhyKnc+PjApL3crdisoZyp3Pj4wKS93K3YrKGsqdz4+MCkvdyt2KyhvKnc+PjApL3crdisocyp3Pj4wKS93K3YrKGgqdz4+MCkvdyt2KyhsKnc+PjApL3crditwK3YrKGQ/MSstcC9kOjEpK1wiKVwifSx6Yj1mdW5jdGlvbigpe3ZhciBkLGUsZixnLGgsaSxqLGssYj10aGlzLmRhdGEsYz10aGlzLnQ7SiYmKGQ9VChjLFwidG9wXCIsbnVsbCwhMSxcIjBcIiksZT1wYXJzZUZsb2F0KGQpfHwwLGY9ZC5zdWJzdHIoKGUrXCJcIikubGVuZ3RoKSxiLl9mZkZpeD0hYi5fZmZGaXgsYy5zdHlsZS50b3A9KGIuX2ZmRml4P2UrLjA1OmUtLjA1KSsoXCJcIj09PWY/XCJweFwiOmYpKSxiLnJvdGF0aW9ufHxiLnNrZXdYPyhnPWIucm90YXRpb24saD1nLWIuc2tld1gsaT0xZTUsaj1iLnNjYWxlWCppLGs9Yi5zY2FsZVkqaSxjLnN0eWxlW3NiXT1cIm1hdHJpeChcIisoTWF0aC5jb3MoZykqaj4+MCkvaStcIixcIisoTWF0aC5zaW4oZykqaj4+MCkvaStcIixcIisoTWF0aC5zaW4oaCkqLWs+PjApL2krXCIsXCIrKE1hdGguY29zKGgpKms+PjApL2krXCIsXCIrYi54K1wiLFwiK2IueStcIilcIik6Yy5zdHlsZVtzYl09XCJtYXRyaXgoXCIrYi5zY2FsZVgrXCIsMCwwLFwiK2Iuc2NhbGVZK1wiLFwiK2IueCtcIixcIitiLnkrXCIpXCJ9O3BiKFwidHJhbnNmb3JtLHNjYWxlLHNjYWxlWCxzY2FsZVksc2NhbGVaLHgseSx6LHJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblkscm90YXRpb25aLHNrZXdYLHNrZXdZLHNob3J0Um90YXRpb24sc2hvcnRSb3RhdGlvblgsc2hvcnRSb3RhdGlvblksc2hvcnRSb3RhdGlvblosdHJhbnNmb3JtT3JpZ2luLHRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsbnVsbCxmdW5jdGlvbihhLGIsYyxkLGUsZyxoKXtpZihkLl90cmFuc2Zvcm0pcmV0dXJuIGU7dmFyIG4sbyxwLHEscixzLHQsaT1kLl90cmFuc2Zvcm09d2IoYSxmLCEwKSxqPWEuc3R5bGUsaz0xZS02LGw9cmIubGVuZ3RoLG09aDtmb3IoXCJzdHJpbmdcIj09dHlwZW9mIG0udHJhbnNmb3JtJiZzYj8ocT1qW3NiXSxqW3NiXT1tLnRyYW5zZm9ybSxuPXdiKGEsbnVsbCwhMSksaltzYl09cSk6XCJvYmplY3RcIj09dHlwZW9mIG0mJihvPW51bGwhPW0ucm90YXRpb24/bS5yb3RhdGlvbjpudWxsIT1tLnJvdGF0aW9uWj9tLnJvdGF0aW9uWjppLnJvdGF0aW9uKnosbj17c2NhbGVYOmFiKG51bGwhPW0uc2NhbGVYP20uc2NhbGVYOm0uc2NhbGUsaS5zY2FsZVgpLHNjYWxlWTphYihudWxsIT1tLnNjYWxlWT9tLnNjYWxlWTptLnNjYWxlLGkuc2NhbGVZKSxzY2FsZVo6YWIobnVsbCE9bS5zY2FsZVo/bS5zY2FsZVo6bS5zY2FsZSxpLnNjYWxlWikseDphYihtLngsaS54KSx5OmFiKG0ueSxpLnkpLHo6YWIobS56LGkueikscGVyc3BlY3RpdmU6YWIobS50cmFuc2Zvcm1QZXJzcGVjdGl2ZSxpLnBlcnNwZWN0aXZlKX0sbi5yb3RhdGlvbj1udWxsIT1tLnNob3J0Um90YXRpb258fG51bGwhPW0uc2hvcnRSb3RhdGlvblo/Y2IobS5zaG9ydFJvdGF0aW9ufHxtLnNob3J0Um90YXRpb25afHwwLGkucm90YXRpb24pOlwibnVtYmVyXCI9PXR5cGVvZiBvP28qeTpiYihvLGkucm90YXRpb24pLHZiJiYobi5yb3RhdGlvblg9bnVsbCE9bS5zaG9ydFJvdGF0aW9uWD9jYihtLnNob3J0Um90YXRpb25YLGkucm90YXRpb25YKTpcIm51bWJlclwiPT10eXBlb2YgbS5yb3RhdGlvblg/bS5yb3RhdGlvblgqeTpiYihtLnJvdGF0aW9uWCxpLnJvdGF0aW9uWCksbi5yb3RhdGlvblk9bnVsbCE9bS5zaG9ydFJvdGF0aW9uWT9jYihtLnNob3J0Um90YXRpb25ZLGkucm90YXRpb25ZKTpcIm51bWJlclwiPT10eXBlb2YgbS5yb3RhdGlvblk/bS5yb3RhdGlvblkqeTpiYihtLnJvdGF0aW9uWSxpLnJvdGF0aW9uWSksaz5uLnJvdGF0aW9uWCYmbi5yb3RhdGlvblg+LWsmJihuLnJvdGF0aW9uWD0wKSxrPm4ucm90YXRpb25ZJiZuLnJvdGF0aW9uWT4tayYmKG4ucm90YXRpb25ZPTApKSxuLnNrZXdYPW51bGw9PW0uc2tld1g/aS5za2V3WDpcIm51bWJlclwiPT10eXBlb2YgbS5za2V3WD9tLnNrZXdYKnk6YmIobS5za2V3WCxpLnNrZXdYKSxuLnNrZXdZPW51bGw9PW0uc2tld1k/aS5za2V3WTpcIm51bWJlclwiPT10eXBlb2YgbS5za2V3WT9tLnNrZXdZKnk6YmIobS5za2V3WSxpLnNrZXdZKSwocD1uLnNrZXdZLWkuc2tld1kpJiYobi5za2V3WCs9cCxuLnJvdGF0aW9uKz1wKSxrPm4uc2tld1kmJm4uc2tld1k+LWsmJihuLnNrZXdZPTApLGs+bi5za2V3WCYmbi5za2V3WD4tayYmKG4uc2tld1g9MCksaz5uLnJvdGF0aW9uJiZuLnJvdGF0aW9uPi1rJiYobi5yb3RhdGlvbj0wKSkscz1pLnp8fGkucm90YXRpb25YfHxpLnJvdGF0aW9uWXx8bi56fHxuLnJvdGF0aW9uWHx8bi5yb3RhdGlvbll8fG4ucGVyc3BlY3RpdmUsc3x8bnVsbD09bi5zY2FsZXx8KG4uc2NhbGVaPTEpOy0tbD4tMTspYz1yYltsXSxyPW5bY10taVtjXSwocj5rfHwtaz5yfHxudWxsIT1BW2NdKSYmKHQ9ITAsZT1uZXcgbGIoaSxjLGlbY10scixlKSxlLnhzMD0wLGUucGx1Z2luPWcsZC5fb3ZlcndyaXRlUHJvcHMucHVzaChlLm4pKTtyZXR1cm4gcj1tLnRyYW5zZm9ybU9yaWdpbiwocnx8dmImJnMmJmkuek9yaWdpbikmJihzYj8odD0hMCxyPShyfHxUKGEsYyxmLCExLFwiNTAlIDUwJVwiKSkrXCJcIixjPXViLGU9bmV3IGxiKGosYywwLDAsZSwtMSxcImNzc190cmFuc2Zvcm1PcmlnaW5cIiksZS5iPWpbY10sZS5wbHVnaW49Zyx2Yj8ocT1pLnpPcmlnaW4scj1yLnNwbGl0KFwiIFwiKSxpLnpPcmlnaW49KHIubGVuZ3RoPjI/cGFyc2VGbG9hdChyWzJdKTpxKXx8MCxlLnhzMD1lLmU9altjXT1yWzBdK1wiIFwiKyhyWzFdfHxcIjUwJVwiKStcIiAwcHhcIixlPW5ldyBsYihpLFwiek9yaWdpblwiLDAsMCxlLC0xLGUubiksZS5iPXEsZS54czA9ZS5lPWkuek9yaWdpbik6ZS54czA9ZS5lPWpbY109cik6JChyK1wiXCIsaSkpLHQmJihkLl90cmFuc2Zvcm1UeXBlPXN8fDM9PT10aGlzLl90cmFuc2Zvcm1UeXBlPzM6MiksZX0sITApLHBiKFwiYm94U2hhZG93XCIsXCIwcHggMHB4IDBweCAwcHggIzk5OVwiLGZ1bmN0aW9uKGEsYixjLGQsZSxnKXt2YXIgaD0tMSE9PShiK1wiXCIpLmluZGV4T2YoXCJpbnNldFwiKT9cIiBpbnNldFwiOlwiXCI7cmV0dXJuIHRoaXMucGFyc2VDb21wbGV4KGEuc3R5bGUsdGhpcy5mb3JtYXQoVChhLHRoaXMucCxmLCExLHRoaXMuZGZsdCkpK2gsdGhpcy5mb3JtYXQoYikraCxlLGcpfSwhMCwhMCkscGIoXCJib3JkZXJSYWRpdXNcIixcIjBweFwiLGZ1bmN0aW9uKGEsYixjLGQsZyl7Yj10aGlzLmZvcm1hdChiKTt2YXIgayxsLG0sbixvLHAscSxyLHMsdCx1LHYsdyx4LHkseixpPVtcImJvcmRlclRvcExlZnRSYWRpdXNcIixcImJvcmRlclRvcFJpZ2h0UmFkaXVzXCIsXCJib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiLFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiXSxqPWEuc3R5bGU7Zm9yKHM9cGFyc2VGbG9hdChhLm9mZnNldFdpZHRoKSx0PXBhcnNlRmxvYXQoYS5vZmZzZXRIZWlnaHQpLGs9Yi5zcGxpdChcIiBcIiksbD0wO2kubGVuZ3RoPmw7bCsrKXRoaXMucC5pbmRleE9mKFwiYm9yZGVyXCIpJiYoaVtsXT1SKGlbbF0pKSxvPW49VChhLGlbbF0sZiwhMSxcIjBweFwiKSwtMSE9PW8uaW5kZXhPZihcIiBcIikmJihuPW8uc3BsaXQoXCIgXCIpLG89blswXSxuPW5bMV0pLHA9bT1rW2xdLHE9cGFyc2VGbG9hdChvKSx2PW8uc3Vic3RyKChxK1wiXCIpLmxlbmd0aCksdz1cIj1cIj09PXAuY2hhckF0KDEpLHc/KHI9cGFyc2VJbnQocC5jaGFyQXQoMCkrXCIxXCIsMTApLHA9cC5zdWJzdHIoMikscio9cGFyc2VGbG9hdChwKSx1PXAuc3Vic3RyKChyK1wiXCIpLmxlbmd0aC0oMD5yPzE6MCkpfHxcIlwiKToocj1wYXJzZUZsb2F0KHApLHU9cC5zdWJzdHIoKHIrXCJcIikubGVuZ3RoKSksXCJcIj09PXUmJih1PWVbY118fHYpLHUhPT12JiYoeD1aKGEsXCJib3JkZXJMZWZ0XCIscSx2KSx5PVooYSxcImJvcmRlclRvcFwiLHEsdiksXCIlXCI9PT11PyhvPTEwMCooeC9zKStcIiVcIixuPTEwMCooeS90KStcIiVcIik6XCJlbVwiPT09dT8oej1aKGEsXCJib3JkZXJMZWZ0XCIsMSxcImVtXCIpLG89eC96K1wiZW1cIixuPXkveitcImVtXCIpOihvPXgrXCJweFwiLG49eStcInB4XCIpLHcmJihwPXBhcnNlRmxvYXQobykrcit1LG09cGFyc2VGbG9hdChuKStyK3UpKSxnPW1iKGosaVtsXSxvK1wiIFwiK24scCtcIiBcIittLCExLFwiMHB4XCIsZyk7cmV0dXJuIGd9LCEwLCExLGdiKFwiMHB4IDBweCAwcHggMHB4XCIsITEsITApKSxwYihcImJhY2tncm91bmRQb3NpdGlvblwiLFwiMCAwXCIsZnVuY3Rpb24oYSxiLGMsZCxlLGcpe3ZhciBsLG0sbixvLHAsaD1cImJhY2tncm91bmQtcG9zaXRpb25cIixpPWZ8fFMoYSxudWxsKSxqPXRoaXMuZm9ybWF0KChpP0w/aS5nZXRQcm9wZXJ0eVZhbHVlKGgrXCIteFwiKStcIiBcIitpLmdldFByb3BlcnR5VmFsdWUoaCtcIi15XCIpOmkuZ2V0UHJvcGVydHlWYWx1ZShoKTphLmN1cnJlbnRTdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb25YK1wiIFwiK2EuY3VycmVudFN0eWxlLmJhY2tncm91bmRQb3NpdGlvblkpfHxcIjAgMFwiKSxrPXRoaXMuZm9ybWF0KGIpO2lmKC0xIT09ai5pbmRleE9mKFwiJVwiKSE9KC0xIT09ay5pbmRleE9mKFwiJVwiKSkpe2ZvcihsPWouc3BsaXQoXCIgXCIpLG09ay5zcGxpdChcIiBcIiksRC5zZXRBdHRyaWJ1dGUoXCJzcmNcIixUKGEsXCJiYWNrZ3JvdW5kSW1hZ2VcIikucmVwbGFjZSh0LFwiXCIpKSxuPTI7LS1uPi0xOylqPWxbbl0sbz0tMSE9PWouaW5kZXhPZihcIiVcIiksbyE9PSgtMSE9PW1bbl0uaW5kZXhPZihcIiVcIikpJiYocD0wPT09bj9hLm9mZnNldFdpZHRoLUQud2lkdGg6YS5vZmZzZXRIZWlnaHQtRC5oZWlnaHQsbFtuXT1vP3BhcnNlRmxvYXQoaikvMTAwKnArXCJweFwiOjEwMCoocGFyc2VGbG9hdChqKS9wKStcIiVcIik7aj1sLmpvaW4oXCIgXCIpfXJldHVybiB0aGlzLnBhcnNlQ29tcGxleChhLnN0eWxlLGosayxlLGcpfSwhMSwhMSwkKSxwYihcImJhY2tncm91bmRTaXplXCIsXCIwIDBcIixudWxsLCExLCExLCQpLHBiKFwicGVyc3BlY3RpdmVcIixcIjBweFwiLG51bGwsITApLHBiKFwicGVyc3BlY3RpdmVPcmlnaW5cIixcIjUwJSA1MCVcIixudWxsLCEwKSxwYihcInRyYW5zZm9ybVN0eWxlXCIsXCJwcmVzZXJ2ZS0zZFwiLG51bGwsITApLHBiKFwiYmFja2ZhY2VWaXNpYmlsaXR5XCIsXCJ2aXNpYmxlXCIsbnVsbCwhMCkscGIoXCJtYXJnaW5cIixudWxsLGhiKFwibWFyZ2luVG9wLG1hcmdpblJpZ2h0LG1hcmdpbkJvdHRvbSxtYXJnaW5MZWZ0XCIpKSxwYihcInBhZGRpbmdcIixudWxsLGhiKFwicGFkZGluZ1RvcCxwYWRkaW5nUmlnaHQscGFkZGluZ0JvdHRvbSxwYWRkaW5nTGVmdFwiKSkscGIoXCJjbGlwXCIsXCJyZWN0KDBweCwwcHgsMHB4LDBweClcIikscGIoXCJ0ZXh0U2hhZG93XCIsXCIwcHggMHB4IDBweCAjOTk5XCIsbnVsbCwhMSwhMCkscGIoXCJhdXRvUm91bmQsc3RyaWN0VW5pdHNcIixudWxsLGZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGV9KSxwYihcImJvcmRlclwiLFwiMHB4IHNvbGlkICMwMDBcIixmdW5jdGlvbihhLGIsYyxkLGUsZyl7cmV0dXJuIHRoaXMucGFyc2VDb21wbGV4KGEuc3R5bGUsdGhpcy5mb3JtYXQoVChhLFwiYm9yZGVyVG9wV2lkdGhcIixmLCExLFwiMHB4XCIpK1wiIFwiK1QoYSxcImJvcmRlclRvcFN0eWxlXCIsZiwhMSxcInNvbGlkXCIpK1wiIFwiK1QoYSxcImJvcmRlclRvcENvbG9yXCIsZiwhMSxcIiMwMDBcIikpLHRoaXMuZm9ybWF0KGIpLGUsZyl9LCExLCEwLGZ1bmN0aW9uKGEpe3ZhciBiPWEuc3BsaXQoXCIgXCIpO3JldHVybiBiWzBdK1wiIFwiKyhiWzFdfHxcInNvbGlkXCIpK1wiIFwiKyhhLm1hdGNoKGZiKXx8W1wiIzAwMFwiXSlbMF19KTt2YXIgQWI9ZnVuY3Rpb24oYSl7dmFyIGUsYj10aGlzLnQsYz1iLmZpbHRlcixkPXRoaXMucyt0aGlzLmMqYT4+MDsxMDA9PT1kJiYoLTE9PT1jLmluZGV4T2YoXCJhdHJpeChcIikmJi0xPT09Yy5pbmRleE9mKFwicmFkaWVudChcIik/KGIucmVtb3ZlQXR0cmlidXRlKFwiZmlsdGVyXCIpLGU9IVQodGhpcy5kYXRhLFwiZmlsdGVyXCIpKTooYi5maWx0ZXI9Yy5yZXBsYWNlKHEsXCJcIiksZT0hMCkpLGV8fCh0aGlzLnhuMSYmKGIuZmlsdGVyPWM9Y3x8XCJhbHBoYShvcGFjaXR5PTEwMClcIiksLTE9PT1jLmluZGV4T2YoXCJvcGFjaXR5XCIpP2IuZmlsdGVyKz1cIiBhbHBoYShvcGFjaXR5PVwiK2QrXCIpXCI6Yi5maWx0ZXI9Yy5yZXBsYWNlKG8sXCJvcGFjaXR5PVwiK2QpKX07cGIoXCJvcGFjaXR5LGFscGhhLGF1dG9BbHBoYVwiLFwiMVwiLGZ1bmN0aW9uKGEsYixjLGQsZSxnKXt2YXIgaixoPXBhcnNlRmxvYXQoVChhLFwib3BhY2l0eVwiLGYsITEsXCIxXCIpKSxpPWEuc3R5bGU7cmV0dXJuIGI9cGFyc2VGbG9hdChiKSxcImF1dG9BbHBoYVwiPT09YyYmKGo9VChhLFwidmlzaWJpbGl0eVwiLGYpLDE9PT1oJiZcImhpZGRlblwiPT09aiYmMCE9PWImJihoPTApLGU9bmV3IGxiKGksXCJ2aXNpYmlsaXR5XCIsMCwwLGUsLTEsbnVsbCwhMSwwLDAhPT1oP1widmlzaWJsZVwiOlwiaGlkZGVuXCIsMD09PWI/XCJoaWRkZW5cIjpcInZpc2libGVcIiksZS54czA9XCJ2aXNpYmxlXCIsZC5fb3ZlcndyaXRlUHJvcHMucHVzaChlLm4pKSxNP2U9bmV3IGxiKGksXCJvcGFjaXR5XCIsaCxiLWgsZSk6KGU9bmV3IGxiKGksXCJvcGFjaXR5XCIsMTAwKmgsMTAwKihiLWgpLGUpLGUueG4xPVwiYXV0b0FscGhhXCI9PT1jPzE6MCxpLnpvb209MSxlLnR5cGU9MixlLmI9XCJhbHBoYShvcGFjaXR5PVwiK2UucytcIilcIixlLmU9XCJhbHBoYShvcGFjaXR5PVwiKyhlLnMrZS5jKStcIilcIixlLmRhdGE9YSxlLnBsdWdpbj1nLGUuc2V0UmF0aW89QWIpLGV9KTt2YXIgQmI9ZnVuY3Rpb24oYSl7aWYoMT09PWF8fDA9PT1hKXt0aGlzLnQuY2xhc3NOYW1lPTE9PT1hP3RoaXMuZTp0aGlzLmI7Zm9yKHZhciBiPXRoaXMuZGF0YSxjPXRoaXMudC5zdHlsZSxkPWMucmVtb3ZlUHJvcGVydHk/XCJyZW1vdmVQcm9wZXJ0eVwiOlwicmVtb3ZlQXR0cmlidXRlXCI7YjspYi52P2NbYi5wXT1iLnY6Y1tkXShiLnAucmVwbGFjZShyLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpLGI9Yi5fbmV4dH1lbHNlIHRoaXMudC5jbGFzc05hbWUhPT10aGlzLmImJih0aGlzLnQuY2xhc3NOYW1lPXRoaXMuYil9O2ZvcihwYihcImNsYXNzTmFtZVwiLG51bGwsZnVuY3Rpb24oYSxiLGMsZCxlLGcsaCl7dmFyIGssbCxpPWEuY2xhc3NOYW1lLGo9YS5zdHlsZS5jc3NUZXh0O3JldHVybiBlPWQuX2NsYXNzTmFtZVBUPW5ldyBsYihhLGMsMCwwLGUsMiksZS5zZXRSYXRpbz1CYixlLmI9aSxlLmU9XCI9XCIhPT1iLmNoYXJBdCgxKT9iOlwiK1wiPT09Yi5jaGFyQXQoMCk/aStcIiBcIitiLnN1YnN0cigyKTppLnNwbGl0KGIuc3Vic3RyKDIpKS5qb2luKFwiXCIpLGQuX3R3ZWVuLl9kdXJhdGlvbiYmKGw9VShhLGYsITApLGEuY2xhc3NOYW1lPWUuZSxrPVYoYSxsLFUoYSksaCksYS5jbGFzc05hbWU9aSxlLmRhdGE9ay5maXJzdE1QVCxhLnN0eWxlLmNzc1RleHQ9aixlPWUueGZpcnN0PWQucGFyc2UoYSxrLmRpZnMsZSxnKSksZX0pLGk9XCJiZXppZXIsdGhyb3dQcm9wcyxwaHlzaWNzUHJvcHMscGh5c2ljczJEXCIuc3BsaXQoXCIsXCIpLG5iPWkubGVuZ3RoO25iLS07KXFiKGlbbmJdKTtyZXR1cm4gaT1jLnByb3RvdHlwZSxpLl9maXJzdFBUPW51bGwsaS5fb25Jbml0VHdlZW49ZnVuY3Rpb24oYSxiLGgpe2lmKCFhLm5vZGVUeXBlKXJldHVybiExO3RoaXMuX3RhcmdldD1hLHRoaXMuX3R3ZWVuPWgsdGhpcy5fdmFycz1iLEc9Yi5hdXRvUm91bmQsZD0hMSxlPWIuc3VmZml4TWFwfHxjLnN1ZmZpeE1hcCxmPVMoYSxcIlwiKSxnPXRoaXMuX292ZXJ3cml0ZVByb3BzO3ZhciBqLGssbCxtLG4sbyxxLHIscyxpPWEuc3R5bGU7aWYoSCYmXCJcIj09PWkuekluZGV4JiYoaj1UKGEsXCJ6SW5kZXhcIixmKSwoXCJhdXRvXCI9PT1qfHxcIlwiPT09aikmJihpLnpJbmRleD0wKSksXCJzdHJpbmdcIj09dHlwZW9mIGImJihtPWkuY3NzVGV4dCxqPVUoYSxmKSxpLmNzc1RleHQ9bStcIjtcIitiLGo9VihhLGosVShhKSkuZGlmcywhTSYmcC50ZXN0KGIpJiYoai5vcGFjaXR5PXBhcnNlRmxvYXQoUmVnRXhwLiQxKSksYj1qLGkuY3NzVGV4dD1tKSx0aGlzLl9maXJzdFBUPWs9dGhpcy5wYXJzZShhLGIsbnVsbCksdGhpcy5fdHJhbnNmb3JtVHlwZSl7Zm9yKHM9Mz09PXRoaXMuX3RyYW5zZm9ybVR5cGUsc2I/SSYmKEg9ITAsXCJcIj09PWkuekluZGV4JiYocT1UKGEsXCJ6SW5kZXhcIixmKSwoXCJhdXRvXCI9PT1xfHxcIlwiPT09cSkmJihpLnpJbmRleD0wKSksSyYmKGkuV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5PXRoaXMuX3ZhcnMuV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5fHwocz9cInZpc2libGVcIjpcImhpZGRlblwiKSkpOmkuem9vbT0xLGw9aztsJiZsLl9uZXh0OylsPWwuX25leHQ7cj1uZXcgbGIoYSxcInRyYW5zZm9ybVwiLDAsMCxudWxsLDIpLHRoaXMuX2xpbmtDU1NQKHIsbnVsbCxsKSxyLnNldFJhdGlvPXMmJnZiP3liOnNiP3piOnhiLHIuZGF0YT10aGlzLl90cmFuc2Zvcm18fHdiKGEsZiwhMCksZy5wb3AoKX1pZihkKXtmb3IoO2s7KXtmb3Iobz1rLl9uZXh0LGw9bTtsJiZsLnByPmsucHI7KWw9bC5fbmV4dDsoay5fcHJldj1sP2wuX3ByZXY6bik/ay5fcHJldi5fbmV4dD1rOm09aywoay5fbmV4dD1sKT9sLl9wcmV2PWs6bj1rLGs9b310aGlzLl9maXJzdFBUPW19cmV0dXJuITB9LGkucGFyc2U9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGksaixrLGwsbSxuLG8scCxxLHIsZz1hLnN0eWxlO2ZvcihpIGluIGIpbj1iW2ldLGo9aFtpXSxqP2M9ai5wYXJzZShhLG4saSx0aGlzLGMsZCxiKToobT1UKGEsaSxmKStcIlwiLHE9XCJzdHJpbmdcIj09dHlwZW9mIG4sXCJjb2xvclwiPT09aXx8XCJmaWxsXCI9PT1pfHxcInN0cm9rZVwiPT09aXx8LTEhPT1pLmluZGV4T2YoXCJDb2xvclwiKXx8cSYmIW4uaW5kZXhPZihcInJnYlwiKT8ocXx8KG49ZWIobiksbj0obi5sZW5ndGg+Mz9cInJnYmEoXCI6XCJyZ2IoXCIpK24uam9pbihcIixcIikrXCIpXCIpLGM9bWIoZyxpLG0sbiwhMCxcInRyYW5zcGFyZW50XCIsYywwLGQpKTohcXx8LTE9PT1uLmluZGV4T2YoXCIgXCIpJiYtMT09PW4uaW5kZXhPZihcIixcIik/KGs9cGFyc2VGbG9hdChtKSxvPWt8fDA9PT1rP20uc3Vic3RyKChrK1wiXCIpLmxlbmd0aCk6XCJcIiwoXCJcIj09PW18fFwiYXV0b1wiPT09bSkmJihcIndpZHRoXCI9PT1pfHxcImhlaWdodFwiPT09aT8oaz1ZKGEsaSxmKSxvPVwicHhcIik6KGs9XCJvcGFjaXR5XCIhPT1pPzA6MSxvPVwiXCIpKSxyPXEmJlwiPVwiPT09bi5jaGFyQXQoMSkscj8obD1wYXJzZUludChuLmNoYXJBdCgwKStcIjFcIiwxMCksbj1uLnN1YnN0cigyKSxsKj1wYXJzZUZsb2F0KG4pLHA9bi5zdWJzdHIoKGwrXCJcIikubGVuZ3RoLSgwPmw/MTowKSl8fFwiXCIpOihsPXBhcnNlRmxvYXQobikscD1xP24uc3Vic3RyKChsK1wiXCIpLmxlbmd0aCl8fFwiXCI6XCJcIiksXCJcIj09PXAmJihwPWVbaV18fG8pLG49bHx8MD09PWw/KHI/bCtrOmwpK3A6YltpXSxvIT09cCYmXCJcIiE9PXAmJihsfHwwPT09bCkmJihrfHwwPT09aykmJihrPVooYSxpLGssbyksXCIlXCI9PT1wPyhrLz1aKGEsaSwxMDAsXCIlXCIpLzEwMCxrPjEwMCYmKGs9MTAwKSxiLnN0cmljdFVuaXRzIT09ITAmJihtPWsrXCIlXCIpKTpcImVtXCI9PT1wP2svPVooYSxpLDEsXCJlbVwiKToobD1aKGEsaSxsLHApLHA9XCJweFwiKSxyJiYobHx8MD09PWwpJiYobj1sK2srcCkpLHImJihsKz1rKSwhayYmMCE9PWt8fCFsJiYwIT09bD9ufHxcIk5hTlwiIT1uK1wiXCImJm51bGwhPW4/KGM9bmV3IGxiKGcsaSxsfHxrfHwwLDAsYywtMSxcImNzc19cIitpLCExLDAsbSxuKSxjLnhzMD1cImRpc3BsYXlcIj09PWkmJlwibm9uZVwiPT09bj9tOm4pOk8oXCJpbnZhbGlkIFwiK2krXCIgdHdlZW4gdmFsdWUuIFwiKTooYz1uZXcgbGIoZyxpLGssbC1rLGMsMCxcImNzc19cIitpLEchPT0hMSYmKFwicHhcIj09PXB8fFwiekluZGV4XCI9PT1pKSwwLG0sbiksYy54czA9cCkpOmM9bWIoZyxpLG0sbiwhMCxudWxsLGMsMCxkKSksZCYmYyYmIWMucGx1Z2luJiYoYy5wbHVnaW49ZCk7cmV0dXJuIGN9LGkuc2V0UmF0aW89ZnVuY3Rpb24oYSl7dmFyIGQsZSxmLGI9dGhpcy5fZmlyc3RQVCxjPTFlLTY7aWYoMSE9PWF8fHRoaXMuX3R3ZWVuLl90aW1lIT09dGhpcy5fdHdlZW4uX2R1cmF0aW9uJiYwIT09dGhpcy5fdHdlZW4uX3RpbWUpaWYoYXx8dGhpcy5fdHdlZW4uX3RpbWUhPT10aGlzLl90d2Vlbi5fZHVyYXRpb24mJjAhPT10aGlzLl90d2Vlbi5fdGltZXx8dGhpcy5fdHdlZW4uX3Jhd1ByZXZUaW1lPT09LTFlLTYpZm9yKDtiOyl7aWYoZD1iLmMqYStiLnMsYi5yP2Q9ZD4wP2QrLjU+PjA6ZC0uNT4+MDpjPmQmJmQ+LWMmJihkPTApLGIudHlwZSlpZigxPT09Yi50eXBlKWlmKGY9Yi5sLDI9PT1mKWIudFtiLnBdPWIueHMwK2QrYi54czErYi54bjErYi54czI7ZWxzZSBpZigzPT09ZiliLnRbYi5wXT1iLnhzMCtkK2IueHMxK2IueG4xK2IueHMyK2IueG4yK2IueHMzO2Vsc2UgaWYoND09PWYpYi50W2IucF09Yi54czArZCtiLnhzMStiLnhuMStiLnhzMitiLnhuMitiLnhzMytiLnhuMytiLnhzNDtlbHNlIGlmKDU9PT1mKWIudFtiLnBdPWIueHMwK2QrYi54czErYi54bjErYi54czIrYi54bjIrYi54czMrYi54bjMrYi54czQrYi54bjQrYi54czU7ZWxzZXtmb3IoZT1iLnhzMCtkK2IueHMxLGY9MTtiLmw+ZjtmKyspZSs9YltcInhuXCIrZl0rYltcInhzXCIrKGYrMSldO2IudFtiLnBdPWV9ZWxzZS0xPT09Yi50eXBlP2IudFtiLnBdPWIueHMwOmIuc2V0UmF0aW8mJmIuc2V0UmF0aW8oYSk7ZWxzZSBiLnRbYi5wXT1kK2IueHMwO2I9Yi5fbmV4dH1lbHNlIGZvcig7YjspMiE9PWIudHlwZT9iLnRbYi5wXT1iLmI6Yi5zZXRSYXRpbyhhKSxiPWIuX25leHQ7ZWxzZSBmb3IoO2I7KTIhPT1iLnR5cGU/Yi50W2IucF09Yi5lOmIuc2V0UmF0aW8oYSksYj1iLl9uZXh0fSxpLl9lbmFibGVUcmFuc2Zvcm1zPWZ1bmN0aW9uKGEpe3RoaXMuX3RyYW5zZm9ybVR5cGU9YXx8Mz09PXRoaXMuX3RyYW5zZm9ybVR5cGU/MzoyfSxpLl9saW5rQ1NTUD1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gYSYmKGImJihiLl9wcmV2PWEpLGEuX25leHQmJihhLl9uZXh0Ll9wcmV2PWEuX3ByZXYpLGM/Yy5fbmV4dD1hOmR8fG51bGwhPT10aGlzLl9maXJzdFBUfHwodGhpcy5fZmlyc3RQVD1hKSxhLl9wcmV2P2EuX3ByZXYuX25leHQ9YS5fbmV4dDp0aGlzLl9maXJzdFBUPT09YSYmKHRoaXMuX2ZpcnN0UFQ9YS5fbmV4dCksYS5fbmV4dD1iLGEuX3ByZXY9YyksYX0saS5fa2lsbD1mdW5jdGlvbihiKXt2YXIgZSxmLGcsYz1iLGQ9ITE7aWYoYi5jc3NfYXV0b0FscGhhfHxiLmNzc19hbHBoYSl7Yz17fTtmb3IoZiBpbiBiKWNbZl09YltmXTtjLmNzc19vcGFjaXR5PTEsYy5jc3NfYXV0b0FscGhhJiYoYy5jc3NfdmlzaWJpbGl0eT0xKX1yZXR1cm4gYi5jc3NfY2xhc3NOYW1lJiYoZT10aGlzLl9jbGFzc05hbWVQVCkmJihnPWUueGZpcnN0LGcmJmcuX3ByZXY/dGhpcy5fbGlua0NTU1AoZy5fcHJldixlLl9uZXh0LGcuX3ByZXYuX3ByZXYpOmc9PT10aGlzLl9maXJzdFBUJiYodGhpcy5fZmlyc3RQVD1udWxsKSxlLl9uZXh0JiZ0aGlzLl9saW5rQ1NTUChlLl9uZXh0LGUuX25leHQuX25leHQsZy5fcHJldiksdGhpcy5fdGFyZ2V0Ll9nc092ZXJ3cml0dGVuQ2xhc3NOYW1lUFQ9dGhpcy5fbGlua0NTU1AoZSx0aGlzLl90YXJnZXQuX2dzT3ZlcndyaXR0ZW5DbGFzc05hbWVQVCksdGhpcy5fY2xhc3NOYW1lUFQ9bnVsbCxkPSEwKSxhLnByb3RvdHlwZS5fa2lsbC5jYWxsKHRoaXMsYyl8fGR9LGEuYWN0aXZhdGUoW2NdKSxjfSwhMCksX2dzRGVmaW5lKFwicGx1Z2lucy5Sb3VuZFByb3BzUGx1Z2luXCIsW1wicGx1Z2lucy5Ud2VlblBsdWdpblwiXSxmdW5jdGlvbihhKXt2YXIgYj1mdW5jdGlvbigpe2EuY2FsbCh0aGlzLFwicm91bmRQcm9wc1wiLC0xKSx0aGlzLl9vdmVyd3JpdGVQcm9wcy5sZW5ndGg9MH0sYz1iLnByb3RvdHlwZT1uZXcgYShcInJvdW5kUHJvcHNcIiwtMSk7cmV0dXJuIGMuY29uc3RydWN0b3I9YixiLkFQST0yLGMuX29uSW5pdFR3ZWVuPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGhpcy5fdHdlZW49YywhMH0sYy5fb25Jbml0QWxsUHJvcHM9ZnVuY3Rpb24oKXtmb3IodmFyIGYsZyxoLGE9dGhpcy5fdHdlZW4sYj1hLnZhcnMucm91bmRQcm9wcyBpbnN0YW5jZW9mIEFycmF5P2EudmFycy5yb3VuZFByb3BzOmEudmFycy5yb3VuZFByb3BzLnNwbGl0KFwiLFwiKSxjPWIubGVuZ3RoLGQ9e30sZT1hLl9wcm9wTG9va3VwLnJvdW5kUHJvcHM7LS1jPi0xOylkW2JbY11dPTE7Zm9yKGM9Yi5sZW5ndGg7LS1jPi0xOylmb3IoZj1iW2NdLGc9YS5fZmlyc3RQVDtnOyloPWcuX25leHQsZy5wZz9nLnQuX3JvdW5kUHJvcHMoZCwhMCk6Zy5uPT09ZiYmKHRoaXMuX2FkZChnLnQsZixnLnMsZy5jKSxoJiYoaC5fcHJldj1nLl9wcmV2KSxnLl9wcmV2P2cuX3ByZXYuX25leHQ9aDphLl9maXJzdFBUPT09ZyYmKGEuX2ZpcnN0UFQ9aCksZy5fbmV4dD1nLl9wcmV2PW51bGwsYS5fcHJvcExvb2t1cFtmXT1lKSxnPWg7cmV0dXJuITF9LGMuX2FkZD1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLl9hZGRUd2VlbihhLGIsYyxjK2QsYiwhMCksdGhpcy5fb3ZlcndyaXRlUHJvcHMucHVzaChiKX0sYS5hY3RpdmF0ZShbYl0pLGJ9LCEwKSxfZ3NEZWZpbmUoXCJlYXNpbmcuQmFja1wiLFtcImVhc2luZy5FYXNlXCJdLGZ1bmN0aW9uKGEpe3ZhciBuLG8sYj13aW5kb3cuR3JlZW5Tb2NrR2xvYmFsc3x8d2luZG93LGM9Yi5jb20uZ3JlZW5zb2NrLGQ9MipNYXRoLlBJLGU9TWF0aC5QSS8yLGY9Yy5fY2xhc3MsZz1mdW5jdGlvbihiLGMpe3ZhciBkPWYoXCJlYXNpbmcuXCIrYixmdW5jdGlvbigpe30sITApLGU9ZC5wcm90b3R5cGU9bmV3IGE7cmV0dXJuIGUuY29uc3RydWN0b3I9ZCxlLmdldFJhdGlvPWMsZH0saD1hLnJlZ2lzdGVyfHxmdW5jdGlvbigpe30saT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZz1mKFwiZWFzaW5nLlwiK2Ese2Vhc2VPdXQ6bmV3IGIsZWFzZUluOm5ldyBjLGVhc2VJbk91dDpuZXcgZH0sITApO3JldHVybiBoKGcsYSksZ30saj1mdW5jdGlvbihiLGMpe3ZhciBkPWYoXCJlYXNpbmcuXCIrYixmdW5jdGlvbihhKXt0aGlzLl9wMT1hfHwwPT09YT9hOjEuNzAxNTgsdGhpcy5fcDI9MS41MjUqdGhpcy5fcDF9LCEwKSxlPWQucHJvdG90eXBlPW5ldyBhO3JldHVybiBlLmNvbnN0cnVjdG9yPWQsZS5nZXRSYXRpbz1jLGUuY29uZmlnPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgZChhKX0sZH0saz1pKFwiQmFja1wiLGooXCJCYWNrT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuKGEtPTEpKmEqKCh0aGlzLl9wMSsxKSphK3RoaXMuX3AxKSsxfSksaihcIkJhY2tJblwiLGZ1bmN0aW9uKGEpe3JldHVybiBhKmEqKCh0aGlzLl9wMSsxKSphLXRoaXMuX3AxKX0pLGooXCJCYWNrSW5PdXRcIixmdW5jdGlvbihhKXtyZXR1cm4gMT4oYSo9Mik/LjUqYSphKigodGhpcy5fcDIrMSkqYS10aGlzLl9wMik6LjUqKChhLT0yKSphKigodGhpcy5fcDIrMSkqYSt0aGlzLl9wMikrMil9KSksbD1mKFwiZWFzaW5nLlNsb3dNb1wiLGZ1bmN0aW9uKGEsYixjKXtiPWJ8fDA9PT1iP2I6LjcsbnVsbD09YT9hPS43OmE+MSYmKGE9MSksdGhpcy5fcD0xIT09YT9iOjAsdGhpcy5fcDE9KDEtYSkvMix0aGlzLl9wMj1hLHRoaXMuX3AzPXRoaXMuX3AxK3RoaXMuX3AyLHRoaXMuX2NhbGNFbmQ9Yz09PSEwfSwhMCksbT1sLnByb3RvdHlwZT1uZXcgYTtyZXR1cm4gbS5jb25zdHJ1Y3Rvcj1sLG0uZ2V0UmF0aW89ZnVuY3Rpb24oYSl7dmFyIGI9YSsoLjUtYSkqdGhpcy5fcDtyZXR1cm4gdGhpcy5fcDE+YT90aGlzLl9jYWxjRW5kPzEtKGE9MS1hL3RoaXMuX3AxKSphOmItKGE9MS1hL3RoaXMuX3AxKSphKmEqYSpiOmE+dGhpcy5fcDM/dGhpcy5fY2FsY0VuZD8xLShhPShhLXRoaXMuX3AzKS90aGlzLl9wMSkqYTpiKyhhLWIpKihhPShhLXRoaXMuX3AzKS90aGlzLl9wMSkqYSphKmE6dGhpcy5fY2FsY0VuZD8xOmJ9LGwuZWFzZT1uZXcgbCguNywuNyksbS5jb25maWc9bC5jb25maWc9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuZXcgbChhLGIsYyl9LG49ZihcImVhc2luZy5TdGVwcGVkRWFzZVwiLGZ1bmN0aW9uKGEpe2E9YXx8MSx0aGlzLl9wMT0xL2EsdGhpcy5fcDI9YSsxfSwhMCksbT1uLnByb3RvdHlwZT1uZXcgYSxtLmNvbnN0cnVjdG9yPW4sbS5nZXRSYXRpbz1mdW5jdGlvbihhKXtyZXR1cm4gMD5hP2E9MDphPj0xJiYoYT0uOTk5OTk5OTk5KSwodGhpcy5fcDIqYT4+MCkqdGhpcy5fcDF9LG0uY29uZmlnPW4uY29uZmlnPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgbihhKX0saShcIkJvdW5jZVwiLGcoXCJCb3VuY2VPdXRcIixmdW5jdGlvbihhKXtyZXR1cm4gMS8yLjc1PmE/Ny41NjI1KmEqYToyLzIuNzU+YT83LjU2MjUqKGEtPTEuNS8yLjc1KSphKy43NToyLjUvMi43NT5hPzcuNTYyNSooYS09Mi4yNS8yLjc1KSphKy45Mzc1OjcuNTYyNSooYS09Mi42MjUvMi43NSkqYSsuOTg0Mzc1fSksZyhcIkJvdW5jZUluXCIsZnVuY3Rpb24oYSl7cmV0dXJuIDEvMi43NT4oYT0xLWEpPzEtNy41NjI1KmEqYToyLzIuNzU+YT8xLSg3LjU2MjUqKGEtPTEuNS8yLjc1KSphKy43NSk6Mi41LzIuNzU+YT8xLSg3LjU2MjUqKGEtPTIuMjUvMi43NSkqYSsuOTM3NSk6MS0oNy41NjI1KihhLT0yLjYyNS8yLjc1KSphKy45ODQzNzUpfSksZyhcIkJvdW5jZUluT3V0XCIsZnVuY3Rpb24oYSl7dmFyIGI9LjU+YTtyZXR1cm4gYT1iPzEtMiphOjIqYS0xLGE9MS8yLjc1PmE/Ny41NjI1KmEqYToyLzIuNzU+YT83LjU2MjUqKGEtPTEuNS8yLjc1KSphKy43NToyLjUvMi43NT5hPzcuNTYyNSooYS09Mi4yNS8yLjc1KSphKy45Mzc1OjcuNTYyNSooYS09Mi42MjUvMi43NSkqYSsuOTg0Mzc1LGI/LjUqKDEtYSk6LjUqYSsuNX0pKSxpKFwiQ2lyY1wiLGcoXCJDaXJjT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc3FydCgxLShhLT0xKSphKX0pLGcoXCJDaXJjSW5cIixmdW5jdGlvbihhKXtyZXR1cm4tKE1hdGguc3FydCgxLWEqYSktMSl9KSxnKFwiQ2lyY0luT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIDE+KGEqPTIpPy0uNSooTWF0aC5zcXJ0KDEtYSphKS0xKTouNSooTWF0aC5zcXJ0KDEtKGEtPTIpKmEpKzEpfSkpLG89ZnVuY3Rpb24oYixjLGUpe3ZhciBnPWYoXCJlYXNpbmcuXCIrYixmdW5jdGlvbihhLGIpe3RoaXMuX3AxPWF8fDEsdGhpcy5fcDI9Ynx8ZSx0aGlzLl9wMz10aGlzLl9wMi9kKihNYXRoLmFzaW4oMS90aGlzLl9wMSl8fDApfSwhMCksaD1nLnByb3RvdHlwZT1uZXcgYTtyZXR1cm4gaC5jb25zdHJ1Y3Rvcj1nLGguZ2V0UmF0aW89YyxoLmNvbmZpZz1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgZyhhLGIpfSxnfSxpKFwiRWxhc3RpY1wiLG8oXCJFbGFzdGljT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX3AxKk1hdGgucG93KDIsLTEwKmEpKk1hdGguc2luKChhLXRoaXMuX3AzKSpkL3RoaXMuX3AyKSsxfSwuMyksbyhcIkVsYXN0aWNJblwiLGZ1bmN0aW9uKGEpe3JldHVybi0odGhpcy5fcDEqTWF0aC5wb3coMiwxMCooYS09MSkpKk1hdGguc2luKChhLXRoaXMuX3AzKSpkL3RoaXMuX3AyKSl9LC4zKSxvKFwiRWxhc3RpY0luT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIDE+KGEqPTIpPy0uNSp0aGlzLl9wMSpNYXRoLnBvdygyLDEwKihhLT0xKSkqTWF0aC5zaW4oKGEtdGhpcy5fcDMpKmQvdGhpcy5fcDIpOi41KnRoaXMuX3AxKk1hdGgucG93KDIsLTEwKihhLT0xKSkqTWF0aC5zaW4oKGEtdGhpcy5fcDMpKmQvdGhpcy5fcDIpKzF9LC40NSkpLGkoXCJFeHBvXCIsZyhcIkV4cG9PdXRcIixmdW5jdGlvbihhKXtyZXR1cm4gMS1NYXRoLnBvdygyLC0xMCphKX0pLGcoXCJFeHBvSW5cIixmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5wb3coMiwxMCooYS0xKSktLjAwMX0pLGcoXCJFeHBvSW5PdXRcIixmdW5jdGlvbihhKXtyZXR1cm4gMT4oYSo9Mik/LjUqTWF0aC5wb3coMiwxMCooYS0xKSk6LjUqKDItTWF0aC5wb3coMiwtMTAqKGEtMSkpKX0pKSxpKFwiU2luZVwiLGcoXCJTaW5lT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc2luKGEqZSl9KSxnKFwiU2luZUluXCIsZnVuY3Rpb24oYSl7cmV0dXJuLU1hdGguY29zKGEqZSkrMX0pLGcoXCJTaW5lSW5PdXRcIixmdW5jdGlvbihhKXtyZXR1cm4tLjUqKE1hdGguY29zKE1hdGguUEkqYSktMSl9KSksZihcImVhc2luZy5FYXNlTG9va3VwXCIse2ZpbmQ6ZnVuY3Rpb24oYil7cmV0dXJuIGEubWFwW2JdfX0sITApLGgoYi5TbG93TW8sXCJTbG93TW9cIixcImVhc2UsXCIpLGgobixcIlN0ZXBwZWRFYXNlXCIsXCJlYXNlLFwiKSxrfSwhMCl9KSxmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjt2YXIgZSxmLGcsaCxiPWEuR3JlZW5Tb2NrR2xvYmFsc3x8YSxjPWZ1bmN0aW9uKGEpe3ZhciBlLGM9YS5zcGxpdChcIi5cIiksZD1iO2ZvcihlPTA7Yy5sZW5ndGg+ZTtlKyspZFtjW2VdXT1kPWRbY1tlXV18fHt9O3JldHVybiBkfSxkPWMoXCJjb20uZ3JlZW5zb2NrXCIpLGk9e30saj1mdW5jdGlvbihkLGUsZixnKXt0aGlzLnNjPWlbZF0/aVtkXS5zYzpbXSxpW2RdPXRoaXMsdGhpcy5nc0NsYXNzPW51bGwsdGhpcy5mdW5jPWY7dmFyIGg9W107dGhpcy5jaGVjaz1mdW5jdGlvbihrKXtmb3IodmFyIG4sbyxwLHEsbD1lLmxlbmd0aCxtPWw7LS1sPi0xOykobj1pW2VbbF1dfHxuZXcgaihlW2xdLFtdKSkuZ3NDbGFzcz8oaFtsXT1uLmdzQ2xhc3MsbS0tKTprJiZuLnNjLnB1c2godGhpcyk7aWYoMD09PW0mJmYpZm9yKG89KFwiY29tLmdyZWVuc29jay5cIitkKS5zcGxpdChcIi5cIikscD1vLnBvcCgpLHE9YyhvLmpvaW4oXCIuXCIpKVtwXT10aGlzLmdzQ2xhc3M9Zi5hcHBseShmLGgpLGcmJihiW3BdPXEsXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSgoYS5HcmVlblNvY2tBTURQYXRoP2EuR3JlZW5Tb2NrQU1EUGF0aCtcIi9cIjpcIlwiKStkLnNwbGl0KFwiLlwiKS5qb2luKFwiL1wiKSxbXSxmdW5jdGlvbigpe3JldHVybiBxfSk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1xKSksbD0wO3RoaXMuc2MubGVuZ3RoPmw7bCsrKXRoaXMuc2NbbF0uY2hlY2soKX0sdGhpcy5jaGVjayghMCl9LGs9YS5fZ3NEZWZpbmU9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIG5ldyBqKGEsYixjLGQpfSxsPWQuX2NsYXNzPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYj1ifHxmdW5jdGlvbigpe30sayhhLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIGJ9LGMpLGJ9LG09WzAsMCwxLDFdLG49W10sbz1sKFwiZWFzaW5nLkVhc2VcIixmdW5jdGlvbihhLGIsYyxkKXt0aGlzLl9mdW5jPWEsdGhpcy5fdHlwZT1jfHwwLHRoaXMuX3Bvd2VyPWR8fDAsdGhpcy5fcGFyYW1zPWI/bS5jb25jYXQoYik6bX0sITApLHA9by5tYXA9e30scT1vLnJlZ2lzdGVyPWZ1bmN0aW9uKGEsYixjLGUpe2Zvcih2YXIgaSxqLGssbSxmPWIuc3BsaXQoXCIsXCIpLGc9Zi5sZW5ndGgsaD0oY3x8XCJlYXNlSW4sZWFzZU91dCxlYXNlSW5PdXRcIikuc3BsaXQoXCIsXCIpOy0tZz4tMTspZm9yKGo9ZltnXSxpPWU/bChcImVhc2luZy5cIitqLG51bGwsITApOmQuZWFzaW5nW2pdfHx7fSxrPWgubGVuZ3RoOy0taz4tMTspbT1oW2tdLHBbaitcIi5cIittXT1wW20ral09aVttXT1hLmdldFJhdGlvP2E6YVttXXx8bmV3IGF9O2ZvcihnPW8ucHJvdG90eXBlLGcuX2NhbGNFbmQ9ITEsZy5nZXRSYXRpbz1mdW5jdGlvbihhKXtpZih0aGlzLl9mdW5jKXJldHVybiB0aGlzLl9wYXJhbXNbMF09YSx0aGlzLl9mdW5jLmFwcGx5KG51bGwsdGhpcy5fcGFyYW1zKTt2YXIgYj10aGlzLl90eXBlLGM9dGhpcy5fcG93ZXIsZD0xPT09Yj8xLWE6Mj09PWI/YTouNT5hPzIqYToyKigxLWEpO3JldHVybiAxPT09Yz9kKj1kOjI9PT1jP2QqPWQqZDozPT09Yz9kKj1kKmQqZDo0PT09YyYmKGQqPWQqZCpkKmQpLDE9PT1iPzEtZDoyPT09Yj9kOi41PmE/ZC8yOjEtZC8yfSxlPVtcIkxpbmVhclwiLFwiUXVhZFwiLFwiQ3ViaWNcIixcIlF1YXJ0XCIsXCJRdWludCxTdHJvbmdcIl0sZj1lLmxlbmd0aDstLWY+LTE7KWc9ZVtmXStcIixQb3dlclwiK2YscShuZXcgbyhudWxsLG51bGwsMSxmKSxnLFwiZWFzZU91dFwiLCEwKSxxKG5ldyBvKG51bGwsbnVsbCwyLGYpLGcsXCJlYXNlSW5cIisoMD09PWY/XCIsZWFzZU5vbmVcIjpcIlwiKSkscShuZXcgbyhudWxsLG51bGwsMyxmKSxnLFwiZWFzZUluT3V0XCIpO1xucC5saW5lYXI9ZC5lYXNpbmcuTGluZWFyLmVhc2VJbixwLnN3aW5nPWQuZWFzaW5nLlF1YWQuZWFzZUluT3V0O3ZhciByPWwoXCJldmVudHMuRXZlbnREaXNwYXRjaGVyXCIsZnVuY3Rpb24oYSl7dGhpcy5fbGlzdGVuZXJzPXt9LHRoaXMuX2V2ZW50VGFyZ2V0PWF8fHRoaXN9KTtnPXIucHJvdG90eXBlLGcuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyxkLGUpe2U9ZXx8MDt2YXIgaCxpLGY9dGhpcy5fbGlzdGVuZXJzW2FdLGc9MDtmb3IobnVsbD09ZiYmKHRoaXMuX2xpc3RlbmVyc1thXT1mPVtdKSxpPWYubGVuZ3RoOy0taT4tMTspaD1mW2ldLGguYz09PWI/Zi5zcGxpY2UoaSwxKTowPT09ZyYmZT5oLnByJiYoZz1pKzEpO2Yuc3BsaWNlKGcsMCx7YzpiLHM6Yyx1cDpkLHByOmV9KX0sZy5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYil7dmFyIGQsYz10aGlzLl9saXN0ZW5lcnNbYV07aWYoYylmb3IoZD1jLmxlbmd0aDstLWQ+LTE7KWlmKGNbZF0uYz09PWIpcmV0dXJuIGMuc3BsaWNlKGQsMSksdm9pZCAwfSxnLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fbGlzdGVuZXJzW2FdO2lmKGIpZm9yKHZhciBlLGM9Yi5sZW5ndGgsZD10aGlzLl9ldmVudFRhcmdldDstLWM+LTE7KWU9YltjXSxlLnVwP2UuYy5jYWxsKGUuc3x8ZCx7dHlwZTphLHRhcmdldDpkfSk6ZS5jLmNhbGwoZS5zfHxkKX07dmFyIHM9YS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsdD1hLmNhbmNlbEFuaW1hdGlvbkZyYW1lLHU9RGF0ZS5ub3d8fGZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9O2ZvcihlPVtcIm1zXCIsXCJtb3pcIixcIndlYmtpdFwiLFwib1wiXSxmPWUubGVuZ3RoOy0tZj4tMSYmIXM7KXM9YVtlW2ZdK1wiUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdLHQ9YVtlW2ZdK1wiQ2FuY2VsQW5pbWF0aW9uRnJhbWVcIl18fGFbZVtmXStcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTtsKFwiVGlja2VyXCIsZnVuY3Rpb24oYixjKXt2YXIgZyxoLGksaixrLGQ9dGhpcyxlPXUoKSxmPWMhPT0hMSYmcyxsPWZ1bmN0aW9uKCl7bnVsbCE9aSYmKGYmJnQ/dChpKTphLmNsZWFyVGltZW91dChpKSxpPW51bGwpfSxtPWZ1bmN0aW9uKGEpe2QudGltZT0odSgpLWUpLzFlMywoIWd8fGQudGltZT49a3x8YT09PSEwKSYmKGQuZnJhbWUrKyxrPWQudGltZT5rP2QudGltZStqLShkLnRpbWUtayk6ZC50aW1lK2otLjAwMSxkLnRpbWUrLjAwMT5rJiYoaz1kLnRpbWUrLjAwMSksZC5kaXNwYXRjaEV2ZW50KFwidGlja1wiKSksYSE9PSEwJiYoaT1oKG0pKX07ci5jYWxsKGQpLHRoaXMudGltZT10aGlzLmZyYW1lPTAsdGhpcy50aWNrPWZ1bmN0aW9uKCl7bSghMCl9LHRoaXMuZnBzPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhnPWEsaj0xLyhnfHw2MCksaz10aGlzLnRpbWUraixoPTA9PT1nP2Z1bmN0aW9uKCl7fTpmJiZzP3M6ZnVuY3Rpb24oYSl7cmV0dXJuIHNldFRpbWVvdXQoYSwxZTMqKGstZC50aW1lKSsxPj4wfHwxKX0sbCgpLGk9aChtKSx2b2lkIDApOmd9LHRoaXMudXNlUkFGPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhsKCksZj1hLGQuZnBzKGcpLHZvaWQgMCk6Zn0sZC5mcHMoYiksc2V0VGltZW91dChmdW5jdGlvbigpe2YmJiFpJiZkLnVzZVJBRighMSl9LDFlMyl9KSxnPWQuVGlja2VyLnByb3RvdHlwZT1uZXcgZC5ldmVudHMuRXZlbnREaXNwYXRjaGVyLGcuY29uc3RydWN0b3I9ZC5UaWNrZXI7dmFyIHY9bChcImNvcmUuQW5pbWF0aW9uXCIsZnVuY3Rpb24oYSxiKXtpZih0aGlzLnZhcnM9Ynx8e30sdGhpcy5fZHVyYXRpb249dGhpcy5fdG90YWxEdXJhdGlvbj1hfHwwLHRoaXMuX2RlbGF5PU51bWJlcih0aGlzLnZhcnMuZGVsYXkpfHwwLHRoaXMuX3RpbWVTY2FsZT0xLHRoaXMuX2FjdGl2ZT10aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyPT09ITAsdGhpcy5kYXRhPXRoaXMudmFycy5kYXRhLHRoaXMuX3JldmVyc2VkPXRoaXMudmFycy5yZXZlcnNlZD09PSEwLEkpe2h8fCh3LnRpY2soKSxoPSEwKTt2YXIgYz10aGlzLnZhcnMudXNlRnJhbWVzP0g6STtjLmFkZCh0aGlzLGMuX3RpbWUpLHRoaXMudmFycy5wYXVzZWQmJnRoaXMucGF1c2VkKCEwKX19KSx3PXYudGlja2VyPW5ldyBkLlRpY2tlcjtnPXYucHJvdG90eXBlLGcuX2RpcnR5PWcuX2djPWcuX2luaXR0ZWQ9Zy5fcGF1c2VkPSExLGcuX3RvdGFsVGltZT1nLl90aW1lPTAsZy5fcmF3UHJldlRpbWU9LTEsZy5fbmV4dD1nLl9sYXN0PWcuX29uVXBkYXRlPWcuX3RpbWVsaW5lPWcudGltZWxpbmU9bnVsbCxnLl9wYXVzZWQ9ITEsZy5wbGF5PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgmJnRoaXMuc2VlayhhLGIpLHRoaXMucmV2ZXJzZWQoITEpLHRoaXMucGF1c2VkKCExKX0sZy5wYXVzZT1mdW5jdGlvbihhLGIpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoJiZ0aGlzLnNlZWsoYSxiKSx0aGlzLnBhdXNlZCghMCl9LGcucmVzdW1lPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgmJnRoaXMuc2VlayhhLGIpLHRoaXMucGF1c2VkKCExKX0sZy5zZWVrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMudG90YWxUaW1lKE51bWJlcihhKSxiIT09ITEpfSxnLnJlc3RhcnQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5yZXZlcnNlZCghMSksdGhpcy5wYXVzZWQoITEpLHRoaXMudG90YWxUaW1lKGE/LXRoaXMuX2RlbGF5OjAsYiE9PSExKX0sZy5yZXZlcnNlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgmJnRoaXMuc2VlayhhfHx0aGlzLnRvdGFsRHVyYXRpb24oKSxiKSx0aGlzLnJldmVyc2VkKCEwKSx0aGlzLnBhdXNlZCghMSl9LGcucmVuZGVyPWZ1bmN0aW9uKCl7fSxnLmludmFsaWRhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sZy5fZW5hYmxlZD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLl9nYz0hYSx0aGlzLl9hY3RpdmU9YSYmIXRoaXMuX3BhdXNlZCYmdGhpcy5fdG90YWxUaW1lPjAmJnRoaXMuX3RvdGFsVGltZTx0aGlzLl90b3RhbER1cmF0aW9uLGIhPT0hMCYmKGEmJm51bGw9PXRoaXMudGltZWxpbmU/dGhpcy5fdGltZWxpbmUuYWRkKHRoaXMsdGhpcy5fc3RhcnRUaW1lLXRoaXMuX2RlbGF5KTphfHxudWxsPT10aGlzLnRpbWVsaW5lfHx0aGlzLl90aW1lbGluZS5fcmVtb3ZlKHRoaXMsITApKSwhMX0sZy5fa2lsbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbmFibGVkKCExLCExKX0sZy5raWxsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuX2tpbGwoYSxiKSx0aGlzfSxnLl91bmNhY2hlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hP3RoaXM6dGhpcy50aW1lbGluZTtiOyliLl9kaXJ0eT0hMCxiPWIudGltZWxpbmU7cmV0dXJuIHRoaXN9LGcuZXZlbnRDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyxkKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwib25cIj09PWEuc3Vic3RyKDAsMikpe2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLnZhcnNbYV07aWYobnVsbD09YilkZWxldGUgdGhpcy52YXJzW2FdO2Vsc2UgaWYodGhpcy52YXJzW2FdPWIsdGhpcy52YXJzW2ErXCJQYXJhbXNcIl09Yyx0aGlzLnZhcnNbYStcIlNjb3BlXCJdPWQsYylmb3IodmFyIGU9Yy5sZW5ndGg7LS1lPi0xOylcIntzZWxmfVwiPT09Y1tlXSYmKGM9dGhpcy52YXJzW2ErXCJQYXJhbXNcIl09Yy5jb25jYXQoKSxjW2VdPXRoaXMpO1wib25VcGRhdGVcIj09PWEmJih0aGlzLl9vblVwZGF0ZT1iKX1yZXR1cm4gdGhpc30sZy5kZWxheT1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcmJnRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0VGltZSthLXRoaXMuX2RlbGF5KSx0aGlzLl9kZWxheT1hLHRoaXMpOnRoaXMuX2RlbGF5fSxnLmR1cmF0aW9uPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9kdXJhdGlvbj10aGlzLl90b3RhbER1cmF0aW9uPWEsdGhpcy5fdW5jYWNoZSghMCksdGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcmJnRoaXMuX3RpbWU+MCYmdGhpcy5fdGltZTx0aGlzLl9kdXJhdGlvbiYmMCE9PWEmJnRoaXMudG90YWxUaW1lKHRoaXMuX3RvdGFsVGltZSooYS90aGlzLl9kdXJhdGlvbiksITApLHRoaXMpOih0aGlzLl9kaXJ0eT0hMSx0aGlzLl9kdXJhdGlvbil9LGcudG90YWxEdXJhdGlvbj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fZGlydHk9ITEsYXJndW1lbnRzLmxlbmd0aD90aGlzLmR1cmF0aW9uKGEpOnRoaXMuX3RvdGFsRHVyYXRpb259LGcudGltZT1mdW5jdGlvbihhLGIpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9kaXJ0eSYmdGhpcy50b3RhbER1cmF0aW9uKCksYT50aGlzLl9kdXJhdGlvbiYmKGE9dGhpcy5fZHVyYXRpb24pLHRoaXMudG90YWxUaW1lKGEsYikpOnRoaXMuX3RpbWV9LGcudG90YWxUaW1lPWZ1bmN0aW9uKGEsYil7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuX3RvdGFsVGltZTtpZih0aGlzLl90aW1lbGluZSl7aWYoMD5hJiYoYSs9dGhpcy50b3RhbER1cmF0aW9uKCkpLHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nJiYodGhpcy5fZGlydHkmJnRoaXMudG90YWxEdXJhdGlvbigpLGE+dGhpcy5fdG90YWxEdXJhdGlvbiYmKGE9dGhpcy5fdG90YWxEdXJhdGlvbiksdGhpcy5fc3RhcnRUaW1lPSh0aGlzLl9wYXVzZWQ/dGhpcy5fcGF1c2VUaW1lOnRoaXMuX3RpbWVsaW5lLl90aW1lKS0odGhpcy5fcmV2ZXJzZWQ/dGhpcy5fdG90YWxEdXJhdGlvbi1hOmEpL3RoaXMuX3RpbWVTY2FsZSx0aGlzLl90aW1lbGluZS5fZGlydHl8fHRoaXMuX3VuY2FjaGUoITEpLCF0aGlzLl90aW1lbGluZS5fYWN0aXZlKSlmb3IodmFyIGM9dGhpcy5fdGltZWxpbmU7Yy5fdGltZWxpbmU7KWMudG90YWxUaW1lKGMuX3RvdGFsVGltZSwhMCksYz1jLl90aW1lbGluZTt0aGlzLl9nYyYmdGhpcy5fZW5hYmxlZCghMCwhMSksdGhpcy5fdG90YWxUaW1lIT09YSYmdGhpcy5yZW5kZXIoYSxiLCExKX1yZXR1cm4gdGhpc30sZy5zdGFydFRpbWU9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGEhPT10aGlzLl9zdGFydFRpbWUmJih0aGlzLl9zdGFydFRpbWU9YSx0aGlzLnRpbWVsaW5lJiZ0aGlzLnRpbWVsaW5lLl9zb3J0Q2hpbGRyZW4mJnRoaXMudGltZWxpbmUuYWRkKHRoaXMsYS10aGlzLl9kZWxheSkpLHRoaXMpOnRoaXMuX3N0YXJ0VGltZX0sZy50aW1lU2NhbGU9ZnVuY3Rpb24oYSl7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuX3RpbWVTY2FsZTtpZihhPWF8fDFlLTYsdGhpcy5fdGltZWxpbmUmJnRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKXt2YXIgYj10aGlzLl9wYXVzZVRpbWV8fDA9PT10aGlzLl9wYXVzZVRpbWU/dGhpcy5fcGF1c2VUaW1lOnRoaXMuX3RpbWVsaW5lLl90b3RhbFRpbWU7dGhpcy5fc3RhcnRUaW1lPWItKGItdGhpcy5fc3RhcnRUaW1lKSp0aGlzLl90aW1lU2NhbGUvYX1yZXR1cm4gdGhpcy5fdGltZVNjYWxlPWEsdGhpcy5fdW5jYWNoZSghMSl9LGcucmV2ZXJzZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGEhPXRoaXMuX3JldmVyc2VkJiYodGhpcy5fcmV2ZXJzZWQ9YSx0aGlzLnRvdGFsVGltZSh0aGlzLl90b3RhbFRpbWUsITApKSx0aGlzKTp0aGlzLl9yZXZlcnNlZH0sZy5wYXVzZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGEhPXRoaXMuX3BhdXNlZCYmdGhpcy5fdGltZWxpbmUmJighYSYmdGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcmJih0aGlzLl9zdGFydFRpbWUrPXRoaXMuX3RpbWVsaW5lLnJhd1RpbWUoKS10aGlzLl9wYXVzZVRpbWUsdGhpcy5fdW5jYWNoZSghMSkpLHRoaXMuX3BhdXNlVGltZT1hP3RoaXMuX3RpbWVsaW5lLnJhd1RpbWUoKTpudWxsLHRoaXMuX3BhdXNlZD1hLHRoaXMuX2FjdGl2ZT0hdGhpcy5fcGF1c2VkJiZ0aGlzLl90b3RhbFRpbWU+MCYmdGhpcy5fdG90YWxUaW1lPHRoaXMuX3RvdGFsRHVyYXRpb24pLHRoaXMuX2djJiYoYXx8dGhpcy5fZW5hYmxlZCghMCwhMSkpLHRoaXMpOnRoaXMuX3BhdXNlZH07dmFyIHg9bChcImNvcmUuU2ltcGxlVGltZWxpbmVcIixmdW5jdGlvbihhKXt2LmNhbGwodGhpcywwLGEpLHRoaXMuYXV0b1JlbW92ZUNoaWxkcmVuPXRoaXMuc21vb3RoQ2hpbGRUaW1pbmc9ITB9KTtnPXgucHJvdG90eXBlPW5ldyB2LGcuY29uc3RydWN0b3I9eCxnLmtpbGwoKS5fZ2M9ITEsZy5fZmlyc3Q9Zy5fbGFzdD1udWxsLGcuX3NvcnRDaGlsZHJlbj0hMSxnLmFkZD1mdW5jdGlvbihhLGIpe3ZhciBlLGY7aWYoYS5fc3RhcnRUaW1lPU51bWJlcihifHwwKSthLl9kZWxheSxhLl9wYXVzZWQmJnRoaXMhPT1hLl90aW1lbGluZSYmKGEuX3BhdXNlVGltZT1hLl9zdGFydFRpbWUrKHRoaXMucmF3VGltZSgpLWEuX3N0YXJ0VGltZSkvYS5fdGltZVNjYWxlKSxhLnRpbWVsaW5lJiZhLnRpbWVsaW5lLl9yZW1vdmUoYSwhMCksYS50aW1lbGluZT1hLl90aW1lbGluZT10aGlzLGEuX2djJiZhLl9lbmFibGVkKCEwLCEwKSxlPXRoaXMuX2xhc3QsdGhpcy5fc29ydENoaWxkcmVuKWZvcihmPWEuX3N0YXJ0VGltZTtlJiZlLl9zdGFydFRpbWU+ZjspZT1lLl9wcmV2O3JldHVybiBlPyhhLl9uZXh0PWUuX25leHQsZS5fbmV4dD1hKTooYS5fbmV4dD10aGlzLl9maXJzdCx0aGlzLl9maXJzdD1hKSxhLl9uZXh0P2EuX25leHQuX3ByZXY9YTp0aGlzLl9sYXN0PWEsYS5fcHJldj1lLHRoaXMuX3RpbWVsaW5lJiZ0aGlzLl91bmNhY2hlKCEwKSx0aGlzfSxnLmluc2VydD1nLmFkZCxnLl9yZW1vdmU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS50aW1lbGluZT09PXRoaXMmJihifHxhLl9lbmFibGVkKCExLCEwKSxhLnRpbWVsaW5lPW51bGwsYS5fcHJldj9hLl9wcmV2Ll9uZXh0PWEuX25leHQ6dGhpcy5fZmlyc3Q9PT1hJiYodGhpcy5fZmlyc3Q9YS5fbmV4dCksYS5fbmV4dD9hLl9uZXh0Ll9wcmV2PWEuX3ByZXY6dGhpcy5fbGFzdD09PWEmJih0aGlzLl9sYXN0PWEuX3ByZXYpLHRoaXMuX3RpbWVsaW5lJiZ0aGlzLl91bmNhY2hlKCEwKSksdGhpc30sZy5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgZSxkPXRoaXMuX2ZpcnN0O2Zvcih0aGlzLl90b3RhbFRpbWU9dGhpcy5fdGltZT10aGlzLl9yYXdQcmV2VGltZT1hO2Q7KWU9ZC5fbmV4dCwoZC5fYWN0aXZlfHxhPj1kLl9zdGFydFRpbWUmJiFkLl9wYXVzZWQpJiYoZC5fcmV2ZXJzZWQ/ZC5yZW5kZXIoKGQuX2RpcnR5P2QudG90YWxEdXJhdGlvbigpOmQuX3RvdGFsRHVyYXRpb24pLShhLWQuX3N0YXJ0VGltZSkqZC5fdGltZVNjYWxlLGIsITEpOmQucmVuZGVyKChhLWQuX3N0YXJ0VGltZSkqZC5fdGltZVNjYWxlLGIsITEpKSxkPWV9LGcucmF3VGltZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl90b3RhbFRpbWV9O3ZhciB5PWwoXCJUd2VlbkxpdGVcIixmdW5jdGlvbihhLGIsYyl7aWYodi5jYWxsKHRoaXMsYixjKSxudWxsPT1hKXRocm93XCJDYW5ub3QgdHdlZW4gYW4gdW5kZWZpbmVkIHJlZmVyZW5jZS5cIjt0aGlzLnRhcmdldD1hPVwic3RyaW5nXCIhPXR5cGVvZiBhP2E6eS5zZWxlY3RvcihhKXx8YSx0aGlzLl9vdmVyd3JpdGU9bnVsbD09dGhpcy52YXJzLm92ZXJ3cml0ZT9HW3kuZGVmYXVsdE92ZXJ3cml0ZV06XCJudW1iZXJcIj09dHlwZW9mIHRoaXMudmFycy5vdmVyd3JpdGU/dGhpcy52YXJzLm92ZXJ3cml0ZT4+MDpHW3RoaXMudmFycy5vdmVyd3JpdGVdO3ZhciBlLGYsZD1hLmpxdWVyeXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYS5lYWNoJiZhWzBdJiZhWzBdLm5vZGVUeXBlJiZhWzBdLnN0eWxlO2lmKChkfHxhIGluc3RhbmNlb2YgQXJyYXkpJiZcIm51bWJlclwiIT10eXBlb2YgYVswXSlmb3IodGhpcy5fdGFyZ2V0cz1kJiYhYS5zbGljZT9BKGEpOmEuc2xpY2UoMCksdGhpcy5fcHJvcExvb2t1cD1bXSx0aGlzLl9zaWJsaW5ncz1bXSxlPTA7dGhpcy5fdGFyZ2V0cy5sZW5ndGg+ZTtlKyspZj10aGlzLl90YXJnZXRzW2VdLGY/XCJzdHJpbmdcIiE9dHlwZW9mIGY/XCJmdW5jdGlvblwiPT10eXBlb2YgZi5lYWNoJiZmWzBdJiZmWzBdLm5vZGVUeXBlJiZmWzBdLnN0eWxlPyh0aGlzLl90YXJnZXRzLnNwbGljZShlLS0sMSksdGhpcy5fdGFyZ2V0cz10aGlzLl90YXJnZXRzLmNvbmNhdChBKGYpKSk6KHRoaXMuX3NpYmxpbmdzW2VdPUooZix0aGlzLCExKSwxPT09dGhpcy5fb3ZlcndyaXRlJiZ0aGlzLl9zaWJsaW5nc1tlXS5sZW5ndGg+MSYmSyhmLHRoaXMsbnVsbCwxLHRoaXMuX3NpYmxpbmdzW2VdKSk6KGY9dGhpcy5fdGFyZ2V0c1tlLS1dPXkuc2VsZWN0b3IoZiksXCJzdHJpbmdcIj09dHlwZW9mIGYmJnRoaXMuX3RhcmdldHMuc3BsaWNlKGUrMSwxKSk6dGhpcy5fdGFyZ2V0cy5zcGxpY2UoZS0tLDEpO2Vsc2UgdGhpcy5fcHJvcExvb2t1cD17fSx0aGlzLl9zaWJsaW5ncz1KKGEsdGhpcywhMSksMT09PXRoaXMuX292ZXJ3cml0ZSYmdGhpcy5fc2libGluZ3MubGVuZ3RoPjEmJksoYSx0aGlzLG51bGwsMSx0aGlzLl9zaWJsaW5ncyk7KHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXJ8fDA9PT1iJiYwPT09dGhpcy5fZGVsYXkmJnRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIhPT0hMSkmJnRoaXMucmVuZGVyKC10aGlzLl9kZWxheSwhMSwhMCl9LCEwKSx6PWZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGEuZWFjaCYmYVswXSYmYVswXS5ub2RlVHlwZSYmYVswXS5zdHlsZX0sQT1mdW5jdGlvbihhKXt2YXIgYj1bXTtyZXR1cm4gYS5lYWNoKGZ1bmN0aW9uKCl7Yi5wdXNoKHRoaXMpfSksYn0sQj1mdW5jdGlvbihhKXt2YXIgYyxiPXt9O2ZvcihjIGluIGEpIUZbY10mJighQ1tjXXx8Q1tjXSYmQ1tjXS5fYXV0b0NTUykmJihiW2NdPWFbY10sZGVsZXRlIGFbY10pO2EuY3NzPWJ9O2c9eS5wcm90b3R5cGU9bmV3IHYsZy5jb25zdHJ1Y3Rvcj15LGcua2lsbCgpLl9nYz0hMSxnLnJhdGlvPTAsZy5fZmlyc3RQVD1nLl90YXJnZXRzPWcuX292ZXJ3cml0dGVuUHJvcHM9bnVsbCxnLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkPSExLHkudmVyc2lvbj1cIjEuOC4xXCIseS5kZWZhdWx0RWFzZT1nLl9lYXNlPW5ldyBvKG51bGwsbnVsbCwxLDEpLHkuZGVmYXVsdE92ZXJ3cml0ZT1cImF1dG9cIix5LnRpY2tlcj13LHkuc2VsZWN0b3I9YS4kfHxhLmpRdWVyeXx8ZnVuY3Rpb24oYil7cmV0dXJuIGEuJD8oeS5zZWxlY3Rvcj1hLiQsYS4kKGIpKTphLmRvY3VtZW50P2EuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCIjXCI9PT1iLmNoYXJBdCgwKT9iLnN1YnN0cigxKTpiKTpifTt2YXIgQz15Ll9wbHVnaW5zPXt9LEQ9eS5fdHdlZW5Mb29rdXA9e30sRT0wLEY9e2Vhc2U6MSxkZWxheToxLG92ZXJ3cml0ZToxLG9uQ29tcGxldGU6MSxvbkNvbXBsZXRlUGFyYW1zOjEsb25Db21wbGV0ZVNjb3BlOjEsdXNlRnJhbWVzOjEscnVuQmFja3dhcmRzOjEsc3RhcnRBdDoxLG9uVXBkYXRlOjEsb25VcGRhdGVQYXJhbXM6MSxvblVwZGF0ZVNjb3BlOjEsb25TdGFydDoxLG9uU3RhcnRQYXJhbXM6MSxvblN0YXJ0U2NvcGU6MSxvblJldmVyc2VDb21wbGV0ZToxLG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOjEsb25SZXZlcnNlQ29tcGxldGVTY29wZToxLG9uUmVwZWF0OjEsb25SZXBlYXRQYXJhbXM6MSxvblJlcGVhdFNjb3BlOjEsZWFzZVBhcmFtczoxLHlveW86MSxvcmllbnRUb0JlemllcjoxLGltbWVkaWF0ZVJlbmRlcjoxLHJlcGVhdDoxLHJlcGVhdERlbGF5OjEsZGF0YToxLHBhdXNlZDoxLHJldmVyc2VkOjEsYXV0b0NTUzoxfSxHPXtub25lOjAsYWxsOjEsYXV0bzoyLGNvbmN1cnJlbnQ6MyxhbGxPblN0YXJ0OjQscHJlZXhpc3Rpbmc6NSxcInRydWVcIjoxLFwiZmFsc2VcIjowfSxIPXYuX3Jvb3RGcmFtZXNUaW1lbGluZT1uZXcgeCxJPXYuX3Jvb3RUaW1lbGluZT1uZXcgeDtJLl9zdGFydFRpbWU9dy50aW1lLEguX3N0YXJ0VGltZT13LmZyYW1lLEkuX2FjdGl2ZT1ILl9hY3RpdmU9ITAsdi5fdXBkYXRlUm9vdD1mdW5jdGlvbigpe2lmKEkucmVuZGVyKCh3LnRpbWUtSS5fc3RhcnRUaW1lKSpJLl90aW1lU2NhbGUsITEsITEpLEgucmVuZGVyKCh3LmZyYW1lLUguX3N0YXJ0VGltZSkqSC5fdGltZVNjYWxlLCExLCExKSwhKHcuZnJhbWUlMTIwKSl7dmFyIGEsYixjO2ZvcihjIGluIEQpe2ZvcihiPURbY10udHdlZW5zLGE9Yi5sZW5ndGg7LS1hPi0xOyliW2FdLl9nYyYmYi5zcGxpY2UoYSwxKTswPT09Yi5sZW5ndGgmJmRlbGV0ZSBEW2NdfX19LHcuYWRkRXZlbnRMaXN0ZW5lcihcInRpY2tcIix2Ll91cGRhdGVSb290KTt2YXIgSj1mdW5jdGlvbihhLGIsYyl7dmFyIGUsZixkPWEuX2dzVHdlZW5JRDtpZihEW2R8fChhLl9nc1R3ZWVuSUQ9ZD1cInRcIitFKyspXXx8KERbZF09e3RhcmdldDphLHR3ZWVuczpbXX0pLGImJihlPURbZF0udHdlZW5zLGVbZj1lLmxlbmd0aF09YixjKSlmb3IoOy0tZj4tMTspZVtmXT09PWImJmUuc3BsaWNlKGYsMSk7cmV0dXJuIERbZF0udHdlZW5zfSxLPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGk7aWYoMT09PWR8fGQ+PTQpe2ZvcihpPWUubGVuZ3RoLGY9MDtpPmY7ZisrKWlmKChoPWVbZl0pIT09YiloLl9nY3x8aC5fZW5hYmxlZCghMSwhMSkmJihnPSEwKTtlbHNlIGlmKDU9PT1kKWJyZWFrO3JldHVybiBnfXZhciBuLGo9Yi5fc3RhcnRUaW1lKzFlLTEwLGs9W10sbD0wLG09MD09PWIuX2R1cmF0aW9uO2ZvcihmPWUubGVuZ3RoOy0tZj4tMTspKGg9ZVtmXSk9PT1ifHxoLl9nY3x8aC5fcGF1c2VkfHwoaC5fdGltZWxpbmUhPT1iLl90aW1lbGluZT8obj1ufHxMKGIsMCxtKSwwPT09TChoLG4sbSkmJihrW2wrK109aCkpOmo+PWguX3N0YXJ0VGltZSYmaC5fc3RhcnRUaW1lK2gudG90YWxEdXJhdGlvbigpL2guX3RpbWVTY2FsZSsxZS0xMD5qJiYoKG18fCFoLl9pbml0dGVkKSYmMmUtMTA+PWotaC5fc3RhcnRUaW1lfHwoa1tsKytdPWgpKSk7Zm9yKGY9bDstLWY+LTE7KWg9a1tmXSwyPT09ZCYmaC5fa2lsbChjLGEpJiYoZz0hMCksKDIhPT1kfHwhaC5fZmlyc3RQVCYmaC5faW5pdHRlZCkmJmguX2VuYWJsZWQoITEsITEpJiYoZz0hMCk7cmV0dXJuIGd9LEw9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1hLl90aW1lbGluZSxlPWQuX3RpbWVTY2FsZSxmPWEuX3N0YXJ0VGltZTtkLl90aW1lbGluZTspe2lmKGYrPWQuX3N0YXJ0VGltZSxlKj1kLl90aW1lU2NhbGUsZC5fcGF1c2VkKXJldHVybi0xMDA7ZD1kLl90aW1lbGluZX1yZXR1cm4gZi89ZSxmPmI/Zi1iOmMmJmY9PT1ifHwhYS5faW5pdHRlZCYmMmUtMTA+Zi1iPzFlLTEwOihmKz1hLnRvdGFsRHVyYXRpb24oKS9hLl90aW1lU2NhbGUvZSk+Yj8wOmYtYi0xZS0xMH07Zy5faW5pdD1mdW5jdGlvbigpe3ZhciBjLGQsZSxhPXRoaXMudmFycyxiPWEuZWFzZTtpZihhLnN0YXJ0QXQmJihhLnN0YXJ0QXQub3ZlcndyaXRlPTAsYS5zdGFydEF0LmltbWVkaWF0ZVJlbmRlcj0hMCx5LnRvKHRoaXMudGFyZ2V0LDAsYS5zdGFydEF0KSksdGhpcy5fZWFzZT1iP2IgaW5zdGFuY2VvZiBvP2EuZWFzZVBhcmFtcyBpbnN0YW5jZW9mIEFycmF5P2IuY29uZmlnLmFwcGx5KGIsYS5lYXNlUGFyYW1zKTpiOlwiZnVuY3Rpb25cIj09dHlwZW9mIGI/bmV3IG8oYixhLmVhc2VQYXJhbXMpOnBbYl18fHkuZGVmYXVsdEVhc2U6eS5kZWZhdWx0RWFzZSx0aGlzLl9lYXNlVHlwZT10aGlzLl9lYXNlLl90eXBlLHRoaXMuX2Vhc2VQb3dlcj10aGlzLl9lYXNlLl9wb3dlcix0aGlzLl9maXJzdFBUPW51bGwsdGhpcy5fdGFyZ2V0cylmb3IoYz10aGlzLl90YXJnZXRzLmxlbmd0aDstLWM+LTE7KXRoaXMuX2luaXRQcm9wcyh0aGlzLl90YXJnZXRzW2NdLHRoaXMuX3Byb3BMb29rdXBbY109e30sdGhpcy5fc2libGluZ3NbY10sdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcz90aGlzLl9vdmVyd3JpdHRlblByb3BzW2NdOm51bGwpJiYoZD0hMCk7ZWxzZSBkPXRoaXMuX2luaXRQcm9wcyh0aGlzLnRhcmdldCx0aGlzLl9wcm9wTG9va3VwLHRoaXMuX3NpYmxpbmdzLHRoaXMuX292ZXJ3cml0dGVuUHJvcHMpO2lmKGQmJnkuX29uUGx1Z2luRXZlbnQoXCJfb25Jbml0QWxsUHJvcHNcIix0aGlzKSx0aGlzLl9vdmVyd3JpdHRlblByb3BzJiZudWxsPT10aGlzLl9maXJzdFBUJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzLnRhcmdldCYmdGhpcy5fZW5hYmxlZCghMSwhMSksYS5ydW5CYWNrd2FyZHMpZm9yKGU9dGhpcy5fZmlyc3RQVDtlOyllLnMrPWUuYyxlLmM9LWUuYyxlPWUuX25leHQ7dGhpcy5fb25VcGRhdGU9YS5vblVwZGF0ZSx0aGlzLl9pbml0dGVkPSEwfSxnLl9pbml0UHJvcHM9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnLGgsaSxqLGs7aWYobnVsbD09YSlyZXR1cm4hMTt0aGlzLnZhcnMuY3NzfHxhLnN0eWxlJiZhLm5vZGVUeXBlJiZDLmNzcyYmdGhpcy52YXJzLmF1dG9DU1MhPT0hMSYmQih0aGlzLnZhcnMpO2ZvcihlIGluIHRoaXMudmFycyl7aWYoRltlXSl7aWYoKFwib25TdGFydFBhcmFtc1wiPT09ZXx8XCJvblVwZGF0ZVBhcmFtc1wiPT09ZXx8XCJvbkNvbXBsZXRlUGFyYW1zXCI9PT1lfHxcIm9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zXCI9PT1lfHxcIm9uUmVwZWF0UGFyYW1zXCI9PT1lKSYmKGk9dGhpcy52YXJzW2VdKSlmb3IoZj1pLmxlbmd0aDstLWY+LTE7KVwie3NlbGZ9XCI9PT1pW2ZdJiYoaT10aGlzLnZhcnNbZV09aS5jb25jYXQoKSxpW2ZdPXRoaXMpfWVsc2UgaWYoQ1tlXSYmKGg9bmV3IENbZV0pLl9vbkluaXRUd2VlbihhLHRoaXMudmFyc1tlXSx0aGlzKSl7Zm9yKHRoaXMuX2ZpcnN0UFQ9aj17X25leHQ6dGhpcy5fZmlyc3RQVCx0OmgscDpcInNldFJhdGlvXCIsczowLGM6MSxmOiEwLG46ZSxwZzohMCxwcjpoLl9wcmlvcml0eX0sZj1oLl9vdmVyd3JpdGVQcm9wcy5sZW5ndGg7LS1mPi0xOyliW2guX292ZXJ3cml0ZVByb3BzW2ZdXT10aGlzLl9maXJzdFBUOyhoLl9wcmlvcml0eXx8aC5fb25Jbml0QWxsUHJvcHMpJiYoZz0hMCksKGguX29uRGlzYWJsZXx8aC5fb25FbmFibGUpJiYodGhpcy5fbm90aWZ5UGx1Z2luc09mRW5hYmxlZD0hMCl9ZWxzZSB0aGlzLl9maXJzdFBUPWJbZV09aj17X25leHQ6dGhpcy5fZmlyc3RQVCx0OmEscDplLGY6XCJmdW5jdGlvblwiPT10eXBlb2YgYVtlXSxuOmUscGc6ITEscHI6MH0sai5zPWouZj9hW2UuaW5kZXhPZihcInNldFwiKXx8XCJmdW5jdGlvblwiIT10eXBlb2YgYVtcImdldFwiK2Uuc3Vic3RyKDMpXT9lOlwiZ2V0XCIrZS5zdWJzdHIoMyldKCk6cGFyc2VGbG9hdChhW2VdKSxrPXRoaXMudmFyc1tlXSxqLmM9XCJzdHJpbmdcIj09dHlwZW9mIGsmJlwiPVwiPT09ay5jaGFyQXQoMSk/cGFyc2VJbnQoay5jaGFyQXQoMCkrXCIxXCIsMTApKk51bWJlcihrLnN1YnN0cigyKSk6TnVtYmVyKGspLWouc3x8MDtqJiZqLl9uZXh0JiYoai5fbmV4dC5fcHJldj1qKX1yZXR1cm4gZCYmdGhpcy5fa2lsbChkLGEpP3RoaXMuX2luaXRQcm9wcyhhLGIsYyxkKTp0aGlzLl9vdmVyd3JpdGU+MSYmdGhpcy5fZmlyc3RQVCYmYy5sZW5ndGg+MSYmSyhhLHRoaXMsYix0aGlzLl9vdmVyd3JpdGUsYyk/KHRoaXMuX2tpbGwoYixhKSx0aGlzLl9pbml0UHJvcHMoYSxiLGMsZCkpOmd9LGcucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZSxmLGcsZD10aGlzLl90aW1lO2lmKGE+PXRoaXMuX2R1cmF0aW9uKXRoaXMuX3RvdGFsVGltZT10aGlzLl90aW1lPXRoaXMuX2R1cmF0aW9uLHRoaXMucmF0aW89dGhpcy5fZWFzZS5fY2FsY0VuZD90aGlzLl9lYXNlLmdldFJhdGlvKDEpOjEsdGhpcy5fcmV2ZXJzZWR8fChlPSEwLGY9XCJvbkNvbXBsZXRlXCIpLDA9PT10aGlzLl9kdXJhdGlvbiYmKCgwPT09YXx8MD50aGlzLl9yYXdQcmV2VGltZSkmJnRoaXMuX3Jhd1ByZXZUaW1lIT09YSYmKGM9ITApLHRoaXMuX3Jhd1ByZXZUaW1lPWEpO2Vsc2UgaWYoMD49YSl0aGlzLl90b3RhbFRpbWU9dGhpcy5fdGltZT0wLHRoaXMucmF0aW89dGhpcy5fZWFzZS5fY2FsY0VuZD90aGlzLl9lYXNlLmdldFJhdGlvKDApOjAsKDAhPT1kfHwwPT09dGhpcy5fZHVyYXRpb24mJnRoaXMuX3Jhd1ByZXZUaW1lPjApJiYoZj1cIm9uUmV2ZXJzZUNvbXBsZXRlXCIsZT10aGlzLl9yZXZlcnNlZCksMD5hPyh0aGlzLl9hY3RpdmU9ITEsMD09PXRoaXMuX2R1cmF0aW9uJiYodGhpcy5fcmF3UHJldlRpbWU+PTAmJihjPSEwKSx0aGlzLl9yYXdQcmV2VGltZT1hKSk6dGhpcy5faW5pdHRlZHx8KGM9ITApO2Vsc2UgaWYodGhpcy5fdG90YWxUaW1lPXRoaXMuX3RpbWU9YSx0aGlzLl9lYXNlVHlwZSl7dmFyIGg9YS90aGlzLl9kdXJhdGlvbixpPXRoaXMuX2Vhc2VUeXBlLGo9dGhpcy5fZWFzZVBvd2VyOygxPT09aXx8Mz09PWkmJmg+PS41KSYmKGg9MS1oKSwzPT09aSYmKGgqPTIpLDE9PT1qP2gqPWg6Mj09PWo/aCo9aCpoOjM9PT1qP2gqPWgqaCpoOjQ9PT1qJiYoaCo9aCpoKmgqaCksdGhpcy5yYXRpbz0xPT09aT8xLWg6Mj09PWk/aDouNT5hL3RoaXMuX2R1cmF0aW9uP2gvMjoxLWgvMn1lbHNlIHRoaXMucmF0aW89dGhpcy5fZWFzZS5nZXRSYXRpbyhhL3RoaXMuX2R1cmF0aW9uKTtpZih0aGlzLl90aW1lIT09ZHx8Yyl7Zm9yKHRoaXMuX2luaXR0ZWR8fCh0aGlzLl9pbml0KCksIWUmJnRoaXMuX3RpbWUmJih0aGlzLnJhdGlvPXRoaXMuX2Vhc2UuZ2V0UmF0aW8odGhpcy5fdGltZS90aGlzLl9kdXJhdGlvbikpKSx0aGlzLl9hY3RpdmV8fHRoaXMuX3BhdXNlZHx8KHRoaXMuX2FjdGl2ZT0hMCksMD09PWQmJnRoaXMudmFycy5vblN0YXJ0JiYoMCE9PXRoaXMuX3RpbWV8fDA9PT10aGlzLl9kdXJhdGlvbikmJihifHx0aGlzLnZhcnMub25TdGFydC5hcHBseSh0aGlzLnZhcnMub25TdGFydFNjb3BlfHx0aGlzLHRoaXMudmFycy5vblN0YXJ0UGFyYW1zfHxuKSksZz10aGlzLl9maXJzdFBUO2c7KWcuZj9nLnRbZy5wXShnLmMqdGhpcy5yYXRpbytnLnMpOmcudFtnLnBdPWcuYyp0aGlzLnJhdGlvK2cucyxnPWcuX25leHQ7dGhpcy5fb25VcGRhdGUmJihifHx0aGlzLl9vblVwZGF0ZS5hcHBseSh0aGlzLnZhcnMub25VcGRhdGVTY29wZXx8dGhpcyx0aGlzLnZhcnMub25VcGRhdGVQYXJhbXN8fG4pKSxmJiYodGhpcy5fZ2N8fChlJiYodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuJiZ0aGlzLl9lbmFibGVkKCExLCExKSx0aGlzLl9hY3RpdmU9ITEpLGJ8fHRoaXMudmFyc1tmXSYmdGhpcy52YXJzW2ZdLmFwcGx5KHRoaXMudmFyc1tmK1wiU2NvcGVcIl18fHRoaXMsdGhpcy52YXJzW2YrXCJQYXJhbXNcIl18fG4pKSl9fSxnLl9raWxsPWZ1bmN0aW9uKGEsYil7aWYoXCJhbGxcIj09PWEmJihhPW51bGwpLG51bGw9PWEmJihudWxsPT1ifHxiPT09dGhpcy50YXJnZXQpKXJldHVybiB0aGlzLl9lbmFibGVkKCExLCExKTtiPVwic3RyaW5nXCIhPXR5cGVvZiBiP2J8fHRoaXMuX3RhcmdldHN8fHRoaXMudGFyZ2V0Onkuc2VsZWN0b3IoYil8fGI7dmFyIGMsZCxlLGYsZyxoLGksajtpZigoYiBpbnN0YW5jZW9mIEFycmF5fHx6KGIpKSYmXCJudW1iZXJcIiE9dHlwZW9mIGJbMF0pZm9yKGM9Yi5sZW5ndGg7LS1jPi0xOyl0aGlzLl9raWxsKGEsYltjXSkmJihoPSEwKTtlbHNle2lmKHRoaXMuX3RhcmdldHMpe2ZvcihjPXRoaXMuX3RhcmdldHMubGVuZ3RoOy0tYz4tMTspaWYoYj09PXRoaXMuX3RhcmdldHNbY10pe2c9dGhpcy5fcHJvcExvb2t1cFtjXXx8e30sdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcz10aGlzLl9vdmVyd3JpdHRlblByb3BzfHxbXSxkPXRoaXMuX292ZXJ3cml0dGVuUHJvcHNbY109YT90aGlzLl9vdmVyd3JpdHRlblByb3BzW2NdfHx7fTpcImFsbFwiO2JyZWFrfX1lbHNle2lmKGIhPT10aGlzLnRhcmdldClyZXR1cm4hMTtnPXRoaXMuX3Byb3BMb29rdXAsZD10aGlzLl9vdmVyd3JpdHRlblByb3BzPWE/dGhpcy5fb3ZlcndyaXR0ZW5Qcm9wc3x8e306XCJhbGxcIn1pZihnKXtpPWF8fGcsaj1hIT09ZCYmXCJhbGxcIiE9PWQmJmEhPT1nJiYobnVsbD09YXx8YS5fdGVtcEtpbGwhPT0hMCk7Zm9yKGUgaW4gaSkoZj1nW2VdKSYmKGYucGcmJmYudC5fa2lsbChpKSYmKGg9ITApLGYucGcmJjAhPT1mLnQuX292ZXJ3cml0ZVByb3BzLmxlbmd0aHx8KGYuX3ByZXY/Zi5fcHJldi5fbmV4dD1mLl9uZXh0OmY9PT10aGlzLl9maXJzdFBUJiYodGhpcy5fZmlyc3RQVD1mLl9uZXh0KSxmLl9uZXh0JiYoZi5fbmV4dC5fcHJldj1mLl9wcmV2KSxmLl9uZXh0PWYuX3ByZXY9bnVsbCksZGVsZXRlIGdbZV0pLGomJihkW2VdPTEpfX1yZXR1cm4gaH0sZy5pbnZhbGlkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQmJnkuX29uUGx1Z2luRXZlbnQoXCJfb25EaXNhYmxlXCIsdGhpcyksdGhpcy5fZmlyc3RQVD1udWxsLHRoaXMuX292ZXJ3cml0dGVuUHJvcHM9bnVsbCx0aGlzLl9vblVwZGF0ZT1udWxsLHRoaXMuX2luaXR0ZWQ9dGhpcy5fYWN0aXZlPXRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQ9ITEsdGhpcy5fcHJvcExvb2t1cD10aGlzLl90YXJnZXRzP3t9OltdLHRoaXN9LGcuX2VuYWJsZWQ9ZnVuY3Rpb24oYSxiKXtpZihhJiZ0aGlzLl9nYylpZih0aGlzLl90YXJnZXRzKWZvcih2YXIgYz10aGlzLl90YXJnZXRzLmxlbmd0aDstLWM+LTE7KXRoaXMuX3NpYmxpbmdzW2NdPUoodGhpcy5fdGFyZ2V0c1tjXSx0aGlzLCEwKTtlbHNlIHRoaXMuX3NpYmxpbmdzPUoodGhpcy50YXJnZXQsdGhpcywhMCk7cmV0dXJuIHYucHJvdG90eXBlLl9lbmFibGVkLmNhbGwodGhpcyxhLGIpLHRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQmJnRoaXMuX2ZpcnN0UFQ/eS5fb25QbHVnaW5FdmVudChhP1wiX29uRW5hYmxlXCI6XCJfb25EaXNhYmxlXCIsdGhpcyk6ITF9LHkudG89ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuZXcgeShhLGIsYyl9LHkuZnJvbT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGMucnVuQmFja3dhcmRzPSEwLGMuaW1tZWRpYXRlUmVuZGVyIT09ITEmJihjLmltbWVkaWF0ZVJlbmRlcj0hMCksbmV3IHkoYSxiLGMpfSx5LmZyb21Ubz1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gZC5zdGFydEF0PWMsYy5pbW1lZGlhdGVSZW5kZXImJihkLmltbWVkaWF0ZVJlbmRlcj0hMCksbmV3IHkoYSxiLGQpfSx5LmRlbGF5ZWRDYWxsPWZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIG5ldyB5KGIsMCx7ZGVsYXk6YSxvbkNvbXBsZXRlOmIsb25Db21wbGV0ZVBhcmFtczpjLG9uQ29tcGxldGVTY29wZTpkLG9uUmV2ZXJzZUNvbXBsZXRlOmIsb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6YyxvblJldmVyc2VDb21wbGV0ZVNjb3BlOmQsaW1tZWRpYXRlUmVuZGVyOiExLHVzZUZyYW1lczplLG92ZXJ3cml0ZTowfSl9LHkuc2V0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyB5KGEsMCxiKX0seS5raWxsVHdlZW5zT2Y9eS5raWxsRGVsYXllZENhbGxzVG89ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9eS5nZXRUd2VlbnNPZihhKSxkPWMubGVuZ3RoOy0tZD4tMTspY1tkXS5fa2lsbChiLGEpfSx5LmdldFR3ZWVuc09mPWZ1bmN0aW9uKGEpe2lmKG51bGwhPWEpe2E9XCJzdHJpbmdcIiE9dHlwZW9mIGE/YTp5LnNlbGVjdG9yKGEpfHxhO3ZhciBiLGMsZCxlO2lmKChhIGluc3RhbmNlb2YgQXJyYXl8fHooYSkpJiZcIm51bWJlclwiIT10eXBlb2YgYVswXSl7Zm9yKGI9YS5sZW5ndGgsYz1bXTstLWI+LTE7KWM9Yy5jb25jYXQoeS5nZXRUd2VlbnNPZihhW2JdKSk7Zm9yKGI9Yy5sZW5ndGg7LS1iPi0xOylmb3IoZT1jW2JdLGQ9YjstLWQ+LTE7KWU9PT1jW2RdJiZjLnNwbGljZShiLDEpfWVsc2UgZm9yKGM9SihhKS5jb25jYXQoKSxiPWMubGVuZ3RoOy0tYj4tMTspY1tiXS5fZ2MmJmMuc3BsaWNlKGIsMSk7cmV0dXJuIGN9fTt2YXIgTT1sKFwicGx1Z2lucy5Ud2VlblBsdWdpblwiLGZ1bmN0aW9uKGEsYil7dGhpcy5fb3ZlcndyaXRlUHJvcHM9KGF8fFwiXCIpLnNwbGl0KFwiLFwiKSx0aGlzLl9wcm9wTmFtZT10aGlzLl9vdmVyd3JpdGVQcm9wc1swXSx0aGlzLl9wcmlvcml0eT1ifHwwfSwhMCk7aWYoZz1NLnByb3RvdHlwZSxNLnZlcnNpb249MTIsTS5BUEk9MixnLl9maXJzdFBUPW51bGwsZy5fYWRkVHdlZW49ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZhciBnLGg7bnVsbCE9ZCYmKGc9XCJudW1iZXJcIj09dHlwZW9mIGR8fFwiPVwiIT09ZC5jaGFyQXQoMSk/TnVtYmVyKGQpLWM6cGFyc2VJbnQoZC5jaGFyQXQoMCkrXCIxXCIsMTApKk51bWJlcihkLnN1YnN0cigyKSkpJiYodGhpcy5fZmlyc3RQVD1oPXtfbmV4dDp0aGlzLl9maXJzdFBULHQ6YSxwOmIsczpjLGM6ZyxmOlwiZnVuY3Rpb25cIj09dHlwZW9mIGFbYl0sbjplfHxiLHI6Zn0saC5fbmV4dCYmKGguX25leHQuX3ByZXY9aCkpfSxnLnNldFJhdGlvPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYyxiPXRoaXMuX2ZpcnN0UFQ7YjspYz1iLmMqYStiLnMsYi5yJiYoYz1jKyhjPjA/LjU6LS41KT4+MCksYi5mP2IudFtiLnBdKGMpOmIudFtiLnBdPWMsYj1iLl9uZXh0fSxnLl9raWxsPWZ1bmN0aW9uKGEpe2lmKG51bGwhPWFbdGhpcy5fcHJvcE5hbWVdKXRoaXMuX292ZXJ3cml0ZVByb3BzPVtdO2Vsc2UgZm9yKHZhciBiPXRoaXMuX292ZXJ3cml0ZVByb3BzLmxlbmd0aDstLWI+LTE7KW51bGwhPWFbdGhpcy5fb3ZlcndyaXRlUHJvcHNbYl1dJiZ0aGlzLl9vdmVyd3JpdGVQcm9wcy5zcGxpY2UoYiwxKTtmb3IodmFyIGM9dGhpcy5fZmlyc3RQVDtjOyludWxsIT1hW2Mubl0mJihjLl9uZXh0JiYoYy5fbmV4dC5fcHJldj1jLl9wcmV2KSxjLl9wcmV2PyhjLl9wcmV2Ll9uZXh0PWMuX25leHQsYy5fcHJldj1udWxsKTp0aGlzLl9maXJzdFBUPT09YyYmKHRoaXMuX2ZpcnN0UFQ9Yy5fbmV4dCkpLGM9Yy5fbmV4dDtyZXR1cm4hMX0sZy5fcm91bmRQcm9wcz1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLl9maXJzdFBUO2M7KShhW3RoaXMuX3Byb3BOYW1lXXx8bnVsbCE9Yy5uJiZhW2Mubi5zcGxpdCh0aGlzLl9wcm9wTmFtZStcIl9cIikuam9pbihcIlwiKV0pJiYoYy5yPWIpLGM9Yy5fbmV4dH0seS5fb25QbHVnaW5FdmVudD1mdW5jdGlvbihhLGIpe3ZhciBkLGM9Yi5fZmlyc3RQVDtpZihcIl9vbkluaXRBbGxQcm9wc1wiPT09YSl7Zm9yKHZhciBlLGYsZyxoO2M7KXtmb3IoaD1jLl9uZXh0LGU9ZjtlJiZlLnByPmMucHI7KWU9ZS5fbmV4dDsoYy5fcHJldj1lP2UuX3ByZXY6Zyk/Yy5fcHJldi5fbmV4dD1jOmY9YywoYy5fbmV4dD1lKT9lLl9wcmV2PWM6Zz1jLGM9aH1jPWIuX2ZpcnN0UFQ9Zn1mb3IoO2M7KWMucGcmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGMudFthXSYmYy50W2FdKCkmJihkPSEwKSxjPWMuX25leHQ7cmV0dXJuIGR9LE0uYWN0aXZhdGU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoOy0tYj4tMTspYVtiXS5BUEk9PT1NLkFQSSYmKHkuX3BsdWdpbnNbKG5ldyBhW2JdKS5fcHJvcE5hbWVdPWFbYl0pO3JldHVybiEwfSxlPWEuX2dzUXVldWUpe2ZvcihmPTA7ZS5sZW5ndGg+ZjtmKyspZVtmXSgpO2ZvcihnIGluIGkpaVtnXS5mdW5jfHxhLmNvbnNvbGUubG9nKFwiR1NBUCBlbmNvdW50ZXJlZCBtaXNzaW5nIGRlcGVuZGVuY3k6IGNvbS5ncmVlbnNvY2suXCIrZyl9aD0hMX0od2luZG93KTsiLCIvKiFcbiAqIFZFUlNJT046IGJldGEgMS44LjBcbiAqIERBVEU6IDIwMTMtMDEtMjFcbiAqIEphdmFTY3JpcHQgKEFjdGlvblNjcmlwdCAzIGFuZCAyIGFsc28gYXZhaWxhYmxlKVxuICogVVBEQVRFUyBBTkQgRE9DUyBBVDogaHR0cDovL3d3dy5ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTMsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBpbiBodHRwOi8vd3d3LmdyZWVuc29jay5jb20vdGVybXNfb2ZfdXNlLmh0bWwgb3IgZm9yIFxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXG4gKiBcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICoqL1xuKHdpbmRvdy5fZ3NRdWV1ZXx8KHdpbmRvdy5fZ3NRdWV1ZT1bXSkpLnB1c2goZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtfZ3NEZWZpbmUoXCJlYXNpbmcuQmFja1wiLFtcImVhc2luZy5FYXNlXCJdLGZ1bmN0aW9uKGEpe3ZhciBuLG8sYj13aW5kb3cuR3JlZW5Tb2NrR2xvYmFsc3x8d2luZG93LGM9Yi5jb20uZ3JlZW5zb2NrLGQ9MipNYXRoLlBJLGU9TWF0aC5QSS8yLGY9Yy5fY2xhc3MsZz1mdW5jdGlvbihiLGMpe3ZhciBkPWYoXCJlYXNpbmcuXCIrYixmdW5jdGlvbigpe30sITApLGU9ZC5wcm90b3R5cGU9bmV3IGE7cmV0dXJuIGUuY29uc3RydWN0b3I9ZCxlLmdldFJhdGlvPWMsZH0saD1hLnJlZ2lzdGVyfHxmdW5jdGlvbigpe30saT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZz1mKFwiZWFzaW5nLlwiK2Ese2Vhc2VPdXQ6bmV3IGIsZWFzZUluOm5ldyBjLGVhc2VJbk91dDpuZXcgZH0sITApO3JldHVybiBoKGcsYSksZ30saj1mdW5jdGlvbihiLGMpe3ZhciBkPWYoXCJlYXNpbmcuXCIrYixmdW5jdGlvbihhKXt0aGlzLl9wMT1hfHwwPT09YT9hOjEuNzAxNTgsdGhpcy5fcDI9MS41MjUqdGhpcy5fcDF9LCEwKSxlPWQucHJvdG90eXBlPW5ldyBhO3JldHVybiBlLmNvbnN0cnVjdG9yPWQsZS5nZXRSYXRpbz1jLGUuY29uZmlnPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgZChhKX0sZH0saz1pKFwiQmFja1wiLGooXCJCYWNrT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuKGEtPTEpKmEqKCh0aGlzLl9wMSsxKSphK3RoaXMuX3AxKSsxfSksaihcIkJhY2tJblwiLGZ1bmN0aW9uKGEpe3JldHVybiBhKmEqKCh0aGlzLl9wMSsxKSphLXRoaXMuX3AxKX0pLGooXCJCYWNrSW5PdXRcIixmdW5jdGlvbihhKXtyZXR1cm4gMT4oYSo9Mik/LjUqYSphKigodGhpcy5fcDIrMSkqYS10aGlzLl9wMik6LjUqKChhLT0yKSphKigodGhpcy5fcDIrMSkqYSt0aGlzLl9wMikrMil9KSksbD1mKFwiZWFzaW5nLlNsb3dNb1wiLGZ1bmN0aW9uKGEsYixjKXtiPWJ8fDA9PT1iP2I6LjcsbnVsbD09YT9hPS43OmE+MSYmKGE9MSksdGhpcy5fcD0xIT09YT9iOjAsdGhpcy5fcDE9KDEtYSkvMix0aGlzLl9wMj1hLHRoaXMuX3AzPXRoaXMuX3AxK3RoaXMuX3AyLHRoaXMuX2NhbGNFbmQ9Yz09PSEwfSwhMCksbT1sLnByb3RvdHlwZT1uZXcgYTtyZXR1cm4gbS5jb25zdHJ1Y3Rvcj1sLG0uZ2V0UmF0aW89ZnVuY3Rpb24oYSl7dmFyIGI9YSsoLjUtYSkqdGhpcy5fcDtyZXR1cm4gdGhpcy5fcDE+YT90aGlzLl9jYWxjRW5kPzEtKGE9MS1hL3RoaXMuX3AxKSphOmItKGE9MS1hL3RoaXMuX3AxKSphKmEqYSpiOmE+dGhpcy5fcDM/dGhpcy5fY2FsY0VuZD8xLShhPShhLXRoaXMuX3AzKS90aGlzLl9wMSkqYTpiKyhhLWIpKihhPShhLXRoaXMuX3AzKS90aGlzLl9wMSkqYSphKmE6dGhpcy5fY2FsY0VuZD8xOmJ9LGwuZWFzZT1uZXcgbCguNywuNyksbS5jb25maWc9bC5jb25maWc9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuZXcgbChhLGIsYyl9LG49ZihcImVhc2luZy5TdGVwcGVkRWFzZVwiLGZ1bmN0aW9uKGEpe2E9YXx8MSx0aGlzLl9wMT0xL2EsdGhpcy5fcDI9YSsxfSwhMCksbT1uLnByb3RvdHlwZT1uZXcgYSxtLmNvbnN0cnVjdG9yPW4sbS5nZXRSYXRpbz1mdW5jdGlvbihhKXtyZXR1cm4gMD5hP2E9MDphPj0xJiYoYT0uOTk5OTk5OTk5KSwodGhpcy5fcDIqYT4+MCkqdGhpcy5fcDF9LG0uY29uZmlnPW4uY29uZmlnPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgbihhKX0saShcIkJvdW5jZVwiLGcoXCJCb3VuY2VPdXRcIixmdW5jdGlvbihhKXtyZXR1cm4gMS8yLjc1PmE/Ny41NjI1KmEqYToyLzIuNzU+YT83LjU2MjUqKGEtPTEuNS8yLjc1KSphKy43NToyLjUvMi43NT5hPzcuNTYyNSooYS09Mi4yNS8yLjc1KSphKy45Mzc1OjcuNTYyNSooYS09Mi42MjUvMi43NSkqYSsuOTg0Mzc1fSksZyhcIkJvdW5jZUluXCIsZnVuY3Rpb24oYSl7cmV0dXJuIDEvMi43NT4oYT0xLWEpPzEtNy41NjI1KmEqYToyLzIuNzU+YT8xLSg3LjU2MjUqKGEtPTEuNS8yLjc1KSphKy43NSk6Mi41LzIuNzU+YT8xLSg3LjU2MjUqKGEtPTIuMjUvMi43NSkqYSsuOTM3NSk6MS0oNy41NjI1KihhLT0yLjYyNS8yLjc1KSphKy45ODQzNzUpfSksZyhcIkJvdW5jZUluT3V0XCIsZnVuY3Rpb24oYSl7dmFyIGI9LjU+YTtyZXR1cm4gYT1iPzEtMiphOjIqYS0xLGE9MS8yLjc1PmE/Ny41NjI1KmEqYToyLzIuNzU+YT83LjU2MjUqKGEtPTEuNS8yLjc1KSphKy43NToyLjUvMi43NT5hPzcuNTYyNSooYS09Mi4yNS8yLjc1KSphKy45Mzc1OjcuNTYyNSooYS09Mi42MjUvMi43NSkqYSsuOTg0Mzc1LGI/LjUqKDEtYSk6LjUqYSsuNX0pKSxpKFwiQ2lyY1wiLGcoXCJDaXJjT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc3FydCgxLShhLT0xKSphKX0pLGcoXCJDaXJjSW5cIixmdW5jdGlvbihhKXtyZXR1cm4tKE1hdGguc3FydCgxLWEqYSktMSl9KSxnKFwiQ2lyY0luT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIDE+KGEqPTIpPy0uNSooTWF0aC5zcXJ0KDEtYSphKS0xKTouNSooTWF0aC5zcXJ0KDEtKGEtPTIpKmEpKzEpfSkpLG89ZnVuY3Rpb24oYixjLGUpe3ZhciBnPWYoXCJlYXNpbmcuXCIrYixmdW5jdGlvbihhLGIpe3RoaXMuX3AxPWF8fDEsdGhpcy5fcDI9Ynx8ZSx0aGlzLl9wMz10aGlzLl9wMi9kKihNYXRoLmFzaW4oMS90aGlzLl9wMSl8fDApfSwhMCksaD1nLnByb3RvdHlwZT1uZXcgYTtyZXR1cm4gaC5jb25zdHJ1Y3Rvcj1nLGguZ2V0UmF0aW89YyxoLmNvbmZpZz1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgZyhhLGIpfSxnfSxpKFwiRWxhc3RpY1wiLG8oXCJFbGFzdGljT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX3AxKk1hdGgucG93KDIsLTEwKmEpKk1hdGguc2luKChhLXRoaXMuX3AzKSpkL3RoaXMuX3AyKSsxfSwuMyksbyhcIkVsYXN0aWNJblwiLGZ1bmN0aW9uKGEpe3JldHVybi0odGhpcy5fcDEqTWF0aC5wb3coMiwxMCooYS09MSkpKk1hdGguc2luKChhLXRoaXMuX3AzKSpkL3RoaXMuX3AyKSl9LC4zKSxvKFwiRWxhc3RpY0luT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIDE+KGEqPTIpPy0uNSp0aGlzLl9wMSpNYXRoLnBvdygyLDEwKihhLT0xKSkqTWF0aC5zaW4oKGEtdGhpcy5fcDMpKmQvdGhpcy5fcDIpOi41KnRoaXMuX3AxKk1hdGgucG93KDIsLTEwKihhLT0xKSkqTWF0aC5zaW4oKGEtdGhpcy5fcDMpKmQvdGhpcy5fcDIpKzF9LC40NSkpLGkoXCJFeHBvXCIsZyhcIkV4cG9PdXRcIixmdW5jdGlvbihhKXtyZXR1cm4gMS1NYXRoLnBvdygyLC0xMCphKX0pLGcoXCJFeHBvSW5cIixmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5wb3coMiwxMCooYS0xKSktLjAwMX0pLGcoXCJFeHBvSW5PdXRcIixmdW5jdGlvbihhKXtyZXR1cm4gMT4oYSo9Mik/LjUqTWF0aC5wb3coMiwxMCooYS0xKSk6LjUqKDItTWF0aC5wb3coMiwtMTAqKGEtMSkpKX0pKSxpKFwiU2luZVwiLGcoXCJTaW5lT3V0XCIsZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc2luKGEqZSl9KSxnKFwiU2luZUluXCIsZnVuY3Rpb24oYSl7cmV0dXJuLU1hdGguY29zKGEqZSkrMX0pLGcoXCJTaW5lSW5PdXRcIixmdW5jdGlvbihhKXtyZXR1cm4tLjUqKE1hdGguY29zKE1hdGguUEkqYSktMSl9KSksZihcImVhc2luZy5FYXNlTG9va3VwXCIse2ZpbmQ6ZnVuY3Rpb24oYil7cmV0dXJuIGEubWFwW2JdfX0sITApLGgoYi5TbG93TW8sXCJTbG93TW9cIixcImVhc2UsXCIpLGgobixcIlN0ZXBwZWRFYXNlXCIsXCJlYXNlLFwiKSxrfSwhMCl9KSx3aW5kb3cuX2dzRGVmaW5lJiZfZ3NRdWV1ZS5wb3AoKSgpOyIsIi8qIVxuKiBAbGljZW5zZSBQcmVsb2FkSlNcbiogVmlzaXQgaHR0cDovL2NyZWF0ZWpzLmNvbS8gZm9yIGRvY3VtZW50YXRpb24sIHVwZGF0ZXMgYW5kIGV4YW1wbGVzLlxuKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMyBnc2tpbm5lci5jb20sIGluYy5cbipcbiogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZS5cbiogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5odG1sXG4qXG4qIFRoaXMgbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuKi9cbnRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1jcmVhdGVqcy5QcmVsb2FkSlM9Y3JlYXRlanMuUHJlbG9hZEpTfHx7fTthLnZlcnNpb249XCIwLjQuMFwiLGEuYnVpbGREYXRlPVwiV2VkLCAyNSBTZXAgMjAxMyAxNzowOTozNSBHTVRcIn0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuaW5pdGlhbGl6ZShhLGIsYyl9LGI9YS5wcm90b3R5cGU7Yi50eXBlPW51bGwsYi50YXJnZXQ9bnVsbCxiLmN1cnJlbnRUYXJnZXQ9bnVsbCxiLmV2ZW50UGhhc2U9MCxiLmJ1YmJsZXM9ITEsYi5jYW5jZWxhYmxlPSExLGIudGltZVN0YW1wPTAsYi5kZWZhdWx0UHJldmVudGVkPSExLGIucHJvcGFnYXRpb25TdG9wcGVkPSExLGIuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPSExLGIucmVtb3ZlZD0hMSxiLmluaXRpYWxpemU9ZnVuY3Rpb24oYSxiLGMpe3RoaXMudHlwZT1hLHRoaXMuYnViYmxlcz1iLHRoaXMuY2FuY2VsYWJsZT1jLHRoaXMudGltZVN0YW1wPShuZXcgRGF0ZSkuZ2V0VGltZSgpfSxiLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwfSxiLnN0b3BQcm9wYWdhdGlvbj1mdW5jdGlvbigpe3RoaXMucHJvcGFnYXRpb25TdG9wcGVkPSEwfSxiLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbj1mdW5jdGlvbigpe3RoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMucHJvcGFnYXRpb25TdG9wcGVkPSEwfSxiLnJlbW92ZT1mdW5jdGlvbigpe3RoaXMucmVtb3ZlZD0hMH0sYi5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgYSh0aGlzLnR5cGUsdGhpcy5idWJibGVzLHRoaXMuY2FuY2VsYWJsZSl9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltFdmVudCAodHlwZT1cIit0aGlzLnR5cGUrXCIpXVwifSxjcmVhdGVqcy5FdmVudD1hfSgpLHRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1mdW5jdGlvbigpe30sYj1hLnByb3RvdHlwZTthLmluaXRpYWxpemU9ZnVuY3Rpb24oYSl7YS5hZGRFdmVudExpc3RlbmVyPWIuYWRkRXZlbnRMaXN0ZW5lcixhLm9uPWIub24sYS5yZW1vdmVFdmVudExpc3RlbmVyPWEub2ZmPWIucmVtb3ZlRXZlbnRMaXN0ZW5lcixhLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzPWIucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMsYS5oYXNFdmVudExpc3RlbmVyPWIuaGFzRXZlbnRMaXN0ZW5lcixhLmRpc3BhdGNoRXZlbnQ9Yi5kaXNwYXRjaEV2ZW50LGEuX2Rpc3BhdGNoRXZlbnQ9Yi5fZGlzcGF0Y2hFdmVudH0sYi5fbGlzdGVuZXJzPW51bGwsYi5fY2FwdHVyZUxpc3RlbmVycz1udWxsLGIuaW5pdGlhbGl6ZT1mdW5jdGlvbigpe30sYi5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZDtkPWM/dGhpcy5fY2FwdHVyZUxpc3RlbmVycz10aGlzLl9jYXB0dXJlTGlzdGVuZXJzfHx7fTp0aGlzLl9saXN0ZW5lcnM9dGhpcy5fbGlzdGVuZXJzfHx7fTt2YXIgZT1kW2FdO3JldHVybiBlJiZ0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoYSxiLGMpLGU9ZFthXSxlP2UucHVzaChiKTpkW2FdPVtiXSxifSxiLm9uPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtyZXR1cm4gYi5oYW5kbGVFdmVudCYmKGM9Y3x8YixiPWIuaGFuZGxlRXZlbnQpLGM9Y3x8dGhpcyx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoYSxmdW5jdGlvbihhKXtiLmNhbGwoYyxhLGUpLGQmJmEucmVtb3ZlKCl9LGYpfSxiLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWM/dGhpcy5fY2FwdHVyZUxpc3RlbmVyczp0aGlzLl9saXN0ZW5lcnM7aWYoZCl7dmFyIGU9ZFthXTtpZihlKWZvcih2YXIgZj0wLGc9ZS5sZW5ndGg7Zz5mO2YrKylpZihlW2ZdPT1iKXsxPT1nP2RlbGV0ZSBkW2FdOmUuc3BsaWNlKGYsMSk7YnJlYWt9fX0sYi5vZmY9Yi5yZW1vdmVFdmVudExpc3RlbmVyLGIucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oYSl7YT8odGhpcy5fbGlzdGVuZXJzJiZkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2FdLHRoaXMuX2NhcHR1cmVMaXN0ZW5lcnMmJmRlbGV0ZSB0aGlzLl9jYXB0dXJlTGlzdGVuZXJzW2FdKTp0aGlzLl9saXN0ZW5lcnM9dGhpcy5fY2FwdHVyZUxpc3RlbmVycz1udWxsfSxiLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oYSxiKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYSl7dmFyIGM9dGhpcy5fbGlzdGVuZXJzO2lmKCFjfHwhY1thXSlyZXR1cm4hMTthPW5ldyBjcmVhdGVqcy5FdmVudChhKX1pZihhLnRhcmdldD1ifHx0aGlzLGEuYnViYmxlcyYmdGhpcy5wYXJlbnQpe2Zvcih2YXIgZD10aGlzLGU9W2RdO2QucGFyZW50OyllLnB1c2goZD1kLnBhcmVudCk7dmFyIGYsZz1lLmxlbmd0aDtmb3IoZj1nLTE7Zj49MCYmIWEucHJvcGFnYXRpb25TdG9wcGVkO2YtLSllW2ZdLl9kaXNwYXRjaEV2ZW50KGEsMSsoMD09ZikpO2ZvcihmPTE7Zz5mJiYhYS5wcm9wYWdhdGlvblN0b3BwZWQ7ZisrKWVbZl0uX2Rpc3BhdGNoRXZlbnQoYSwzKX1lbHNlIHRoaXMuX2Rpc3BhdGNoRXZlbnQoYSwyKTtyZXR1cm4gYS5kZWZhdWx0UHJldmVudGVkfSxiLmhhc0V2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fbGlzdGVuZXJzLGM9dGhpcy5fY2FwdHVyZUxpc3RlbmVycztyZXR1cm4hIShiJiZiW2FdfHxjJiZjW2FdKX0sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW0V2ZW50RGlzcGF0Y2hlcl1cIn0sYi5fZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9MT09Yj90aGlzLl9jYXB0dXJlTGlzdGVuZXJzOnRoaXMuX2xpc3RlbmVycztpZihhJiZkKXt2YXIgZT1kW2EudHlwZV07aWYoIWV8fCEoYz1lLmxlbmd0aCkpcmV0dXJuO2EuY3VycmVudFRhcmdldD10aGlzLGEuZXZlbnRQaGFzZT1iLGEucmVtb3ZlZD0hMSxlPWUuc2xpY2UoKTtmb3IodmFyIGY9MDtjPmYmJiFhLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDtmKyspe3ZhciBnPWVbZl07Zy5oYW5kbGVFdmVudD9nLmhhbmRsZUV2ZW50KGEpOmcoYSksYS5yZW1vdmVkJiYodGhpcy5vZmYoYS50eXBlLGcsMT09YiksYS5yZW1vdmVkPSExKX19fSxjcmVhdGVqcy5FdmVudERpc3BhdGNoZXI9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7Y3JlYXRlanMuaW5kZXhPZj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGg7ZD5jO2MrKylpZihiPT09YVtjXSlyZXR1cm4gYztyZXR1cm4tMX19KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2NyZWF0ZWpzLnByb3h5PWZ1bmN0aW9uKGEsYil7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhLmFwcGx5KGIsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApLmNvbmNhdChjKSl9fX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oKXt0aGlzLmluaXQoKX07YS5wcm90b3R5cGU9e307dmFyIGI9YS5wcm90b3R5cGUsYz1hO2MuRklMRV9QQVRURVJOPS9eKD86KFxcdys6KVxcL3syfShcXHcrKD86XFwuXFx3KykqXFwvPykpPyhbLy5dKj8oPzpbXj9dKyk/XFwvKT8oKD86W14vP10rKVxcLihcXHcrKSkoPzpcXD8oXFxTKyk/KT8kLyxiLmxvYWRlZD0hMSxiLmNhbmNlbGVkPSExLGIucHJvZ3Jlc3M9MCxiLl9pdGVtPW51bGwsYi5fYmFzZVBhdGg9bnVsbCxiLmFkZEV2ZW50TGlzdGVuZXI9bnVsbCxiLnJlbW92ZUV2ZW50TGlzdGVuZXI9bnVsbCxiLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzPW51bGwsYi5kaXNwYXRjaEV2ZW50PW51bGwsYi5oYXNFdmVudExpc3RlbmVyPW51bGwsYi5fbGlzdGVuZXJzPW51bGwsY3JlYXRlanMuRXZlbnREaXNwYXRjaGVyLmluaXRpYWxpemUoYiksYi5nZXRJdGVtPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2l0ZW19LGIuaW5pdD1mdW5jdGlvbigpe30sYi5sb2FkPWZ1bmN0aW9uKCl7fSxiLmNsb3NlPWZ1bmN0aW9uKCl7fSxiLl9zZW5kTG9hZFN0YXJ0PWZ1bmN0aW9uKCl7dGhpcy5faXNDYW5jZWxlZCgpfHx0aGlzLmRpc3BhdGNoRXZlbnQoXCJsb2Fkc3RhcnRcIil9LGIuX3NlbmRQcm9ncmVzcz1mdW5jdGlvbihhKXtpZighdGhpcy5faXNDYW5jZWxlZCgpKXt2YXIgYj1udWxsO1wibnVtYmVyXCI9PXR5cGVvZiBhPyh0aGlzLnByb2dyZXNzPWEsYj1uZXcgY3JlYXRlanMuRXZlbnQoXCJwcm9ncmVzc1wiKSxiLmxvYWRlZD10aGlzLnByb2dyZXNzLGIudG90YWw9MSk6KGI9YSx0aGlzLnByb2dyZXNzPWEubG9hZGVkL2EudG90YWwsKGlzTmFOKHRoaXMucHJvZ3Jlc3MpfHwxLzA9PXRoaXMucHJvZ3Jlc3MpJiYodGhpcy5wcm9ncmVzcz0wKSksYi5wcm9ncmVzcz10aGlzLnByb2dyZXNzLHRoaXMuaGFzRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIpJiZ0aGlzLmRpc3BhdGNoRXZlbnQoYil9fSxiLl9zZW5kQ29tcGxldGU9ZnVuY3Rpb24oKXt0aGlzLl9pc0NhbmNlbGVkKCl8fHRoaXMuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpfSxiLl9zZW5kRXJyb3I9ZnVuY3Rpb24oYSl7IXRoaXMuX2lzQ2FuY2VsZWQoKSYmdGhpcy5oYXNFdmVudExpc3RlbmVyKFwiZXJyb3JcIikmJihudWxsPT1hJiYoYT1uZXcgY3JlYXRlanMuRXZlbnQoXCJlcnJvclwiKSksdGhpcy5kaXNwYXRjaEV2ZW50KGEpKX0sYi5faXNDYW5jZWxlZD1mdW5jdGlvbigpe3JldHVybiBudWxsPT13aW5kb3cuY3JlYXRlanN8fHRoaXMuY2FuY2VsZWQ/ITA6ITF9LGIuX3BhcnNlVVJJPWZ1bmN0aW9uKGEpe3JldHVybiBhP2EubWF0Y2goYy5GSUxFX1BBVFRFUk4pOm51bGx9LGIuX2Zvcm1hdFF1ZXJ5U3RyaW5nPWZ1bmN0aW9uKGEsYil7aWYobnVsbD09YSl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBzcGVjaWZ5IGRhdGEuXCIpO3ZhciBjPVtdO2Zvcih2YXIgZCBpbiBhKWMucHVzaChkK1wiPVwiK2VzY2FwZShhW2RdKSk7cmV0dXJuIGImJihjPWMuY29uY2F0KGIpKSxjLmpvaW4oXCImXCIpfSxiLmJ1aWxkUGF0aD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9Yil7dmFyIGQ9dGhpcy5fcGFyc2VVUkkoYSk7KG51bGw9PWR8fG51bGw9PWRbMV18fFwiXCI9PWRbMV0pJiYoYT1iK2EpfWlmKG51bGw9PWMpcmV0dXJuIGE7dmFyIGU9W10sZj1hLmluZGV4T2YoXCI/XCIpO2lmKC0xIT1mKXt2YXIgZz1hLnNsaWNlKGYrMSk7ZT1lLmNvbmNhdChnLnNwbGl0KFwiJlwiKSl9cmV0dXJuLTEhPWY/YS5zbGljZSgwLGYpK1wiP1wiK3RoaXMuX2Zvcm1hdFF1ZXJ5U3RyaW5nKGMsZSk6YStcIj9cIit0aGlzLl9mb3JtYXRRdWVyeVN0cmluZyhjLGUpfSxiLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbUHJlbG9hZEpTIEFic3RyYWN0TG9hZGVyXVwifSxjcmVhdGVqcy5BYnN0cmFjdExvYWRlcj1hfSgpLHRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1mdW5jdGlvbihhLGIpe3RoaXMuaW5pdChhLGIpfSxiPWEucHJvdG90eXBlPW5ldyBjcmVhdGVqcy5BYnN0cmFjdExvYWRlcixjPWE7Yy5MT0FEX1RJTUVPVVQ9OGUzLGMuQklOQVJZPVwiYmluYXJ5XCIsYy5DU1M9XCJjc3NcIixjLklNQUdFPVwiaW1hZ2VcIixjLkpBVkFTQ1JJUFQ9XCJqYXZhc2NyaXB0XCIsYy5KU09OPVwianNvblwiLGMuSlNPTlA9XCJqc29ucFwiLGMuU09VTkQ9XCJzb3VuZFwiLGMuU1ZHPVwic3ZnXCIsYy5URVhUPVwidGV4dFwiLGMuWE1MPVwieG1sXCIsYy5QT1NUPVwiUE9TVFwiLGMuR0VUPVwiR0VUXCIsYi51c2VYSFI9ITAsYi5zdG9wT25FcnJvcj0hMSxiLm1haW50YWluU2NyaXB0T3JkZXI9ITAsYi5uZXh0PW51bGwsYi5fdHlwZUNhbGxiYWNrcz1udWxsLGIuX2V4dGVuc2lvbkNhbGxiYWNrcz1udWxsLGIuX2xvYWRTdGFydFdhc0Rpc3BhdGNoZWQ9ITEsYi5fbWF4Q29ubmVjdGlvbnM9MSxiLl9jdXJyZW50bHlMb2FkaW5nU2NyaXB0PW51bGwsYi5fY3VycmVudExvYWRzPW51bGwsYi5fbG9hZFF1ZXVlPW51bGwsYi5fbG9hZFF1ZXVlQmFja3VwPW51bGwsYi5fbG9hZEl0ZW1zQnlJZD1udWxsLGIuX2xvYWRJdGVtc0J5U3JjPW51bGwsYi5fbG9hZGVkUmVzdWx0cz1udWxsLGIuX2xvYWRlZFJhd1Jlc3VsdHM9bnVsbCxiLl9udW1JdGVtcz0wLGIuX251bUl0ZW1zTG9hZGVkPTAsYi5fc2NyaXB0T3JkZXI9bnVsbCxiLl9sb2FkZWRTY3JpcHRzPW51bGwsYi5pbml0PWZ1bmN0aW9uKGEsYil7dGhpcy5fbnVtSXRlbXM9dGhpcy5fbnVtSXRlbXNMb2FkZWQ9MCx0aGlzLl9wYXVzZWQ9ITEsdGhpcy5fbG9hZFN0YXJ0V2FzRGlzcGF0Y2hlZD0hMSx0aGlzLl9jdXJyZW50TG9hZHM9W10sdGhpcy5fbG9hZFF1ZXVlPVtdLHRoaXMuX2xvYWRRdWV1ZUJhY2t1cD1bXSx0aGlzLl9zY3JpcHRPcmRlcj1bXSx0aGlzLl9sb2FkZWRTY3JpcHRzPVtdLHRoaXMuX2xvYWRJdGVtc0J5SWQ9e30sdGhpcy5fbG9hZEl0ZW1zQnlTcmM9e30sdGhpcy5fbG9hZGVkUmVzdWx0cz17fSx0aGlzLl9sb2FkZWRSYXdSZXN1bHRzPXt9LHRoaXMuX3R5cGVDYWxsYmFja3M9e30sdGhpcy5fZXh0ZW5zaW9uQ2FsbGJhY2tzPXt9LHRoaXMuX2Jhc2VQYXRoPWIsdGhpcy5zZXRVc2VYSFIoYSl9LGIuc2V0VXNlWEhSPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnVzZVhIUj0wIT1hJiZudWxsIT13aW5kb3cuWE1MSHR0cFJlcXVlc3QsdGhpcy51c2VYSFJ9LGIucmVtb3ZlQWxsPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmUoKX0sYi5yZW1vdmU9ZnVuY3Rpb24oYSl7dmFyIGI9bnVsbDtpZighYXx8YSBpbnN0YW5jZW9mIEFycmF5KXtpZihhKWI9YTtlbHNlIGlmKGFyZ3VtZW50cy5sZW5ndGg+MClyZXR1cm59ZWxzZSBiPVthXTt2YXIgYz0hMTtpZihiKXtmb3IoO2IubGVuZ3RoOyl7dmFyIGQ9Yi5wb3AoKSxlPXRoaXMuZ2V0UmVzdWx0KGQpO2ZvcihmPXRoaXMuX2xvYWRRdWV1ZS5sZW5ndGgtMTtmPj0wO2YtLSlpZihnPXRoaXMuX2xvYWRRdWV1ZVtmXS5nZXRJdGVtKCksZy5pZD09ZHx8Zy5zcmM9PWQpe3RoaXMuX2xvYWRRdWV1ZS5zcGxpY2UoZiwxKVswXS5jYW5jZWwoKTticmVha31mb3IoZj10aGlzLl9sb2FkUXVldWVCYWNrdXAubGVuZ3RoLTE7Zj49MDtmLS0paWYoZz10aGlzLl9sb2FkUXVldWVCYWNrdXBbZl0uZ2V0SXRlbSgpLGcuaWQ9PWR8fGcuc3JjPT1kKXt0aGlzLl9sb2FkUXVldWVCYWNrdXAuc3BsaWNlKGYsMSlbMF0uY2FuY2VsKCk7YnJlYWt9aWYoZSlkZWxldGUgdGhpcy5fbG9hZEl0ZW1zQnlJZFtlLmlkXSxkZWxldGUgdGhpcy5fbG9hZEl0ZW1zQnlTcmNbZS5zcmNdLHRoaXMuX2Rpc3Bvc2VJdGVtKGUpO2Vsc2UgZm9yKHZhciBmPXRoaXMuX2N1cnJlbnRMb2Fkcy5sZW5ndGgtMTtmPj0wO2YtLSl7dmFyIGc9dGhpcy5fY3VycmVudExvYWRzW2ZdLmdldEl0ZW0oKTtpZihnLmlkPT1kfHxnLnNyYz09ZCl7dGhpcy5fY3VycmVudExvYWRzLnNwbGljZShmLDEpWzBdLmNhbmNlbCgpLGM9ITA7YnJlYWt9fX1jJiZ0aGlzLl9sb2FkTmV4dCgpfWVsc2V7dGhpcy5jbG9zZSgpO2Zvcih2YXIgaCBpbiB0aGlzLl9sb2FkSXRlbXNCeUlkKXRoaXMuX2Rpc3Bvc2VJdGVtKHRoaXMuX2xvYWRJdGVtc0J5SWRbaF0pO3RoaXMuaW5pdCh0aGlzLnVzZVhIUil9fSxiLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5jbG9zZSgpO2Zvcih2YXIgYSBpbiB0aGlzLl9sb2FkSXRlbXNCeUlkKXRoaXMuX2Rpc3Bvc2VJdGVtKHRoaXMuX2xvYWRJdGVtc0J5SWRbYV0pO3ZhciBiPVtdO2ZvcihpPTAsbD10aGlzLl9sb2FkUXVldWVCYWNrdXAubGVuZ3RoO2w+aTtpKyspYi5wdXNoKHRoaXMuX2xvYWRRdWV1ZUJhY2t1cFtpXS5nZXRJdGVtKCkpO3RoaXMubG9hZE1hbmlmZXN0KGIsITEpfSxjLmlzQmluYXJ5PWZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIGNyZWF0ZWpzLkxvYWRRdWV1ZS5JTUFHRTpjYXNlIGNyZWF0ZWpzLkxvYWRRdWV1ZS5CSU5BUlk6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LGIuaW5zdGFsbFBsdWdpbj1mdW5jdGlvbihhKXtpZihudWxsIT1hJiZudWxsIT1hLmdldFByZWxvYWRIYW5kbGVycyl7dmFyIGI9YS5nZXRQcmVsb2FkSGFuZGxlcnMoKTtpZihudWxsIT1iLnR5cGVzKWZvcih2YXIgYz0wLGQ9Yi50eXBlcy5sZW5ndGg7ZD5jO2MrKyl0aGlzLl90eXBlQ2FsbGJhY2tzW2IudHlwZXNbY11dPWIuY2FsbGJhY2s7aWYobnVsbCE9Yi5leHRlbnNpb25zKWZvcihjPTAsZD1iLmV4dGVuc2lvbnMubGVuZ3RoO2Q+YztjKyspdGhpcy5fZXh0ZW5zaW9uQ2FsbGJhY2tzW2IuZXh0ZW5zaW9uc1tjXV09Yi5jYWxsYmFja319LGIuc2V0TWF4Q29ubmVjdGlvbnM9ZnVuY3Rpb24oYSl7dGhpcy5fbWF4Q29ubmVjdGlvbnM9YSwhdGhpcy5fcGF1c2VkJiZ0aGlzLl9sb2FkUXVldWUubGVuZ3RoPjAmJnRoaXMuX2xvYWROZXh0KCl9LGIubG9hZEZpbGU9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpe3ZhciBkPW5ldyBjcmVhdGVqcy5FdmVudChcImVycm9yXCIpO3JldHVybiBkLnRleHQ9XCJQUkVMT0FEX05PX0ZJTEVcIix0aGlzLl9zZW5kRXJyb3IoZCksdm9pZCAwfXRoaXMuX2FkZEl0ZW0oYSxjKSxiIT09ITE/dGhpcy5zZXRQYXVzZWQoITEpOnRoaXMuc2V0UGF1c2VkKCEwKX0sYi5sb2FkTWFuaWZlc3Q9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW51bGw7aWYoYSBpbnN0YW5jZW9mIEFycmF5KXtpZigwPT1hLmxlbmd0aCl7dmFyIGU9bmV3IGNyZWF0ZWpzLkV2ZW50KFwiZXJyb3JcIik7cmV0dXJuIGUudGV4dD1cIlBSRUxPQURfTUFOSUZFU1RfRU1QVFlcIix0aGlzLl9zZW5kRXJyb3IoZSksdm9pZCAwfWQ9YX1lbHNle2lmKG51bGw9PWEpe3ZhciBlPW5ldyBjcmVhdGVqcy5FdmVudChcImVycm9yXCIpO3JldHVybiBlLnRleHQ9XCJQUkVMT0FEX01BTklGRVNUX05VTExcIix0aGlzLl9zZW5kRXJyb3IoZSksdm9pZCAwfWQ9W2FdfWZvcih2YXIgZj0wLGc9ZC5sZW5ndGg7Zz5mO2YrKyl0aGlzLl9hZGRJdGVtKGRbZl0sYyk7YiE9PSExP3RoaXMuc2V0UGF1c2VkKCExKTp0aGlzLnNldFBhdXNlZCghMCl9LGIubG9hZD1mdW5jdGlvbigpe3RoaXMuc2V0UGF1c2VkKCExKX0sYi5nZXRJdGVtPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9sb2FkSXRlbXNCeUlkW2FdfHx0aGlzLl9sb2FkSXRlbXNCeVNyY1thXX0sYi5nZXRSZXN1bHQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9sb2FkSXRlbXNCeUlkW2FdfHx0aGlzLl9sb2FkSXRlbXNCeVNyY1thXTtpZihudWxsPT1jKXJldHVybiBudWxsO3ZhciBkPWMuaWQ7cmV0dXJuIGImJnRoaXMuX2xvYWRlZFJhd1Jlc3VsdHNbZF0/dGhpcy5fbG9hZGVkUmF3UmVzdWx0c1tkXTp0aGlzLl9sb2FkZWRSZXN1bHRzW2RdfSxiLnNldFBhdXNlZD1mdW5jdGlvbihhKXt0aGlzLl9wYXVzZWQ9YSx0aGlzLl9wYXVzZWR8fHRoaXMuX2xvYWROZXh0KCl9LGIuY2xvc2U9ZnVuY3Rpb24oKXtmb3IoO3RoaXMuX2N1cnJlbnRMb2Fkcy5sZW5ndGg7KXRoaXMuX2N1cnJlbnRMb2Fkcy5wb3AoKS5jYW5jZWwoKTt0aGlzLl9zY3JpcHRPcmRlci5sZW5ndGg9MCx0aGlzLl9sb2FkZWRTY3JpcHRzLmxlbmd0aD0wLHRoaXMubG9hZFN0YXJ0V2FzRGlzcGF0Y2hlZD0hMX0sYi5fYWRkSXRlbT1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2NyZWF0ZUxvYWRJdGVtKGEpO2lmKG51bGwhPWMpe3ZhciBkPXRoaXMuX2NyZWF0ZUxvYWRlcihjLGIpO251bGwhPWQmJih0aGlzLl9sb2FkUXVldWUucHVzaChkKSx0aGlzLl9sb2FkUXVldWVCYWNrdXAucHVzaChkKSx0aGlzLl9udW1JdGVtcysrLHRoaXMuX3VwZGF0ZVByb2dyZXNzKCksdGhpcy5tYWludGFpblNjcmlwdE9yZGVyJiZjLnR5cGU9PWNyZWF0ZWpzLkxvYWRRdWV1ZS5KQVZBU0NSSVBUJiZkIGluc3RhbmNlb2YgY3JlYXRlanMuWEhSTG9hZGVyJiYodGhpcy5fc2NyaXB0T3JkZXIucHVzaChjKSx0aGlzLl9sb2FkZWRTY3JpcHRzLnB1c2gobnVsbCkpKX19LGIuX2NyZWF0ZUxvYWRJdGVtPWZ1bmN0aW9uKGEpe3ZhciBiPW51bGw7c3dpdGNoKHR5cGVvZiBhKXtjYXNlXCJzdHJpbmdcIjpiPXtzcmM6YX07YnJlYWs7Y2FzZVwib2JqZWN0XCI6Yj13aW5kb3cuSFRNTEF1ZGlvRWxlbWVudCYmYSBpbnN0YW5jZW9mIEhUTUxBdWRpb0VsZW1lbnQ/e3RhZzphLHNyYzpiLnRhZy5zcmMsdHlwZTpjcmVhdGVqcy5Mb2FkUXVldWUuU09VTkR9OmE7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gbnVsbH12YXIgYz10aGlzLl9wYXJzZVVSSShiLnNyYyk7aWYobnVsbCE9YyYmKGIuZXh0PWNbNV0pLG51bGw9PWIudHlwZSYmKGIudHlwZT10aGlzLl9nZXRUeXBlQnlFeHRlbnNpb24oYi5leHQpKSxiLnR5cGU9PWNyZWF0ZWpzLkxvYWRRdWV1ZS5KU09OJiZudWxsIT1iLmNhbGxiYWNrJiYoYi50eXBlPWNyZWF0ZWpzLkxvYWRRdWV1ZS5KU09OUCksYi50eXBlPT1jcmVhdGVqcy5Mb2FkUXVldWUuSlNPTlAmJm51bGw9PWIuY2FsbGJhY2spdGhyb3cgbmV3IEVycm9yKFwiY2FsbGJhY2sgaXMgcmVxdWlyZWQgZm9yIGxvYWRpbmcgSlNPTlAgcmVxdWVzdHMuXCIpO251bGw9PWIudGFnJiYoYi50YWc9dGhpcy5fY3JlYXRlVGFnKGIudHlwZSkpLChudWxsPT1iLmlkfHxcIlwiPT1iLmlkKSYmKGIuaWQ9Yi5zcmMpO3ZhciBkPXRoaXMuX3R5cGVDYWxsYmFja3NbYi50eXBlXXx8dGhpcy5fZXh0ZW5zaW9uQ2FsbGJhY2tzW2IuZXh0XTtpZihkKXt2YXIgZT1kKGIuc3JjLGIudHlwZSxiLmlkLGIuZGF0YSk7aWYoZT09PSExKXJldHVybiBudWxsO2U9PT0hMHx8KG51bGwhPWUuc3JjJiYoYi5zcmM9ZS5zcmMpLG51bGwhPWUuaWQmJihiLmlkPWUuaWQpLG51bGwhPWUudGFnJiZlLnRhZy5sb2FkIGluc3RhbmNlb2YgRnVuY3Rpb24mJihiLnRhZz1lLnRhZyksbnVsbCE9ZS5jb21wbGV0ZUhhbmRsZXImJihiLmNvbXBsZXRlSGFuZGxlcj1lLmNvbXBsZXRlSGFuZGxlcikpLGUudHlwZSYmKGIudHlwZT1lLnR5cGUpLGM9dGhpcy5fcGFyc2VVUkkoYi5zcmMpLG51bGwhPWMmJm51bGwhPWNbNV0mJihiLmV4dD1jWzVdLnRvTG93ZXJDYXNlKCkpfXJldHVybiB0aGlzLl9sb2FkSXRlbXNCeUlkW2IuaWRdPWIsdGhpcy5fbG9hZEl0ZW1zQnlTcmNbYi5zcmNdPWIsYn0sYi5fY3JlYXRlTG9hZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy51c2VYSFI7c3dpdGNoKGEudHlwZSl7Y2FzZSBjcmVhdGVqcy5Mb2FkUXVldWUuSlNPTjpjYXNlIGNyZWF0ZWpzLkxvYWRRdWV1ZS5YTUw6Y2FzZSBjcmVhdGVqcy5Mb2FkUXVldWUuVEVYVDpjPSEwO2JyZWFrO2Nhc2UgY3JlYXRlanMuTG9hZFF1ZXVlLlNPVU5EOmNhc2UgY3JlYXRlanMuTG9hZFF1ZXVlLkpTT05QOmM9ITE7YnJlYWs7Y2FzZSBudWxsOnJldHVybiBudWxsfXJldHVybiBudWxsPT1iJiYoYj10aGlzLl9iYXNlUGF0aCksYz9uZXcgY3JlYXRlanMuWEhSTG9hZGVyKGEsYik6bmV3IGNyZWF0ZWpzLlRhZ0xvYWRlcihhLGIpfSxiLl9sb2FkTmV4dD1mdW5jdGlvbigpe2lmKCF0aGlzLl9wYXVzZWQpe3RoaXMuX2xvYWRTdGFydFdhc0Rpc3BhdGNoZWR8fCh0aGlzLl9zZW5kTG9hZFN0YXJ0KCksdGhpcy5fbG9hZFN0YXJ0V2FzRGlzcGF0Y2hlZD0hMCksdGhpcy5fbnVtSXRlbXM9PXRoaXMuX251bUl0ZW1zTG9hZGVkPyh0aGlzLmxvYWRlZD0hMCx0aGlzLl9zZW5kQ29tcGxldGUoKSx0aGlzLm5leHQmJnRoaXMubmV4dC5sb2FkJiZ0aGlzLm5leHQubG9hZCgpKTp0aGlzLmxvYWRlZD0hMTtmb3IodmFyIGE9MDthPHRoaXMuX2xvYWRRdWV1ZS5sZW5ndGgmJiEodGhpcy5fY3VycmVudExvYWRzLmxlbmd0aD49dGhpcy5fbWF4Q29ubmVjdGlvbnMpO2ErKyl7dmFyIGI9dGhpcy5fbG9hZFF1ZXVlW2FdO2lmKHRoaXMubWFpbnRhaW5TY3JpcHRPcmRlciYmYiBpbnN0YW5jZW9mIGNyZWF0ZWpzLlRhZ0xvYWRlciYmYi5nZXRJdGVtKCkudHlwZT09Y3JlYXRlanMuTG9hZFF1ZXVlLkpBVkFTQ1JJUFQpe2lmKHRoaXMuX2N1cnJlbnRseUxvYWRpbmdTY3JpcHQpY29udGludWU7dGhpcy5fY3VycmVudGx5TG9hZGluZ1NjcmlwdD0hMH10aGlzLl9sb2FkUXVldWUuc3BsaWNlKGEsMSksYS0tLHRoaXMuX2xvYWRJdGVtKGIpfX19LGIuX2xvYWRJdGVtPWZ1bmN0aW9uKGEpe2EuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlUHJvZ3Jlc3MsdGhpcykpLGEuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBsZXRlXCIsY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlRmlsZUNvbXBsZXRlLHRoaXMpKSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZUZpbGVFcnJvcix0aGlzKSksdGhpcy5fY3VycmVudExvYWRzLnB1c2goYSksdGhpcy5fc2VuZEZpbGVTdGFydChhLmdldEl0ZW0oKSksYS5sb2FkKCl9LGIuX2hhbmRsZUZpbGVFcnJvcj1mdW5jdGlvbihhKXt2YXIgYj1hLnRhcmdldDt0aGlzLl9udW1JdGVtc0xvYWRlZCsrLHRoaXMuX3VwZGF0ZVByb2dyZXNzKCk7dmFyIGE9bmV3IGNyZWF0ZWpzLkV2ZW50KFwiZXJyb3JcIik7YS50ZXh0PVwiRklMRV9MT0FEX0VSUk9SXCIsYS5pdGVtPWIuZ2V0SXRlbSgpLHRoaXMuX3NlbmRFcnJvcihhKSx0aGlzLnN0b3BPbkVycm9yfHwodGhpcy5fcmVtb3ZlTG9hZEl0ZW0oYiksdGhpcy5fbG9hZE5leHQoKSl9LGIuX2hhbmRsZUZpbGVDb21wbGV0ZT1mdW5jdGlvbihhKXt2YXIgYj1hLnRhcmdldCxjPWIuZ2V0SXRlbSgpO2lmKHRoaXMuX2xvYWRlZFJlc3VsdHNbYy5pZF09Yi5nZXRSZXN1bHQoKSxiIGluc3RhbmNlb2YgY3JlYXRlanMuWEhSTG9hZGVyJiYodGhpcy5fbG9hZGVkUmF3UmVzdWx0c1tjLmlkXT1iLmdldFJlc3VsdCghMCkpLHRoaXMuX3JlbW92ZUxvYWRJdGVtKGIpLHRoaXMubWFpbnRhaW5TY3JpcHRPcmRlciYmYy50eXBlPT1jcmVhdGVqcy5Mb2FkUXVldWUuSkFWQVNDUklQVCl7aWYoIShiIGluc3RhbmNlb2YgY3JlYXRlanMuVGFnTG9hZGVyKSlyZXR1cm4gdGhpcy5fbG9hZGVkU2NyaXB0c1tjcmVhdGVqcy5pbmRleE9mKHRoaXMuX3NjcmlwdE9yZGVyLGMpXT1jLHRoaXMuX2NoZWNrU2NyaXB0TG9hZE9yZGVyKGIpLHZvaWQgMDt0aGlzLl9jdXJyZW50bHlMb2FkaW5nU2NyaXB0PSExfXRoaXMuX3Byb2Nlc3NGaW5pc2hlZExvYWQoYyxiKX0sYi5fcHJvY2Vzc0ZpbmlzaGVkTG9hZD1mdW5jdGlvbihhLGIpe3RoaXMuX251bUl0ZW1zTG9hZGVkKyssdGhpcy5fdXBkYXRlUHJvZ3Jlc3MoKSx0aGlzLl9zZW5kRmlsZUNvbXBsZXRlKGEsYiksdGhpcy5fbG9hZE5leHQoKX0sYi5fY2hlY2tTY3JpcHRMb2FkT3JkZXI9ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5fbG9hZGVkU2NyaXB0cy5sZW5ndGgsYj0wO2E+YjtiKyspe3ZhciBjPXRoaXMuX2xvYWRlZFNjcmlwdHNbYl07aWYobnVsbD09PWMpYnJlYWs7YyE9PSEwJiYodGhpcy5fcHJvY2Vzc0ZpbmlzaGVkTG9hZChjKSx0aGlzLl9sb2FkZWRTY3JpcHRzW2JdPSEwLGItLSxhLS0pfX0sYi5fcmVtb3ZlTG9hZEl0ZW09ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuX2N1cnJlbnRMb2Fkcy5sZW5ndGgsYz0wO2I+YztjKyspaWYodGhpcy5fY3VycmVudExvYWRzW2NdPT1hKXt0aGlzLl9jdXJyZW50TG9hZHMuc3BsaWNlKGMsMSk7YnJlYWt9fSxiLl9oYW5kbGVQcm9ncmVzcz1mdW5jdGlvbihhKXt2YXIgYj1hLnRhcmdldDt0aGlzLl9zZW5kRmlsZVByb2dyZXNzKGIuZ2V0SXRlbSgpLGIucHJvZ3Jlc3MpLHRoaXMuX3VwZGF0ZVByb2dyZXNzKCl9LGIuX3VwZGF0ZVByb2dyZXNzPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fbnVtSXRlbXNMb2FkZWQvdGhpcy5fbnVtSXRlbXMsYj10aGlzLl9udW1JdGVtcy10aGlzLl9udW1JdGVtc0xvYWRlZDtpZihiPjApe2Zvcih2YXIgYz0wLGQ9MCxlPXRoaXMuX2N1cnJlbnRMb2Fkcy5sZW5ndGg7ZT5kO2QrKyljKz10aGlzLl9jdXJyZW50TG9hZHNbZF0ucHJvZ3Jlc3M7YSs9Yy9iKihiL3RoaXMuX251bUl0ZW1zKX10aGlzLl9zZW5kUHJvZ3Jlc3MoYSl9LGIuX2Rpc3Bvc2VJdGVtPWZ1bmN0aW9uKGEpe2RlbGV0ZSB0aGlzLl9sb2FkZWRSZXN1bHRzW2EuaWRdLGRlbGV0ZSB0aGlzLl9sb2FkZWRSYXdSZXN1bHRzW2EuaWRdLGRlbGV0ZSB0aGlzLl9sb2FkSXRlbXNCeUlkW2EuaWRdLGRlbGV0ZSB0aGlzLl9sb2FkSXRlbXNCeVNyY1thLnNyY119LGIuX2NyZWF0ZVRhZz1mdW5jdGlvbihhKXt2YXIgYj1udWxsO3N3aXRjaChhKXtjYXNlIGNyZWF0ZWpzLkxvYWRRdWV1ZS5JTUFHRTpyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtjYXNlIGNyZWF0ZWpzLkxvYWRRdWV1ZS5TT1VORDpyZXR1cm4gYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIiksYi5hdXRvcGxheT0hMSxiO2Nhc2UgY3JlYXRlanMuTG9hZFF1ZXVlLkpTT05QOmNhc2UgY3JlYXRlanMuTG9hZFF1ZXVlLkpBVkFTQ1JJUFQ6cmV0dXJuIGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxiLnR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIixiO2Nhc2UgY3JlYXRlanMuTG9hZFF1ZXVlLkNTUzpyZXR1cm4gYj10aGlzLnVzZVhIUj9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIiksYi5yZWw9XCJzdHlsZXNoZWV0XCIsYi50eXBlPVwidGV4dC9jc3NcIixiO2Nhc2UgY3JlYXRlanMuTG9hZFF1ZXVlLlNWRzpyZXR1cm4gdGhpcy51c2VYSFI/Yj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3ZnXCIpOihiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvYmplY3RcIiksYi50eXBlPVwiaW1hZ2Uvc3ZnK3htbFwiKSxifXJldHVybiBudWxsfSxiLl9nZXRUeXBlQnlFeHRlbnNpb249ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gY3JlYXRlanMuTG9hZFF1ZXVlLlRFWFQ7c3dpdGNoKGEudG9Mb3dlckNhc2UoKSl7Y2FzZVwianBlZ1wiOmNhc2VcImpwZ1wiOmNhc2VcImdpZlwiOmNhc2VcInBuZ1wiOmNhc2VcIndlYnBcIjpjYXNlXCJibXBcIjpyZXR1cm4gY3JlYXRlanMuTG9hZFF1ZXVlLklNQUdFO2Nhc2VcIm9nZ1wiOmNhc2VcIm1wM1wiOmNhc2VcIndhdlwiOnJldHVybiBjcmVhdGVqcy5Mb2FkUXVldWUuU09VTkQ7Y2FzZVwianNvblwiOnJldHVybiBjcmVhdGVqcy5Mb2FkUXVldWUuSlNPTjtjYXNlXCJ4bWxcIjpyZXR1cm4gY3JlYXRlanMuTG9hZFF1ZXVlLlhNTDtjYXNlXCJjc3NcIjpyZXR1cm4gY3JlYXRlanMuTG9hZFF1ZXVlLkNTUztjYXNlXCJqc1wiOnJldHVybiBjcmVhdGVqcy5Mb2FkUXVldWUuSkFWQVNDUklQVDtjYXNlXCJzdmdcIjpyZXR1cm4gY3JlYXRlanMuTG9hZFF1ZXVlLlNWRztkZWZhdWx0OnJldHVybiBjcmVhdGVqcy5Mb2FkUXVldWUuVEVYVH19LGIuX3NlbmRGaWxlUHJvZ3Jlc3M9ZnVuY3Rpb24oYSxiKXtpZih0aGlzLl9pc0NhbmNlbGVkKCkpcmV0dXJuIHRoaXMuX2NsZWFuVXAoKSx2b2lkIDA7aWYodGhpcy5oYXNFdmVudExpc3RlbmVyKFwiZmlsZXByb2dyZXNzXCIpKXt2YXIgYz1uZXcgY3JlYXRlanMuRXZlbnQoXCJmaWxlcHJvZ3Jlc3NcIik7Yy5wcm9ncmVzcz1iLGMubG9hZGVkPWIsYy50b3RhbD0xLGMuaXRlbT1hLHRoaXMuZGlzcGF0Y2hFdmVudChjKX19LGIuX3NlbmRGaWxlQ29tcGxldGU9ZnVuY3Rpb24oYSxiKXtpZighdGhpcy5faXNDYW5jZWxlZCgpKXt2YXIgYz1uZXcgY3JlYXRlanMuRXZlbnQoXCJmaWxlbG9hZFwiKTtjLmxvYWRlcj1iLGMuaXRlbT1hLGMucmVzdWx0PXRoaXMuX2xvYWRlZFJlc3VsdHNbYS5pZF0sYy5yYXdSZXN1bHQ9dGhpcy5fbG9hZGVkUmF3UmVzdWx0c1thLmlkXSxhLmNvbXBsZXRlSGFuZGxlciYmYS5jb21wbGV0ZUhhbmRsZXIoYyksdGhpcy5oYXNFdmVudExpc3RlbmVyKFwiZmlsZWxvYWRcIikmJnRoaXMuZGlzcGF0Y2hFdmVudChjKX19LGIuX3NlbmRGaWxlU3RhcnQ9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IGNyZWF0ZWpzLkV2ZW50KFwiZmlsZXN0YXJ0XCIpO2IuaXRlbT1hLHRoaXMuaGFzRXZlbnRMaXN0ZW5lcihcImZpbGVzdGFydFwiKSYmdGhpcy5kaXNwYXRjaEV2ZW50KGIpfSxiLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbUHJlbG9hZEpTIExvYWRRdWV1ZV1cIn0sY3JlYXRlanMuTG9hZFF1ZXVlPWE7dmFyIGQ9ZnVuY3Rpb24oKXt9O2QuaW5pdD1mdW5jdGlvbigpe3ZhciBhPW5hdmlnYXRvci51c2VyQWdlbnQ7ZC5pc0ZpcmVmb3g9YS5pbmRleE9mKFwiRmlyZWZveFwiKT4tMSxkLmlzT3BlcmE9bnVsbCE9d2luZG93Lm9wZXJhLGQuaXNDaHJvbWU9YS5pbmRleE9mKFwiQ2hyb21lXCIpPi0xLGQuaXNJT1M9YS5pbmRleE9mKFwiaVBvZFwiKT4tMXx8YS5pbmRleE9mKFwiaVBob25lXCIpPi0xfHxhLmluZGV4T2YoXCJpUGFkXCIpPi0xfSxkLmluaXQoKSxjcmVhdGVqcy5Mb2FkUXVldWUuQnJvd3NlckRldGVjdD1kfSgpLHRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1mdW5jdGlvbihhLGIpe3RoaXMuaW5pdChhLGIpfSxiPWEucHJvdG90eXBlPW5ldyBjcmVhdGVqcy5BYnN0cmFjdExvYWRlcjtiLl9sb2FkVGltZW91dD1udWxsLGIuX3RhZ0NvbXBsZXRlUHJveHk9bnVsbCxiLl9pc0F1ZGlvPSExLGIuX3RhZz1udWxsLGIuX2pzb25SZXN1bHQ9bnVsbCxiLmluaXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLl9pdGVtPWEsdGhpcy5fYmFzZVBhdGg9Yix0aGlzLl90YWc9YS50YWcsdGhpcy5faXNBdWRpbz13aW5kb3cuSFRNTEF1ZGlvRWxlbWVudCYmYS50YWcgaW5zdGFuY2VvZiBIVE1MQXVkaW9FbGVtZW50LHRoaXMuX3RhZ0NvbXBsZXRlUHJveHk9Y3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlTG9hZCx0aGlzKX0sYi5nZXRSZXN1bHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXRlbS50eXBlPT1jcmVhdGVqcy5Mb2FkUXVldWUuSlNPTlA/dGhpcy5fanNvblJlc3VsdDp0aGlzLl90YWd9LGIuY2FuY2VsPWZ1bmN0aW9uKCl7dGhpcy5jYW5jZWxlZD0hMCx0aGlzLl9jbGVhbigpLHRoaXMuZ2V0SXRlbSgpfSxiLmxvYWQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pdGVtLGI9dGhpcy5fdGFnO2NsZWFyVGltZW91dCh0aGlzLl9sb2FkVGltZW91dCksdGhpcy5fbG9hZFRpbWVvdXQ9c2V0VGltZW91dChjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVUaW1lb3V0LHRoaXMpLGNyZWF0ZWpzLkxvYWRRdWV1ZS5MT0FEX1RJTUVPVVQpLHRoaXMuX2lzQXVkaW8mJihiLnNyYz1udWxsLGIucHJlbG9hZD1cImF1dG9cIiksYi5vbmVycm9yPWNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZUVycm9yLHRoaXMpLHRoaXMuX2lzQXVkaW8/KGIub25zdGFsbGVkPWNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZVN0YWxsZWQsdGhpcyksYi5hZGRFdmVudExpc3RlbmVyKFwiY2FucGxheXRocm91Z2hcIix0aGlzLl90YWdDb21wbGV0ZVByb3h5LCExKSk6KGIub25sb2FkPWNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZUxvYWQsdGhpcyksYi5vbnJlYWR5c3RhdGVjaGFuZ2U9Y3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlUmVhZHlTdGF0ZUNoYW5nZSx0aGlzKSk7dmFyIGM9dGhpcy5idWlsZFBhdGgoYS5zcmMsdGhpcy5fYmFzZVBhdGgsYS52YWx1ZXMpO3N3aXRjaChhLnR5cGUpe2Nhc2UgY3JlYXRlanMuTG9hZFF1ZXVlLkNTUzpiLmhyZWY9YzticmVhaztjYXNlIGNyZWF0ZWpzLkxvYWRRdWV1ZS5TVkc6Yi5kYXRhPWM7YnJlYWs7ZGVmYXVsdDpiLnNyYz1jfWlmKGEudHlwZT09Y3JlYXRlanMuTG9hZFF1ZXVlLkpTT05QKXtpZihudWxsPT1hLmNhbGxiYWNrKXRocm93IG5ldyBFcnJvcihcImNhbGxiYWNrIGlzIHJlcXVpcmVkIGZvciBsb2FkaW5nIEpTT05QIHJlcXVlc3RzLlwiKTtpZihudWxsIT13aW5kb3dbYS5jYWxsYmFja10pdGhyb3cgbmV3IEVycm9yKCdKU09OUCBjYWxsYmFjayBcIicrYS5jYWxsYmFjaysnXCIgYWxyZWFkeSBleGlzdHMgb24gd2luZG93LiBZb3UgbmVlZCB0byBzcGVjaWZ5IGEgZGlmZmVyZW50IGNhbGxiYWNrLiBPciByZS1uYW1lIHRoZSBjdXJyZW50IG9uZS4nKTt3aW5kb3dbYS5jYWxsYmFja109Y3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlSlNPTlBMb2FkLHRoaXMpfShhLnR5cGU9PWNyZWF0ZWpzLkxvYWRRdWV1ZS5TVkd8fGEudHlwZT09Y3JlYXRlanMuTG9hZFF1ZXVlLkpTT05QfHxhLnR5cGU9PWNyZWF0ZWpzLkxvYWRRdWV1ZS5KU09OfHxhLnR5cGU9PWNyZWF0ZWpzLkxvYWRRdWV1ZS5KQVZBU0NSSVBUfHxhLnR5cGU9PWNyZWF0ZWpzLkxvYWRRdWV1ZS5DU1MpJiYodGhpcy5fc3RhcnRUYWdWaXNpYmlsaXR5PWIuc3R5bGUudmlzaWJpbGl0eSxiLnN0eWxlLnZpc2liaWxpdHk9XCJoaWRkZW5cIiwoZG9jdW1lbnQuYm9keXx8ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdKS5hcHBlbmRDaGlsZChiKSksbnVsbCE9Yi5sb2FkJiZiLmxvYWQoKX0sYi5faGFuZGxlSlNPTlBMb2FkPWZ1bmN0aW9uKGEpe3RoaXMuX2pzb25SZXN1bHQ9YX0sYi5faGFuZGxlVGltZW91dD1mdW5jdGlvbigpe3RoaXMuX2NsZWFuKCk7dmFyIGE9bmV3IGNyZWF0ZWpzLkV2ZW50KFwiZXJyb3JcIik7YS50ZXh0PVwiUFJFTE9BRF9USU1FT1VUXCIsdGhpcy5fc2VuZEVycm9yKGEpfSxiLl9oYW5kbGVTdGFsbGVkPWZ1bmN0aW9uKCl7fSxiLl9oYW5kbGVFcnJvcj1mdW5jdGlvbigpe3RoaXMuX2NsZWFuKCk7dmFyIGE9bmV3IGNyZWF0ZWpzLkV2ZW50KFwiZXJyb3JcIik7dGhpcy5fc2VuZEVycm9yKGEpfSxiLl9oYW5kbGVSZWFkeVN0YXRlQ2hhbmdlPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMuX2xvYWRUaW1lb3V0KTt2YXIgYT10aGlzLmdldEl0ZW0oKS50YWc7KFwibG9hZGVkXCI9PWEucmVhZHlTdGF0ZXx8XCJjb21wbGV0ZVwiPT1hLnJlYWR5U3RhdGUpJiZ0aGlzLl9oYW5kbGVMb2FkKCl9LGIuX2hhbmRsZUxvYWQ9ZnVuY3Rpb24oKXtpZighdGhpcy5faXNDYW5jZWxlZCgpKXt2YXIgYT10aGlzLmdldEl0ZW0oKSxiPWEudGFnO2lmKCEodGhpcy5sb2FkZWR8fHRoaXMuaXNBdWRpbyYmNCE9PWIucmVhZHlTdGF0ZSkpe3N3aXRjaCh0aGlzLmxvYWRlZD0hMCxhLnR5cGUpe2Nhc2UgY3JlYXRlanMuTG9hZFF1ZXVlLlNWRzpjYXNlIGNyZWF0ZWpzLkxvYWRRdWV1ZS5KU09OUDpiLnN0eWxlLnZpc2liaWxpdHk9dGhpcy5fc3RhcnRUYWdWaXNpYmlsaXR5LChkb2N1bWVudC5ib2R5fHxkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0pLnJlbW92ZUNoaWxkKGIpfXRoaXMuX2NsZWFuKCksdGhpcy5fc2VuZENvbXBsZXRlKCl9fX0sYi5fY2xlYW49ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5fbG9hZFRpbWVvdXQpO3ZhciBhPXRoaXMuZ2V0SXRlbSgpLnRhZzthLm9ubG9hZD1udWxsLGEucmVtb3ZlRXZlbnRMaXN0ZW5lciYmYS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2FucGxheXRocm91Z2hcIix0aGlzLl90YWdDb21wbGV0ZVByb3h5LCExKSxhLm9uc3RhbGxlZD1udWxsLGEub25wcm9ncmVzcz1udWxsLGEub25lcnJvcj1udWxsLGEucGFyZW50Tm9kZSYmYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGEpO3ZhciBiPXRoaXMuZ2V0SXRlbSgpO2IudHlwZT09Y3JlYXRlanMuTG9hZFF1ZXVlLkpTT05QJiYod2luZG93W2IuY2FsbGJhY2tdPW51bGwpfSxiLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbUHJlbG9hZEpTIFRhZ0xvYWRlcl1cIn0sY3JlYXRlanMuVGFnTG9hZGVyPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEsYil7dGhpcy5pbml0KGEsYil9LGI9YS5wcm90b3R5cGU9bmV3IGNyZWF0ZWpzLkFic3RyYWN0TG9hZGVyO2IuX3JlcXVlc3Q9bnVsbCxiLl9sb2FkVGltZW91dD1udWxsLGIuX3hockxldmVsPTEsYi5fcmVzcG9uc2U9bnVsbCxiLl9yYXdSZXNwb25zZT1udWxsLGIuaW5pdD1mdW5jdGlvbihhLGIpe3RoaXMuX2l0ZW09YSx0aGlzLl9iYXNlUGF0aD1iLCF0aGlzLl9jcmVhdGVYSFIoYSl9LGIuZ2V0UmVzdWx0PWZ1bmN0aW9uKGEpe3JldHVybiBhJiZ0aGlzLl9yYXdSZXNwb25zZT90aGlzLl9yYXdSZXNwb25zZTp0aGlzLl9yZXNwb25zZX0sYi5jYW5jZWw9ZnVuY3Rpb24oKXt0aGlzLmNhbmNlbGVkPSEwLHRoaXMuX2NsZWFuKCksdGhpcy5fcmVxdWVzdC5hYm9ydCgpfSxiLmxvYWQ9ZnVuY3Rpb24oKXtpZihudWxsPT10aGlzLl9yZXF1ZXN0KXJldHVybiB0aGlzLl9oYW5kbGVFcnJvcigpLHZvaWQgMDt0aGlzLl9yZXF1ZXN0Lm9ubG9hZHN0YXJ0PWNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZUxvYWRTdGFydCx0aGlzKSx0aGlzLl9yZXF1ZXN0Lm9ucHJvZ3Jlc3M9Y3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlUHJvZ3Jlc3MsdGhpcyksdGhpcy5fcmVxdWVzdC5vbmFib3J0PWNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZUFib3J0LHRoaXMpLHRoaXMuX3JlcXVlc3Qub25lcnJvcj1jcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVFcnJvcix0aGlzKSx0aGlzLl9yZXF1ZXN0Lm9udGltZW91dD1jcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVUaW1lb3V0LHRoaXMpLDE9PXRoaXMuX3hockxldmVsJiYodGhpcy5fbG9hZFRpbWVvdXQ9c2V0VGltZW91dChjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVUaW1lb3V0LHRoaXMpLGNyZWF0ZWpzLkxvYWRRdWV1ZS5MT0FEX1RJTUVPVVQpKSx0aGlzLl9yZXF1ZXN0Lm9ubG9hZD1jcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVMb2FkLHRoaXMpLHRoaXMuX3JlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlPWNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZVJlYWR5U3RhdGVDaGFuZ2UsdGhpcyk7dHJ5e3RoaXMuX2l0ZW0udmFsdWVzJiZ0aGlzLl9pdGVtLm1ldGhvZCE9Y3JlYXRlanMuTG9hZFF1ZXVlLkdFVD90aGlzLl9pdGVtLm1ldGhvZD09Y3JlYXRlanMuTG9hZFF1ZXVlLlBPU1QmJnRoaXMuX3JlcXVlc3Quc2VuZCh0aGlzLl9mb3JtYXRRdWVyeVN0cmluZyh0aGlzLl9pdGVtLnZhbHVlcykpOnRoaXMuX3JlcXVlc3Quc2VuZCgpfWNhdGNoKGEpe3ZhciBiPW5ldyBjcmVhdGVqcy5FdmVudChcImVycm9yXCIpO2IuZXJyb3I9YSx0aGlzLl9zZW5kRXJyb3IoYil9fSxiLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycyBpbnN0YW5jZW9mIEZ1bmN0aW9uP3RoaXMuX3JlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk6bnVsbH0sYi5nZXRSZXNwb25zZUhlYWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlciBpbnN0YW5jZW9mIEZ1bmN0aW9uP3RoaXMuX3JlcXVlc3QuZ2V0UmVzcG9uc2VIZWFkZXIoYSk6bnVsbH0sYi5faGFuZGxlUHJvZ3Jlc3M9ZnVuY3Rpb24oYSl7aWYoYSYmIShhLmxvYWRlZD4wJiYwPT1hLnRvdGFsKSl7dmFyIGI9bmV3IGNyZWF0ZWpzLkV2ZW50KFwicHJvZ3Jlc3NcIik7Yi5sb2FkZWQ9YS5sb2FkZWQsYi50b3RhbD1hLnRvdGFsLHRoaXMuX3NlbmRQcm9ncmVzcyhiKX19LGIuX2hhbmRsZUxvYWRTdGFydD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh0aGlzLl9sb2FkVGltZW91dCksdGhpcy5fc2VuZExvYWRTdGFydCgpfSxiLl9oYW5kbGVBYm9ydD1mdW5jdGlvbihhKXt0aGlzLl9jbGVhbigpO3ZhciBhPW5ldyBjcmVhdGVqcy5FdmVudChcImVycm9yXCIpO2EudGV4dD1cIlhIUl9BQk9SVEVEXCIsdGhpcy5fc2VuZEVycm9yKGEpfSxiLl9oYW5kbGVFcnJvcj1mdW5jdGlvbigpe3RoaXMuX2NsZWFuKCk7dmFyIGE9bmV3IGNyZWF0ZWpzLkV2ZW50KFwiZXJyb3JcIik7dGhpcy5fc2VuZEVycm9yKGEpfSxiLl9oYW5kbGVSZWFkeVN0YXRlQ2hhbmdlPWZ1bmN0aW9uKCl7ND09dGhpcy5fcmVxdWVzdC5yZWFkeVN0YXRlJiZ0aGlzLl9oYW5kbGVMb2FkKCl9LGIuX2hhbmRsZUxvYWQ9ZnVuY3Rpb24oKXtpZighdGhpcy5sb2FkZWQpe2lmKHRoaXMubG9hZGVkPSEwLCF0aGlzLl9jaGVja0Vycm9yKCkpcmV0dXJuIHRoaXMuX2hhbmRsZUVycm9yKCksdm9pZCAwO3RoaXMuX3Jlc3BvbnNlPXRoaXMuX2dldFJlc3BvbnNlKCksdGhpcy5fY2xlYW4oKTt2YXIgYT10aGlzLl9nZW5lcmF0ZVRhZygpO2EmJnRoaXMuX3NlbmRDb21wbGV0ZSgpfX0sYi5faGFuZGxlVGltZW91dD1mdW5jdGlvbihhKXt0aGlzLl9jbGVhbigpO3ZhciBiPW5ldyBjcmVhdGVqcy5FdmVudChcImVycm9yXCIpO2IudGV4dD1cIlBSRUxPQURfVElNRU9VVFwiLHRoaXMuX3NlbmRFcnJvcihhKX0sYi5fY2hlY2tFcnJvcj1mdW5jdGlvbigpe3ZhciBhPXBhcnNlSW50KHRoaXMuX3JlcXVlc3Quc3RhdHVzKTtzd2l0Y2goYSl7Y2FzZSA0MDQ6Y2FzZSAwOnJldHVybiExfXJldHVybiEwfSxiLl9nZXRSZXNwb25zZT1mdW5jdGlvbigpe2lmKG51bGwhPXRoaXMuX3Jlc3BvbnNlKXJldHVybiB0aGlzLl9yZXNwb25zZTtpZihudWxsIT10aGlzLl9yZXF1ZXN0LnJlc3BvbnNlKXJldHVybiB0aGlzLl9yZXF1ZXN0LnJlc3BvbnNlO3RyeXtpZihudWxsIT10aGlzLl9yZXF1ZXN0LnJlc3BvbnNlVGV4dClyZXR1cm4gdGhpcy5fcmVxdWVzdC5yZXNwb25zZVRleHR9Y2F0Y2goYSl7fXRyeXtpZihudWxsIT10aGlzLl9yZXF1ZXN0LnJlc3BvbnNlWE1MKXJldHVybiB0aGlzLl9yZXF1ZXN0LnJlc3BvbnNlWE1MfWNhdGNoKGEpe31yZXR1cm4gbnVsbH0sYi5fY3JlYXRlWEhSPWZ1bmN0aW9uKGEpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2IuaHJlZj10aGlzLmJ1aWxkUGF0aChhLnNyYyx0aGlzLl9iYXNlUGF0aCk7dmFyIGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7Yy5ocmVmPWxvY2F0aW9uLmhyZWY7dmFyIGQ9XCJcIiE9Yi5ob3N0bmFtZSYmKGIucG9ydCE9Yy5wb3J0fHxiLnByb3RvY29sIT1jLnByb3RvY29sfHxiLmhvc3RuYW1lIT1jLmhvc3RuYW1lKSxlPW51bGw7aWYoZCYmd2luZG93LlhEb21haW5SZXF1ZXN0KWU9bmV3IFhEb21haW5SZXF1ZXN0O2Vsc2UgaWYod2luZG93LlhNTEh0dHBSZXF1ZXN0KWU9bmV3IFhNTEh0dHBSZXF1ZXN0O2Vsc2UgdHJ5e2U9bmV3IEFjdGl2ZVhPYmplY3QoXCJNc3htbDIuWE1MSFRUUC42LjBcIil9Y2F0Y2goZil7dHJ5e2U9bmV3IEFjdGl2ZVhPYmplY3QoXCJNc3htbDIuWE1MSFRUUC4zLjBcIil9Y2F0Y2goZil7dHJ5e2U9bmV3IEFjdGl2ZVhPYmplY3QoXCJNc3htbDIuWE1MSFRUUFwiKX1jYXRjaChmKXtyZXR1cm4hMX19fWEudHlwZT09Y3JlYXRlanMuTG9hZFF1ZXVlLlRFWFQmJmUub3ZlcnJpZGVNaW1lVHlwZSYmZS5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKSx0aGlzLl94aHJMZXZlbD1cInN0cmluZ1wiPT10eXBlb2YgZS5yZXNwb25zZVR5cGU/MjoxO3ZhciBnPW51bGw7cmV0dXJuIGc9YS5tZXRob2Q9PWNyZWF0ZWpzLkxvYWRRdWV1ZS5HRVQ/dGhpcy5idWlsZFBhdGgoYS5zcmMsdGhpcy5fYmFzZVBhdGgsYS52YWx1ZXMpOnRoaXMuYnVpbGRQYXRoKGEuc3JjLHRoaXMuX2Jhc2VQYXRoKSxlLm9wZW4oYS5tZXRob2R8fGNyZWF0ZWpzLkxvYWRRdWV1ZS5HRVQsZywhMCksZCYmZSBpbnN0YW5jZW9mIFhNTEh0dHBSZXF1ZXN0JiYxPT10aGlzLl94aHJMZXZlbCYmZS5zZXRSZXF1ZXN0SGVhZGVyKFwiT3JpZ2luXCIsbG9jYXRpb24ub3JpZ2luKSxhLnZhbHVlcyYmYS5tZXRob2Q9PWNyZWF0ZWpzLkxvYWRRdWV1ZS5QT1NUJiZlLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSxjcmVhdGVqcy5Mb2FkUXVldWUuaXNCaW5hcnkoYS50eXBlKSYmKGUucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIiksdGhpcy5fcmVxdWVzdD1lLCEwfSxiLl9jbGVhbj1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh0aGlzLl9sb2FkVGltZW91dCk7dmFyIGE9dGhpcy5fcmVxdWVzdDthLm9ubG9hZHN0YXJ0PW51bGwsYS5vbnByb2dyZXNzPW51bGwsYS5vbmFib3J0PW51bGwsYS5vbmVycm9yPW51bGwsYS5vbmxvYWQ9bnVsbCxhLm9udGltZW91dD1udWxsLGEub25sb2FkZW5kPW51bGwsYS5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbH0sYi5fZ2VuZXJhdGVUYWc9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pdGVtLnR5cGUsYj10aGlzLl9pdGVtLnRhZztzd2l0Y2goYSl7Y2FzZSBjcmVhdGVqcy5Mb2FkUXVldWUuSU1BR0U6cmV0dXJuIGIub25sb2FkPWNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZVRhZ1JlYWR5LHRoaXMpLGIuc3JjPXRoaXMuYnVpbGRQYXRoKHRoaXMuX2l0ZW0uc3JjLHRoaXMuX2Jhc2VQYXRoLHRoaXMuX2l0ZW0udmFsdWVzKSx0aGlzLl9yYXdSZXNwb25zZT10aGlzLl9yZXNwb25zZSx0aGlzLl9yZXNwb25zZT1iLCExO2Nhc2UgY3JlYXRlanMuTG9hZFF1ZXVlLkpBVkFTQ1JJUFQ6cmV0dXJuIGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxiLnRleHQ9dGhpcy5fcmVzcG9uc2UsdGhpcy5fcmF3UmVzcG9uc2U9dGhpcy5fcmVzcG9uc2UsdGhpcy5fcmVzcG9uc2U9YiwhMDtjYXNlIGNyZWF0ZWpzLkxvYWRRdWV1ZS5DU1M6dmFyIGM9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO2lmKGMuYXBwZW5kQ2hpbGQoYiksYi5zdHlsZVNoZWV0KWIuc3R5bGVTaGVldC5jc3NUZXh0PXRoaXMuX3Jlc3BvbnNlO2Vsc2V7dmFyIGQ9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5fcmVzcG9uc2UpO2IuYXBwZW5kQ2hpbGQoZCl9cmV0dXJuIHRoaXMuX3Jhd1Jlc3BvbnNlPXRoaXMuX3Jlc3BvbnNlLHRoaXMuX3Jlc3BvbnNlPWIsITA7Y2FzZSBjcmVhdGVqcy5Mb2FkUXVldWUuWE1MOnZhciBlPXRoaXMuX3BhcnNlWE1MKHRoaXMuX3Jlc3BvbnNlLFwidGV4dC94bWxcIik7cmV0dXJuIHRoaXMuX3Jlc3BvbnNlPWUsITA7Y2FzZSBjcmVhdGVqcy5Mb2FkUXVldWUuU1ZHOnZhciBlPXRoaXMuX3BhcnNlWE1MKHRoaXMuX3Jlc3BvbnNlLFwiaW1hZ2Uvc3ZnK3htbFwiKTtyZXR1cm4gdGhpcy5fcmF3UmVzcG9uc2U9dGhpcy5fcmVzcG9uc2UsbnVsbCE9ZS5kb2N1bWVudEVsZW1lbnQ/KGIuYXBwZW5kQ2hpbGQoZS5kb2N1bWVudEVsZW1lbnQpLHRoaXMuX3Jlc3BvbnNlPWIpOnRoaXMuX3Jlc3BvbnNlPWUsITA7Y2FzZSBjcmVhdGVqcy5Mb2FkUXVldWUuSlNPTjp2YXIgZj17fTt0cnl7Zj1KU09OLnBhcnNlKHRoaXMuX3Jlc3BvbnNlKX1jYXRjaChnKXtmPWd9cmV0dXJuIHRoaXMuX3Jhd1Jlc3BvbnNlPXRoaXMuX3Jlc3BvbnNlLHRoaXMuX3Jlc3BvbnNlPWYsITB9cmV0dXJuITB9LGIuX3BhcnNlWE1MPWZ1bmN0aW9uKGEsYil7dmFyIGM9bnVsbDtpZih3aW5kb3cuRE9NUGFyc2VyKXt2YXIgZD1uZXcgRE9NUGFyc2VyO2M9ZC5wYXJzZUZyb21TdHJpbmcoYSxiKX1lbHNlIGM9bmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MRE9NXCIpLGMuYXN5bmM9ITEsYy5sb2FkWE1MKGEpO3JldHVybiBjfSxiLl9oYW5kbGVUYWdSZWFkeT1mdW5jdGlvbigpe3RoaXMuX3NlbmRDb21wbGV0ZSgpfSxiLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbUHJlbG9hZEpTIFhIUkxvYWRlcl1cIn0sY3JlYXRlanMuWEhSTG9hZGVyPWF9KCksXCJvYmplY3RcIiE9dHlwZW9mIEpTT04mJihKU09OPXt9KSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGYoYSl7cmV0dXJuIDEwPmE/XCIwXCIrYTphfWZ1bmN0aW9uIHF1b3RlKGEpe3JldHVybiBlc2NhcGFibGUubGFzdEluZGV4PTAsZXNjYXBhYmxlLnRlc3QoYSk/J1wiJythLnJlcGxhY2UoZXNjYXBhYmxlLGZ1bmN0aW9uKGEpe3ZhciBiPW1ldGFbYV07cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGI/YjpcIlxcXFx1XCIrKFwiMDAwMFwiK2EuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KX0pKydcIic6J1wiJythKydcIid9ZnVuY3Rpb24gc3RyKGEsYil7dmFyIGMsZCxlLGYsZyxoPWdhcCxpPWJbYV07c3dpdGNoKGkmJlwib2JqZWN0XCI9PXR5cGVvZiBpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLnRvSlNPTiYmKGk9aS50b0pTT04oYSkpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcCYmKGk9cmVwLmNhbGwoYixhLGkpKSx0eXBlb2YgaSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIHF1b3RlKGkpO2Nhc2VcIm51bWJlclwiOnJldHVybiBpc0Zpbml0ZShpKT9TdHJpbmcoaSk6XCJudWxsXCI7Y2FzZVwiYm9vbGVhblwiOmNhc2VcIm51bGxcIjpyZXR1cm4gU3RyaW5nKGkpO2Nhc2VcIm9iamVjdFwiOmlmKCFpKXJldHVyblwibnVsbFwiO2lmKGdhcCs9aW5kZW50LGc9W10sXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShpKSl7Zm9yKGY9aS5sZW5ndGgsYz0wO2Y+YztjKz0xKWdbY109c3RyKGMsaSl8fFwibnVsbFwiO3JldHVybiBlPTA9PT1nLmxlbmd0aD9cIltdXCI6Z2FwP1wiW1xcblwiK2dhcCtnLmpvaW4oXCIsXFxuXCIrZ2FwKStcIlxcblwiK2grXCJdXCI6XCJbXCIrZy5qb2luKFwiLFwiKStcIl1cIixnYXA9aCxlfWlmKHJlcCYmXCJvYmplY3RcIj09dHlwZW9mIHJlcClmb3IoZj1yZXAubGVuZ3RoLGM9MDtmPmM7Yys9MSlcInN0cmluZ1wiPT10eXBlb2YgcmVwW2NdJiYoZD1yZXBbY10sZT1zdHIoZCxpKSxlJiZnLnB1c2gocXVvdGUoZCkrKGdhcD9cIjogXCI6XCI6XCIpK2UpKTtlbHNlIGZvcihkIGluIGkpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGksZCkmJihlPXN0cihkLGkpLGUmJmcucHVzaChxdW90ZShkKSsoZ2FwP1wiOiBcIjpcIjpcIikrZSkpO3JldHVybiBlPTA9PT1nLmxlbmd0aD9cInt9XCI6Z2FwP1wie1xcblwiK2dhcCtnLmpvaW4oXCIsXFxuXCIrZ2FwKStcIlxcblwiK2grXCJ9XCI6XCJ7XCIrZy5qb2luKFwiLFwiKStcIn1cIixnYXA9aCxlfX1cImZ1bmN0aW9uXCIhPXR5cGVvZiBEYXRlLnByb3RvdHlwZS50b0pTT04mJihEYXRlLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gaXNGaW5pdGUodGhpcy52YWx1ZU9mKCkpP3RoaXMuZ2V0VVRDRnVsbFllYXIoKStcIi1cIitmKHRoaXMuZ2V0VVRDTW9udGgoKSsxKStcIi1cIitmKHRoaXMuZ2V0VVRDRGF0ZSgpKStcIlRcIitmKHRoaXMuZ2V0VVRDSG91cnMoKSkrXCI6XCIrZih0aGlzLmdldFVUQ01pbnV0ZXMoKSkrXCI6XCIrZih0aGlzLmdldFVUQ1NlY29uZHMoKSkrXCJaXCI6bnVsbH0sU3RyaW5nLnByb3RvdHlwZS50b0pTT049TnVtYmVyLnByb3RvdHlwZS50b0pTT049Qm9vbGVhbi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVPZigpfSk7dmFyIGN4PS9bXFx1MDAwMFxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLGVzY2FwYWJsZT0vW1xcXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHg5ZlxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLGdhcCxpbmRlbnQsbWV0YT17XCJcXGJcIjpcIlxcXFxiXCIsXCJcdFwiOlwiXFxcXHRcIixcIlxcblwiOlwiXFxcXG5cIixcIlxcZlwiOlwiXFxcXGZcIixcIlxcclwiOlwiXFxcXHJcIiwnXCInOidcXFxcXCInLFwiXFxcXFwiOlwiXFxcXFxcXFxcIn0scmVwO1wiZnVuY3Rpb25cIiE9dHlwZW9mIEpTT04uc3RyaW5naWZ5JiYoSlNPTi5zdHJpbmdpZnk9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO2lmKGdhcD1cIlwiLGluZGVudD1cIlwiLFwibnVtYmVyXCI9PXR5cGVvZiBjKWZvcihkPTA7Yz5kO2QrPTEpaW5kZW50Kz1cIiBcIjtlbHNlXCJzdHJpbmdcIj09dHlwZW9mIGMmJihpbmRlbnQ9Yyk7aWYocmVwPWIsYiYmXCJmdW5jdGlvblwiIT10eXBlb2YgYiYmKFwib2JqZWN0XCIhPXR5cGVvZiBifHxcIm51bWJlclwiIT10eXBlb2YgYi5sZW5ndGgpKXRocm93IG5ldyBFcnJvcihcIkpTT04uc3RyaW5naWZ5XCIpO3JldHVybiBzdHIoXCJcIix7XCJcIjphfSl9KSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBKU09OLnBhcnNlJiYoSlNPTi5wYXJzZT1mdW5jdGlvbih0ZXh0LHJldml2ZXIpe2Z1bmN0aW9uIHdhbGsoYSxiKXt2YXIgYyxkLGU9YVtiXTtpZihlJiZcIm9iamVjdFwiPT10eXBlb2YgZSlmb3IoYyBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLGMpJiYoZD13YWxrKGUsYyksdm9pZCAwIT09ZD9lW2NdPWQ6ZGVsZXRlIGVbY10pO3JldHVybiByZXZpdmVyLmNhbGwoYSxiLGUpfXZhciBqO2lmKHRleHQ9U3RyaW5nKHRleHQpLGN4Lmxhc3RJbmRleD0wLGN4LnRlc3QodGV4dCkmJih0ZXh0PXRleHQucmVwbGFjZShjeCxmdW5jdGlvbihhKXtyZXR1cm5cIlxcXFx1XCIrKFwiMDAwMFwiK2EuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KX0pKSwvXltcXF0sOnt9XFxzXSokLy50ZXN0KHRleHQucmVwbGFjZSgvXFxcXCg/OltcIlxcXFxcXC9iZm5ydF18dVswLTlhLWZBLUZdezR9KS9nLFwiQFwiKS5yZXBsYWNlKC9cIlteXCJcXFxcXFxuXFxyXSpcInx0cnVlfGZhbHNlfG51bGx8LT9cXGQrKD86XFwuXFxkKik/KD86W2VFXVsrXFwtXT9cXGQrKT8vZyxcIl1cIikucmVwbGFjZSgvKD86Xnw6fCwpKD86XFxzKlxcWykrL2csXCJcIikpKXJldHVybiBqPWV2YWwoXCIoXCIrdGV4dCtcIilcIiksXCJmdW5jdGlvblwiPT10eXBlb2YgcmV2aXZlcj93YWxrKHtcIlwiOmp9LFwiXCIpOmo7dGhyb3cgbmV3IFN5bnRheEVycm9yKFwiSlNPTi5wYXJzZVwiKX0pfSgpOyIsIi8qIVxuKiBAbGljZW5zZSBFYXNlbEpTXG4qIFZpc2l0IGh0dHA6Ly9jcmVhdGVqcy5jb20vIGZvciBkb2N1bWVudGF0aW9uLCB1cGRhdGVzIGFuZCBleGFtcGxlcy5cbipcbiogQ29weXJpZ2h0IChjKSAyMDExLTIwMTMgZ3NraW5uZXIuY29tLCBpbmMuXG4qXG4qIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UuXG4qIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UuaHRtbFxuKlxuKiBUaGlzIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiovXG50aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuaW5pdGlhbGl6ZShhLGIsYyl9LGI9YS5wcm90b3R5cGU7Yi50eXBlPW51bGwsYi50YXJnZXQ9bnVsbCxiLmN1cnJlbnRUYXJnZXQ9bnVsbCxiLmV2ZW50UGhhc2U9MCxiLmJ1YmJsZXM9ITEsYi5jYW5jZWxhYmxlPSExLGIudGltZVN0YW1wPTAsYi5kZWZhdWx0UHJldmVudGVkPSExLGIucHJvcGFnYXRpb25TdG9wcGVkPSExLGIuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPSExLGIucmVtb3ZlZD0hMSxiLmluaXRpYWxpemU9ZnVuY3Rpb24oYSxiLGMpe3RoaXMudHlwZT1hLHRoaXMuYnViYmxlcz1iLHRoaXMuY2FuY2VsYWJsZT1jLHRoaXMudGltZVN0YW1wPShuZXcgRGF0ZSkuZ2V0VGltZSgpfSxiLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwfSxiLnN0b3BQcm9wYWdhdGlvbj1mdW5jdGlvbigpe3RoaXMucHJvcGFnYXRpb25TdG9wcGVkPSEwfSxiLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbj1mdW5jdGlvbigpe3RoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMucHJvcGFnYXRpb25TdG9wcGVkPSEwfSxiLnJlbW92ZT1mdW5jdGlvbigpe3RoaXMucmVtb3ZlZD0hMH0sYi5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgYSh0aGlzLnR5cGUsdGhpcy5idWJibGVzLHRoaXMuY2FuY2VsYWJsZSl9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltFdmVudCAodHlwZT1cIit0aGlzLnR5cGUrXCIpXVwifSxjcmVhdGVqcy5FdmVudD1hfSgpLHRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1mdW5jdGlvbigpe30sYj1hLnByb3RvdHlwZTthLmluaXRpYWxpemU9ZnVuY3Rpb24oYSl7YS5hZGRFdmVudExpc3RlbmVyPWIuYWRkRXZlbnRMaXN0ZW5lcixhLm9uPWIub24sYS5yZW1vdmVFdmVudExpc3RlbmVyPWEub2ZmPWIucmVtb3ZlRXZlbnRMaXN0ZW5lcixhLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzPWIucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMsYS5oYXNFdmVudExpc3RlbmVyPWIuaGFzRXZlbnRMaXN0ZW5lcixhLmRpc3BhdGNoRXZlbnQ9Yi5kaXNwYXRjaEV2ZW50LGEuX2Rpc3BhdGNoRXZlbnQ9Yi5fZGlzcGF0Y2hFdmVudH0sYi5fbGlzdGVuZXJzPW51bGwsYi5fY2FwdHVyZUxpc3RlbmVycz1udWxsLGIuaW5pdGlhbGl6ZT1mdW5jdGlvbigpe30sYi5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZDtkPWM/dGhpcy5fY2FwdHVyZUxpc3RlbmVycz10aGlzLl9jYXB0dXJlTGlzdGVuZXJzfHx7fTp0aGlzLl9saXN0ZW5lcnM9dGhpcy5fbGlzdGVuZXJzfHx7fTt2YXIgZT1kW2FdO3JldHVybiBlJiZ0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoYSxiLGMpLGU9ZFthXSxlP2UucHVzaChiKTpkW2FdPVtiXSxifSxiLm9uPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtyZXR1cm4gYi5oYW5kbGVFdmVudCYmKGM9Y3x8YixiPWIuaGFuZGxlRXZlbnQpLGM9Y3x8dGhpcyx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoYSxmdW5jdGlvbihhKXtiLmNhbGwoYyxhLGUpLGQmJmEucmVtb3ZlKCl9LGYpfSxiLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWM/dGhpcy5fY2FwdHVyZUxpc3RlbmVyczp0aGlzLl9saXN0ZW5lcnM7aWYoZCl7dmFyIGU9ZFthXTtpZihlKWZvcih2YXIgZj0wLGc9ZS5sZW5ndGg7Zz5mO2YrKylpZihlW2ZdPT1iKXsxPT1nP2RlbGV0ZSBkW2FdOmUuc3BsaWNlKGYsMSk7YnJlYWt9fX0sYi5vZmY9Yi5yZW1vdmVFdmVudExpc3RlbmVyLGIucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oYSl7YT8odGhpcy5fbGlzdGVuZXJzJiZkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2FdLHRoaXMuX2NhcHR1cmVMaXN0ZW5lcnMmJmRlbGV0ZSB0aGlzLl9jYXB0dXJlTGlzdGVuZXJzW2FdKTp0aGlzLl9saXN0ZW5lcnM9dGhpcy5fY2FwdHVyZUxpc3RlbmVycz1udWxsfSxiLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oYSxiKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYSl7dmFyIGM9dGhpcy5fbGlzdGVuZXJzO2lmKCFjfHwhY1thXSlyZXR1cm4hMTthPW5ldyBjcmVhdGVqcy5FdmVudChhKX1pZihhLnRhcmdldD1ifHx0aGlzLGEuYnViYmxlcyYmdGhpcy5wYXJlbnQpe2Zvcih2YXIgZD10aGlzLGU9W2RdO2QucGFyZW50OyllLnB1c2goZD1kLnBhcmVudCk7dmFyIGYsZz1lLmxlbmd0aDtmb3IoZj1nLTE7Zj49MCYmIWEucHJvcGFnYXRpb25TdG9wcGVkO2YtLSllW2ZdLl9kaXNwYXRjaEV2ZW50KGEsMSsoMD09ZikpO2ZvcihmPTE7Zz5mJiYhYS5wcm9wYWdhdGlvblN0b3BwZWQ7ZisrKWVbZl0uX2Rpc3BhdGNoRXZlbnQoYSwzKX1lbHNlIHRoaXMuX2Rpc3BhdGNoRXZlbnQoYSwyKTtyZXR1cm4gYS5kZWZhdWx0UHJldmVudGVkfSxiLmhhc0V2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fbGlzdGVuZXJzLGM9dGhpcy5fY2FwdHVyZUxpc3RlbmVycztyZXR1cm4hIShiJiZiW2FdfHxjJiZjW2FdKX0sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW0V2ZW50RGlzcGF0Y2hlcl1cIn0sYi5fZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9MT09Yj90aGlzLl9jYXB0dXJlTGlzdGVuZXJzOnRoaXMuX2xpc3RlbmVycztpZihhJiZkKXt2YXIgZT1kW2EudHlwZV07aWYoIWV8fCEoYz1lLmxlbmd0aCkpcmV0dXJuO2EuY3VycmVudFRhcmdldD10aGlzLGEuZXZlbnRQaGFzZT1iLGEucmVtb3ZlZD0hMSxlPWUuc2xpY2UoKTtmb3IodmFyIGY9MDtjPmYmJiFhLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDtmKyspe3ZhciBnPWVbZl07Zy5oYW5kbGVFdmVudD9nLmhhbmRsZUV2ZW50KGEpOmcoYSksYS5yZW1vdmVkJiYodGhpcy5vZmYoYS50eXBlLGcsMT09YiksYS5yZW1vdmVkPSExKX19fSxjcmVhdGVqcy5FdmVudERpc3BhdGNoZXI9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7Y3JlYXRlanMuaW5kZXhPZj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGg7ZD5jO2MrKylpZihiPT09YVtjXSlyZXR1cm4gYztyZXR1cm4tMX19KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKCl7dGhyb3dcIlVJRCBjYW5ub3QgYmUgaW5zdGFudGlhdGVkXCJ9O2EuX25leHRJRD0wLGEuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuX25leHRJRCsrfSxjcmVhdGVqcy5VSUQ9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oKXt0aHJvd1wiVGlja2VyIGNhbm5vdCBiZSBpbnN0YW50aWF0ZWQuXCJ9O2EuUkFGX1NZTkNIRUQ9XCJzeW5jaGVkXCIsYS5SQUY9XCJyYWZcIixhLlRJTUVPVVQ9XCJ0aW1lb3V0XCIsYS51c2VSQUY9ITEsYS50aW1pbmdNb2RlPW51bGwsYS5tYXhEZWx0YT0wLGEucmVtb3ZlRXZlbnRMaXN0ZW5lcj1udWxsLGEucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnM9bnVsbCxhLmRpc3BhdGNoRXZlbnQ9bnVsbCxhLmhhc0V2ZW50TGlzdGVuZXI9bnVsbCxhLl9saXN0ZW5lcnM9bnVsbCxjcmVhdGVqcy5FdmVudERpc3BhdGNoZXIuaW5pdGlhbGl6ZShhKSxhLl9hZGRFdmVudExpc3RlbmVyPWEuYWRkRXZlbnRMaXN0ZW5lcixhLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oKXshYS5faW5pdGVkJiZhLmluaXQoKSxhLl9hZGRFdmVudExpc3RlbmVyLmFwcGx5KGEsYXJndW1lbnRzKX0sYS5fcGF1c2VkPSExLGEuX2luaXRlZD0hMSxhLl9zdGFydFRpbWU9MCxhLl9wYXVzZWRUaW1lPTAsYS5fdGlja3M9MCxhLl9wYXVzZWRUaWNrcz0wLGEuX2ludGVydmFsPTUwLGEuX2xhc3RUaW1lPTAsYS5fdGltZXM9bnVsbCxhLl90aWNrVGltZXM9bnVsbCxhLl90aW1lcklkPW51bGwsYS5fcmFmPSEwLGEuaW5pdD1mdW5jdGlvbigpe2EuX2luaXRlZHx8KGEuX2luaXRlZD0hMCxhLl90aW1lcz1bXSxhLl90aWNrVGltZXM9W10sYS5fc3RhcnRUaW1lPWEuX2dldFRpbWUoKSxhLl90aW1lcy5wdXNoKGEuX2xhc3RUaW1lPTApLGEuc2V0SW50ZXJ2YWwoYS5faW50ZXJ2YWwpKX0sYS5yZXNldD1mdW5jdGlvbigpe2lmKGEuX3JhZil7dmFyIGI9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93Lm9DYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93Lm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWU7YiYmYihhLl90aW1lcklkKX1lbHNlIGNsZWFyVGltZW91dChhLl90aW1lcklkKTthLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzKFwidGlja1wiKX0sYS5zZXRJbnRlcnZhbD1mdW5jdGlvbihiKXthLl9pbnRlcnZhbD1iLGEuX2luaXRlZCYmYS5fc2V0dXBUaWNrKCl9LGEuZ2V0SW50ZXJ2YWw9ZnVuY3Rpb24oKXtyZXR1cm4gYS5faW50ZXJ2YWx9LGEuc2V0RlBTPWZ1bmN0aW9uKGIpe2Euc2V0SW50ZXJ2YWwoMWUzL2IpfSxhLmdldEZQUz1mdW5jdGlvbigpe3JldHVybiAxZTMvYS5faW50ZXJ2YWx9LGEuZ2V0TWVhc3VyZWRUaWNrVGltZT1mdW5jdGlvbihiKXt2YXIgYz0wLGQ9YS5fdGlja1RpbWVzO2lmKGQubGVuZ3RoPDEpcmV0dXJuLTE7Yj1NYXRoLm1pbihkLmxlbmd0aCxifHwwfGEuZ2V0RlBTKCkpO2Zvcih2YXIgZT0wO2I+ZTtlKyspYys9ZFtlXTtyZXR1cm4gZC9ifSxhLmdldE1lYXN1cmVkRlBTPWZ1bmN0aW9uKGIpe3ZhciBjPWEuX3RpbWVzO3JldHVybiBjLmxlbmd0aDwyPy0xOihiPU1hdGgubWluKGMubGVuZ3RoLTEsYnx8MHxhLmdldEZQUygpKSwxZTMvKChjWzBdLWNbYl0pL2IpKX0sYS5zZXRQYXVzZWQ9ZnVuY3Rpb24oYil7YS5fcGF1c2VkPWJ9LGEuZ2V0UGF1c2VkPWZ1bmN0aW9uKCl7cmV0dXJuIGEuX3BhdXNlZH0sYS5nZXRUaW1lPWZ1bmN0aW9uKGIpe3JldHVybiBhLl9nZXRUaW1lKCktYS5fc3RhcnRUaW1lLShiP2EuX3BhdXNlZFRpbWU6MCl9LGEuZ2V0RXZlbnRUaW1lPWZ1bmN0aW9uKGIpe3JldHVybihhLl9sYXN0VGltZXx8YS5fc3RhcnRUaW1lKS0oYj9hLl9wYXVzZWRUaW1lOjApfSxhLmdldFRpY2tzPWZ1bmN0aW9uKGIpe3JldHVybiBhLl90aWNrcy0oYj9hLl9wYXVzZWRUaWNrczowKX0sYS5faGFuZGxlU3luY2g9ZnVuY3Rpb24oKXt2YXIgYj1hLl9nZXRUaW1lKCktYS5fc3RhcnRUaW1lO2EuX3RpbWVySWQ9bnVsbCxhLl9zZXR1cFRpY2soKSxiLWEuX2xhc3RUaW1lPj0uOTcqKGEuX2ludGVydmFsLTEpJiZhLl90aWNrKCl9LGEuX2hhbmRsZVJBRj1mdW5jdGlvbigpe2EuX3RpbWVySWQ9bnVsbCxhLl9zZXR1cFRpY2soKSxhLl90aWNrKCl9LGEuX2hhbmRsZVRpbWVvdXQ9ZnVuY3Rpb24oKXthLl90aW1lcklkPW51bGwsYS5fc2V0dXBUaWNrKCksYS5fdGljaygpfSxhLl9zZXR1cFRpY2s9ZnVuY3Rpb24oKXtpZihudWxsPT1hLl90aW1lcklkKXt2YXIgYj1hLnRpbWluZ01vZGV8fGEudXNlUkFGJiZhLlJBRl9TWU5DSEVEO2lmKGI9PWEuUkFGX1NZTkNIRUR8fGI9PWEuUkFGKXt2YXIgYz13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lO2lmKGMpcmV0dXJuIGEuX3RpbWVySWQ9YyhiPT1hLlJBRj9hLl9oYW5kbGVSQUY6YS5faGFuZGxlU3luY2gpLGEuX3JhZj0hMCx2b2lkIDB9YS5fcmFmPSExLGEuX3RpbWVySWQ9c2V0VGltZW91dChhLl9oYW5kbGVUaW1lb3V0LGEuX2ludGVydmFsKX19LGEuX3RpY2s9ZnVuY3Rpb24oKXt2YXIgYj1hLl9nZXRUaW1lKCktYS5fc3RhcnRUaW1lLGM9Yi1hLl9sYXN0VGltZSxkPWEuX3BhdXNlZDtpZihhLl90aWNrcysrLGQmJihhLl9wYXVzZWRUaWNrcysrLGEuX3BhdXNlZFRpbWUrPWMpLGEuX2xhc3RUaW1lPWIsYS5oYXNFdmVudExpc3RlbmVyKFwidGlja1wiKSl7dmFyIGU9bmV3IGNyZWF0ZWpzLkV2ZW50KFwidGlja1wiKSxmPWEubWF4RGVsdGE7ZS5kZWx0YT1mJiZjPmY/ZjpjLGUucGF1c2VkPWQsZS50aW1lPWIsZS5ydW5UaW1lPWItYS5fcGF1c2VkVGltZSxhLmRpc3BhdGNoRXZlbnQoZSl9Zm9yKGEuX3RpY2tUaW1lcy51bnNoaWZ0KGEuX2dldFRpbWUoKS1iKTthLl90aWNrVGltZXMubGVuZ3RoPjEwMDspYS5fdGlja1RpbWVzLnBvcCgpO2ZvcihhLl90aW1lcy51bnNoaWZ0KGIpO2EuX3RpbWVzLmxlbmd0aD4xMDA7KWEuX3RpbWVzLnBvcCgpfTt2YXIgYj13aW5kb3cucGVyZm9ybWFuY2UmJihwZXJmb3JtYW5jZS5ub3d8fHBlcmZvcm1hbmNlLm1vek5vd3x8cGVyZm9ybWFuY2UubXNOb3d8fHBlcmZvcm1hbmNlLm9Ob3d8fHBlcmZvcm1hbmNlLndlYmtpdE5vdyk7YS5fZ2V0VGltZT1mdW5jdGlvbigpe3JldHVybiBiJiZiLmNhbGwocGVyZm9ybWFuY2UpfHwobmV3IERhdGUpLmdldFRpbWUoKX0sY3JlYXRlanMuVGlja2VyPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxpLGope3RoaXMuaW5pdGlhbGl6ZShhLGIsYyxkLGUsZixnLGgsaSxqKX0sYj1hLnByb3RvdHlwZT1uZXcgY3JlYXRlanMuRXZlbnQ7Yi5zdGFnZVg9MCxiLnN0YWdlWT0wLGIucmF3WD0wLGIucmF3WT0wLGIubmF0aXZlRXZlbnQ9bnVsbCxiLnBvaW50ZXJJRD0wLGIucHJpbWFyeT0hMSxiLmFkZEV2ZW50TGlzdGVuZXI9bnVsbCxiLnJlbW92ZUV2ZW50TGlzdGVuZXI9bnVsbCxiLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzPW51bGwsYi5kaXNwYXRjaEV2ZW50PW51bGwsYi5oYXNFdmVudExpc3RlbmVyPW51bGwsYi5fbGlzdGVuZXJzPW51bGwsY3JlYXRlanMuRXZlbnREaXNwYXRjaGVyLmluaXRpYWxpemUoYiksYi5FdmVudF9pbml0aWFsaXplPWIuaW5pdGlhbGl6ZSxiLmluaXRpYWxpemU9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGksail7dGhpcy5FdmVudF9pbml0aWFsaXplKGEsYixjKSx0aGlzLnN0YWdlWD1kLHRoaXMuc3RhZ2VZPWUsdGhpcy5uYXRpdmVFdmVudD1mLHRoaXMucG9pbnRlcklEPWcsdGhpcy5wcmltYXJ5PWgsdGhpcy5yYXdYPW51bGw9PWk/ZDppLHRoaXMucmF3WT1udWxsPT1qP2U6an0sYi5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgYSh0aGlzLnR5cGUsdGhpcy5idWJibGVzLHRoaXMuY2FuY2VsYWJsZSx0aGlzLnN0YWdlWCx0aGlzLnN0YWdlWSx0aGlzLnRhcmdldCx0aGlzLm5hdGl2ZUV2ZW50LHRoaXMucG9pbnRlcklELHRoaXMucHJpbWFyeSx0aGlzLnJhd1gsdGhpcy5yYXdZKX0sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW01vdXNlRXZlbnQgKHR5cGU9XCIrdGhpcy50eXBlK1wiIHN0YWdlWD1cIit0aGlzLnN0YWdlWCtcIiBzdGFnZVk9XCIrdGhpcy5zdGFnZVkrXCIpXVwifSxjcmVhdGVqcy5Nb3VzZUV2ZW50PWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmluaXRpYWxpemUoYSxiLGMsZCxlLGYpfSxiPWEucHJvdG90eXBlO2EuaWRlbnRpdHk9bnVsbCxhLkRFR19UT19SQUQ9TWF0aC5QSS8xODAsYi5hPTEsYi5iPTAsYi5jPTAsYi5kPTEsYi50eD0wLGIudHk9MCxiLmFscGhhPTEsYi5zaGFkb3c9bnVsbCxiLmNvbXBvc2l0ZU9wZXJhdGlvbj1udWxsLGIuaW5pdGlhbGl6ZT1mdW5jdGlvbihhLGIsYyxkLGUsZil7cmV0dXJuIHRoaXMuYT1udWxsPT1hPzE6YSx0aGlzLmI9Ynx8MCx0aGlzLmM9Y3x8MCx0aGlzLmQ9bnVsbD09ZD8xOmQsdGhpcy50eD1lfHwwLHRoaXMudHk9Znx8MCx0aGlzfSxiLnByZXBlbmQ9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZhciBnPXRoaXMudHg7aWYoMSE9YXx8MCE9Ynx8MCE9Y3x8MSE9ZCl7dmFyIGg9dGhpcy5hLGk9dGhpcy5jO3RoaXMuYT1oKmErdGhpcy5iKmMsdGhpcy5iPWgqYit0aGlzLmIqZCx0aGlzLmM9aSphK3RoaXMuZCpjLHRoaXMuZD1pKmIrdGhpcy5kKmR9cmV0dXJuIHRoaXMudHg9ZyphK3RoaXMudHkqYytlLHRoaXMudHk9ZypiK3RoaXMudHkqZCtmLHRoaXN9LGIuYXBwZW5kPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgZz10aGlzLmEsaD10aGlzLmIsaT10aGlzLmMsaj10aGlzLmQ7cmV0dXJuIHRoaXMuYT1hKmcrYippLHRoaXMuYj1hKmgrYipqLHRoaXMuYz1jKmcrZCppLHRoaXMuZD1jKmgrZCpqLHRoaXMudHg9ZSpnK2YqaSt0aGlzLnR4LHRoaXMudHk9ZSpoK2Yqait0aGlzLnR5LHRoaXN9LGIucHJlcGVuZE1hdHJpeD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wcmVwZW5kKGEuYSxhLmIsYS5jLGEuZCxhLnR4LGEudHkpLHRoaXMucHJlcGVuZFByb3BlcnRpZXMoYS5hbHBoYSxhLnNoYWRvdyxhLmNvbXBvc2l0ZU9wZXJhdGlvbiksdGhpc30sYi5hcHBlbmRNYXRyaXg9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYXBwZW5kKGEuYSxhLmIsYS5jLGEuZCxhLnR4LGEudHkpLHRoaXMuYXBwZW5kUHJvcGVydGllcyhhLmFscGhhLGEuc2hhZG93LGEuY29tcG9zaXRlT3BlcmF0aW9uKSx0aGlzfSxiLnByZXBlbmRUcmFuc2Zvcm09ZnVuY3Rpb24oYixjLGQsZSxmLGcsaCxpLGope2lmKGYlMzYwKXZhciBrPWYqYS5ERUdfVE9fUkFELGw9TWF0aC5jb3MoayksbT1NYXRoLnNpbihrKTtlbHNlIGw9MSxtPTA7cmV0dXJuKGl8fGopJiYodGhpcy50eC09aSx0aGlzLnR5LT1qKSxnfHxoPyhnKj1hLkRFR19UT19SQUQsaCo9YS5ERUdfVE9fUkFELHRoaXMucHJlcGVuZChsKmQsbSpkLC1tKmUsbCplLDAsMCksdGhpcy5wcmVwZW5kKE1hdGguY29zKGgpLE1hdGguc2luKGgpLC1NYXRoLnNpbihnKSxNYXRoLmNvcyhnKSxiLGMpKTp0aGlzLnByZXBlbmQobCpkLG0qZCwtbSplLGwqZSxiLGMpLHRoaXN9LGIuYXBwZW5kVHJhbnNmb3JtPWZ1bmN0aW9uKGIsYyxkLGUsZixnLGgsaSxqKXtpZihmJTM2MCl2YXIgaz1mKmEuREVHX1RPX1JBRCxsPU1hdGguY29zKGspLG09TWF0aC5zaW4oayk7ZWxzZSBsPTEsbT0wO3JldHVybiBnfHxoPyhnKj1hLkRFR19UT19SQUQsaCo9YS5ERUdfVE9fUkFELHRoaXMuYXBwZW5kKE1hdGguY29zKGgpLE1hdGguc2luKGgpLC1NYXRoLnNpbihnKSxNYXRoLmNvcyhnKSxiLGMpLHRoaXMuYXBwZW5kKGwqZCxtKmQsLW0qZSxsKmUsMCwwKSk6dGhpcy5hcHBlbmQobCpkLG0qZCwtbSplLGwqZSxiLGMpLChpfHxqKSYmKHRoaXMudHgtPWkqdGhpcy5hK2oqdGhpcy5jLHRoaXMudHktPWkqdGhpcy5iK2oqdGhpcy5kKSx0aGlzfSxiLnJvdGF0ZT1mdW5jdGlvbihhKXt2YXIgYj1NYXRoLmNvcyhhKSxjPU1hdGguc2luKGEpLGQ9dGhpcy5hLGU9dGhpcy5jLGY9dGhpcy50eDtyZXR1cm4gdGhpcy5hPWQqYi10aGlzLmIqYyx0aGlzLmI9ZCpjK3RoaXMuYipiLHRoaXMuYz1lKmItdGhpcy5kKmMsdGhpcy5kPWUqYyt0aGlzLmQqYix0aGlzLnR4PWYqYi10aGlzLnR5KmMsdGhpcy50eT1mKmMrdGhpcy50eSpiLHRoaXN9LGIuc2tldz1mdW5jdGlvbihiLGMpe3JldHVybiBiKj1hLkRFR19UT19SQUQsYyo9YS5ERUdfVE9fUkFELHRoaXMuYXBwZW5kKE1hdGguY29zKGMpLE1hdGguc2luKGMpLC1NYXRoLnNpbihiKSxNYXRoLmNvcyhiKSwwLDApLHRoaXN9LGIuc2NhbGU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5hKj1hLHRoaXMuZCo9Yix0aGlzLmMqPWEsdGhpcy5iKj1iLHRoaXMudHgqPWEsdGhpcy50eSo9Yix0aGlzfSxiLnRyYW5zbGF0ZT1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnR4Kz1hLHRoaXMudHkrPWIsdGhpc30sYi5pZGVudGl0eT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFscGhhPXRoaXMuYT10aGlzLmQ9MSx0aGlzLmI9dGhpcy5jPXRoaXMudHg9dGhpcy50eT0wLHRoaXMuc2hhZG93PXRoaXMuY29tcG9zaXRlT3BlcmF0aW9uPW51bGwsdGhpc30sYi5pbnZlcnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmEsYj10aGlzLmIsYz10aGlzLmMsZD10aGlzLmQsZT10aGlzLnR4LGY9YSpkLWIqYztyZXR1cm4gdGhpcy5hPWQvZix0aGlzLmI9LWIvZix0aGlzLmM9LWMvZix0aGlzLmQ9YS9mLHRoaXMudHg9KGMqdGhpcy50eS1kKmUpL2YsdGhpcy50eT0tKGEqdGhpcy50eS1iKmUpL2YsdGhpc30sYi5pc0lkZW50aXR5PWZ1bmN0aW9uKCl7cmV0dXJuIDA9PXRoaXMudHgmJjA9PXRoaXMudHkmJjE9PXRoaXMuYSYmMD09dGhpcy5iJiYwPT10aGlzLmMmJjE9PXRoaXMuZH0sYi50cmFuc2Zvcm1Qb2ludD1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGM9Y3x8e30sYy54PWEqdGhpcy5hK2IqdGhpcy5jK3RoaXMudHgsYy55PWEqdGhpcy5iK2IqdGhpcy5kK3RoaXMudHksY30sYi5kZWNvbXBvc2U9ZnVuY3Rpb24oYil7bnVsbD09YiYmKGI9e30pLGIueD10aGlzLnR4LGIueT10aGlzLnR5LGIuc2NhbGVYPU1hdGguc3FydCh0aGlzLmEqdGhpcy5hK3RoaXMuYip0aGlzLmIpLGIuc2NhbGVZPU1hdGguc3FydCh0aGlzLmMqdGhpcy5jK3RoaXMuZCp0aGlzLmQpO3ZhciBjPU1hdGguYXRhbjIoLXRoaXMuYyx0aGlzLmQpLGQ9TWF0aC5hdGFuMih0aGlzLmIsdGhpcy5hKTtyZXR1cm4gYz09ZD8oYi5yb3RhdGlvbj1kL2EuREVHX1RPX1JBRCx0aGlzLmE8MCYmdGhpcy5kPj0wJiYoYi5yb3RhdGlvbis9Yi5yb3RhdGlvbjw9MD8xODA6LTE4MCksYi5za2V3WD1iLnNrZXdZPTApOihiLnNrZXdYPWMvYS5ERUdfVE9fUkFELGIuc2tld1k9ZC9hLkRFR19UT19SQUQpLGJ9LGIucmVpbml0aWFsaXplPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxpKXtyZXR1cm4gdGhpcy5pbml0aWFsaXplKGEsYixjLGQsZSxmKSx0aGlzLmFscGhhPW51bGw9PWc/MTpnLHRoaXMuc2hhZG93PWgsdGhpcy5jb21wb3NpdGVPcGVyYXRpb249aSx0aGlzfSxiLmNvcHk9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucmVpbml0aWFsaXplKGEuYSxhLmIsYS5jLGEuZCxhLnR4LGEudHksYS5hbHBoYSxhLnNoYWRvdyxhLmNvbXBvc2l0ZU9wZXJhdGlvbil9LGIuYXBwZW5kUHJvcGVydGllcz1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIHRoaXMuYWxwaGEqPWEsdGhpcy5zaGFkb3c9Ynx8dGhpcy5zaGFkb3csdGhpcy5jb21wb3NpdGVPcGVyYXRpb249Y3x8dGhpcy5jb21wb3NpdGVPcGVyYXRpb24sdGhpc30sYi5wcmVwZW5kUHJvcGVydGllcz1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIHRoaXMuYWxwaGEqPWEsdGhpcy5zaGFkb3c9dGhpcy5zaGFkb3d8fGIsdGhpcy5jb21wb3NpdGVPcGVyYXRpb249dGhpcy5jb21wb3NpdGVPcGVyYXRpb258fGMsdGhpc30sYi5jbG9uZT1mdW5jdGlvbigpe3JldHVybihuZXcgYSkuY29weSh0aGlzKX0sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW01hdHJpeDJEIChhPVwiK3RoaXMuYStcIiBiPVwiK3RoaXMuYitcIiBjPVwiK3RoaXMuYytcIiBkPVwiK3RoaXMuZCtcIiB0eD1cIit0aGlzLnR4K1wiIHR5PVwiK3RoaXMudHkrXCIpXVwifSxhLmlkZW50aXR5PW5ldyBhLGNyZWF0ZWpzLk1hdHJpeDJEPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEsYil7dGhpcy5pbml0aWFsaXplKGEsYil9LGI9YS5wcm90b3R5cGU7Yi54PTAsYi55PTAsYi5pbml0aWFsaXplPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMueD1udWxsPT1hPzA6YSx0aGlzLnk9bnVsbD09Yj8wOmIsdGhpc30sYi5jb3B5PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmluaXRpYWxpemUoYS54LGEueSl9LGIuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGEodGhpcy54LHRoaXMueSl9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltQb2ludCAoeD1cIit0aGlzLngrXCIgeT1cIit0aGlzLnkrXCIpXVwifSxjcmVhdGVqcy5Qb2ludD1hfSgpLHRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLmluaXRpYWxpemUoYSxiLGMsZCl9LGI9YS5wcm90b3R5cGU7Yi54PTAsYi55PTAsYi53aWR0aD0wLGIuaGVpZ2h0PTAsYi5pbml0aWFsaXplPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLng9YXx8MCx0aGlzLnk9Ynx8MCx0aGlzLndpZHRoPWN8fDAsdGhpcy5oZWlnaHQ9ZHx8MCx0aGlzfSxiLmNvcHk9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuaW5pdGlhbGl6ZShhLngsYS55LGEud2lkdGgsYS5oZWlnaHQpfSxiLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBhKHRoaXMueCx0aGlzLnksdGhpcy53aWR0aCx0aGlzLmhlaWdodCl9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltSZWN0YW5nbGUgKHg9XCIrdGhpcy54K1wiIHk9XCIrdGhpcy55K1wiIHdpZHRoPVwiK3RoaXMud2lkdGgrXCIgaGVpZ2h0PVwiK3RoaXMuaGVpZ2h0K1wiKV1cIn0sY3JlYXRlanMuUmVjdGFuZ2xlPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3RoaXMuaW5pdGlhbGl6ZShhLGIsYyxkLGUsZixnKX0sYj1hLnByb3RvdHlwZTtiLnRhcmdldD1udWxsLGIub3ZlckxhYmVsPW51bGwsYi5vdXRMYWJlbD1udWxsLGIuZG93bkxhYmVsPW51bGwsYi5wbGF5PSExLGIuX2lzUHJlc3NlZD0hMSxiLl9pc092ZXI9ITEsYi5pbml0aWFsaXplPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe2EuYWRkRXZlbnRMaXN0ZW5lciYmKHRoaXMudGFyZ2V0PWEsYS5jdXJzb3I9XCJwb2ludGVyXCIsdGhpcy5vdmVyTGFiZWw9bnVsbD09Yz9cIm92ZXJcIjpjLHRoaXMub3V0TGFiZWw9bnVsbD09Yj9cIm91dFwiOmIsdGhpcy5kb3duTGFiZWw9bnVsbD09ZD9cImRvd25cIjpkLHRoaXMucGxheT1lLHRoaXMuc2V0RW5hYmxlZCghMCksdGhpcy5oYW5kbGVFdmVudCh7fSksZiYmKGcmJihmLmFjdGlvbnNFbmFibGVkPSExLGYuZ290b0FuZFN0b3AmJmYuZ290b0FuZFN0b3AoZykpLGEuaGl0QXJlYT1mKSl9LGIuc2V0RW5hYmxlZD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLnRhcmdldDthPyhiLmFkZEV2ZW50TGlzdGVuZXIoXCJyb2xsb3ZlclwiLHRoaXMpLGIuYWRkRXZlbnRMaXN0ZW5lcihcInJvbGxvdXRcIix0aGlzKSxiLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIix0aGlzKSxiLmFkZEV2ZW50TGlzdGVuZXIoXCJwcmVzc3VwXCIsdGhpcykpOihiLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyb2xsb3ZlclwiLHRoaXMpLGIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJvbGxvdXRcIix0aGlzKSxiLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIix0aGlzKSxiLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwcmVzc3VwXCIsdGhpcykpfSxiLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbQnV0dG9uSGVscGVyXVwifSxiLmhhbmRsZUV2ZW50PWZ1bmN0aW9uKGEpe3ZhciBiLGM9dGhpcy50YXJnZXQsZD1hLnR5cGU7XCJtb3VzZWRvd25cIj09ZD8odGhpcy5faXNQcmVzc2VkPSEwLGI9dGhpcy5kb3duTGFiZWwpOlwicHJlc3N1cFwiPT1kPyh0aGlzLl9pc1ByZXNzZWQ9ITEsYj10aGlzLl9pc092ZXI/dGhpcy5vdmVyTGFiZWw6dGhpcy5vdXRMYWJlbCk6XCJyb2xsb3ZlclwiPT1kPyh0aGlzLl9pc092ZXI9ITAsYj10aGlzLl9pc1ByZXNzZWQ/dGhpcy5kb3duTGFiZWw6dGhpcy5vdmVyTGFiZWwpOih0aGlzLl9pc092ZXI9ITEsYj10aGlzLl9pc1ByZXNzZWQ/dGhpcy5vdmVyTGFiZWw6dGhpcy5vdXRMYWJlbCksdGhpcy5wbGF5P2MuZ290b0FuZFBsYXkmJmMuZ290b0FuZFBsYXkoYik6Yy5nb3RvQW5kU3RvcCYmYy5nb3RvQW5kU3RvcChiKX0sY3JlYXRlanMuQnV0dG9uSGVscGVyPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuaW5pdGlhbGl6ZShhLGIsYyxkKX0sYj1hLnByb3RvdHlwZTthLmlkZW50aXR5PW51bGwsYi5jb2xvcj1udWxsLGIub2Zmc2V0WD0wLGIub2Zmc2V0WT0wLGIuYmx1cj0wLGIuaW5pdGlhbGl6ZT1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLmNvbG9yPWEsdGhpcy5vZmZzZXRYPWIsdGhpcy5vZmZzZXRZPWMsdGhpcy5ibHVyPWR9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltTaGFkb3ddXCJ9LGIuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGEodGhpcy5jb2xvcix0aGlzLm9mZnNldFgsdGhpcy5vZmZzZXRZLHRoaXMuYmx1cil9LGEuaWRlbnRpdHk9bmV3IGEoXCJ0cmFuc3BhcmVudFwiLDAsMCwwKSxjcmVhdGVqcy5TaGFkb3c9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oYSl7dGhpcy5pbml0aWFsaXplKGEpfSxiPWEucHJvdG90eXBlPW5ldyBjcmVhdGVqcy5FdmVudERpc3BhdGNoZXI7Yi5jb21wbGV0ZT0hMCxiLmZyYW1lcmF0ZT0wLGIuX2FuaW1hdGlvbnM9bnVsbCxiLl9mcmFtZXM9bnVsbCxiLl9pbWFnZXM9bnVsbCxiLl9kYXRhPW51bGwsYi5fbG9hZENvdW50PTAsYi5fZnJhbWVIZWlnaHQ9MCxiLl9mcmFtZVdpZHRoPTAsYi5fbnVtRnJhbWVzPTAsYi5fcmVnWD0wLGIuX3JlZ1k9MCxiLmluaXRpYWxpemU9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGU7aWYobnVsbCE9YSl7aWYodGhpcy5mcmFtZXJhdGU9YS5mcmFtZXJhdGV8fDAsYS5pbWFnZXMmJihjPWEuaW1hZ2VzLmxlbmd0aCk+MClmb3IoZT10aGlzLl9pbWFnZXM9W10sYj0wO2M+YjtiKyspe3ZhciBmPWEuaW1hZ2VzW2JdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBmKXt2YXIgZz1mO2Y9bmV3IEltYWdlLGYuc3JjPWd9ZS5wdXNoKGYpLGYuZ2V0Q29udGV4dHx8Zi5jb21wbGV0ZXx8KHRoaXMuX2xvYWRDb3VudCsrLHRoaXMuY29tcGxldGU9ITEsZnVuY3Rpb24oYSl7Zi5vbmxvYWQ9ZnVuY3Rpb24oKXthLl9oYW5kbGVJbWFnZUxvYWQoKX19KHRoaXMpKX1pZihudWxsPT1hLmZyYW1lcyk7ZWxzZSBpZihhLmZyYW1lcyBpbnN0YW5jZW9mIEFycmF5KWZvcih0aGlzLl9mcmFtZXM9W10sZT1hLmZyYW1lcyxiPTAsYz1lLmxlbmd0aDtjPmI7YisrKXt2YXIgaD1lW2JdO3RoaXMuX2ZyYW1lcy5wdXNoKHtpbWFnZTp0aGlzLl9pbWFnZXNbaFs0XT9oWzRdOjBdLHJlY3Q6bmV3IGNyZWF0ZWpzLlJlY3RhbmdsZShoWzBdLGhbMV0saFsyXSxoWzNdKSxyZWdYOmhbNV18fDAscmVnWTpoWzZdfHwwfSl9ZWxzZSBkPWEuZnJhbWVzLHRoaXMuX2ZyYW1lV2lkdGg9ZC53aWR0aCx0aGlzLl9mcmFtZUhlaWdodD1kLmhlaWdodCx0aGlzLl9yZWdYPWQucmVnWHx8MCx0aGlzLl9yZWdZPWQucmVnWXx8MCx0aGlzLl9udW1GcmFtZXM9ZC5jb3VudCwwPT10aGlzLl9sb2FkQ291bnQmJnRoaXMuX2NhbGN1bGF0ZUZyYW1lcygpO2lmKHRoaXMuX2FuaW1hdGlvbnM9W10sbnVsbCE9KGQ9YS5hbmltYXRpb25zKSl7dGhpcy5fZGF0YT17fTt2YXIgaTtmb3IoaSBpbiBkKXt2YXIgaj17bmFtZTppfSxrPWRbaV07aWYoXCJudW1iZXJcIj09dHlwZW9mIGspZT1qLmZyYW1lcz1ba107ZWxzZSBpZihrIGluc3RhbmNlb2YgQXJyYXkpaWYoMT09ay5sZW5ndGgpai5mcmFtZXM9W2tbMF1dO2Vsc2UgZm9yKGouc3BlZWQ9a1szXSxqLm5leHQ9a1syXSxlPWouZnJhbWVzPVtdLGI9a1swXTtiPD1rWzFdO2IrKyllLnB1c2goYik7ZWxzZXtqLnNwZWVkPWsuc3BlZWQsai5uZXh0PWsubmV4dDt2YXIgbD1rLmZyYW1lcztlPWouZnJhbWVzPVwibnVtYmVyXCI9PXR5cGVvZiBsP1tsXTpsLnNsaWNlKDApfShqLm5leHQ9PT0hMHx8dm9pZCAwPT09ai5uZXh0KSYmKGoubmV4dD1pKSwoai5uZXh0PT09ITF8fGUubGVuZ3RoPDImJmoubmV4dD09aSkmJihqLm5leHQ9bnVsbCksai5zcGVlZHx8KGouc3BlZWQ9MSksdGhpcy5fYW5pbWF0aW9ucy5wdXNoKGkpLHRoaXMuX2RhdGFbaV09an19fX0sYi5nZXROdW1GcmFtZXM9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gdGhpcy5fZnJhbWVzP3RoaXMuX2ZyYW1lcy5sZW5ndGg6dGhpcy5fbnVtRnJhbWVzO3ZhciBiPXRoaXMuX2RhdGFbYV07cmV0dXJuIG51bGw9PWI/MDpiLmZyYW1lcy5sZW5ndGh9LGIuZ2V0QW5pbWF0aW9ucz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9hbmltYXRpb25zLnNsaWNlKDApfSxiLmdldEFuaW1hdGlvbj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fZGF0YVthXX0sYi5nZXRGcmFtZT1mdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gdGhpcy5fZnJhbWVzJiYoYj10aGlzLl9mcmFtZXNbYV0pP2I6bnVsbH0sYi5nZXRGcmFtZUJvdW5kcz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZ2V0RnJhbWUoYSk7cmV0dXJuIGM/KGJ8fG5ldyBjcmVhdGVqcy5SZWN0YW5nbGUpLmluaXRpYWxpemUoLWMucmVnWCwtYy5yZWdZLGMucmVjdC53aWR0aCxjLnJlY3QuaGVpZ2h0KTpudWxsfSxiLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbU3ByaXRlU2hlZXRdXCJ9LGIuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYj1uZXcgYTtyZXR1cm4gYi5jb21wbGV0ZT10aGlzLmNvbXBsZXRlLGIuX2FuaW1hdGlvbnM9dGhpcy5fYW5pbWF0aW9ucyxiLl9mcmFtZXM9dGhpcy5fZnJhbWVzLGIuX2ltYWdlcz10aGlzLl9pbWFnZXMsYi5fZGF0YT10aGlzLl9kYXRhLGIuX2ZyYW1lSGVpZ2h0PXRoaXMuX2ZyYW1lSGVpZ2h0LGIuX2ZyYW1lV2lkdGg9dGhpcy5fZnJhbWVXaWR0aCxiLl9udW1GcmFtZXM9dGhpcy5fbnVtRnJhbWVzLGIuX2xvYWRDb3VudD10aGlzLl9sb2FkQ291bnQsYn0sYi5faGFuZGxlSW1hZ2VMb2FkPWZ1bmN0aW9uKCl7MD09LS10aGlzLl9sb2FkQ291bnQmJih0aGlzLl9jYWxjdWxhdGVGcmFtZXMoKSx0aGlzLmNvbXBsZXRlPSEwLHRoaXMuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpKX0sYi5fY2FsY3VsYXRlRnJhbWVzPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2ZyYW1lcyYmMCE9dGhpcy5fZnJhbWVXaWR0aCl7dGhpcy5fZnJhbWVzPVtdO2Zvcih2YXIgYT0wLGI9dGhpcy5fZnJhbWVXaWR0aCxjPXRoaXMuX2ZyYW1lSGVpZ2h0LGQ9MCxlPXRoaXMuX2ltYWdlcztkPGUubGVuZ3RoO2QrKyl7Zm9yKHZhciBmPWVbZF0sZz0wfChmLndpZHRoKzEpL2IsaD0wfChmLmhlaWdodCsxKS9jLGk9dGhpcy5fbnVtRnJhbWVzPjA/TWF0aC5taW4odGhpcy5fbnVtRnJhbWVzLWEsZypoKTpnKmgsaj0wO2k+ajtqKyspdGhpcy5fZnJhbWVzLnB1c2goe2ltYWdlOmYscmVjdDpuZXcgY3JlYXRlanMuUmVjdGFuZ2xlKGolZypiLCgwfGovZykqYyxiLGMpLHJlZ1g6dGhpcy5fcmVnWCxyZWdZOnRoaXMuX3JlZ1l9KTthKz1pfXRoaXMuX251bUZyYW1lcz1hfX0sY3JlYXRlanMuU3ByaXRlU2hlZXQ9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYShhLGIsYyl7dGhpcy5mPWEsdGhpcy5wYXJhbXM9Yix0aGlzLnBhdGg9bnVsbD09Yz8hMDpjfWEucHJvdG90eXBlLmV4ZWM9ZnVuY3Rpb24oYSl7dGhpcy5mLmFwcGx5KGEsdGhpcy5wYXJhbXMpfTt2YXIgYj1mdW5jdGlvbigpe3RoaXMuaW5pdGlhbGl6ZSgpfSxjPWIucHJvdG90eXBlO2IuZ2V0UkdCPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBudWxsIT1hJiZudWxsPT1jJiYoZD1iLGM9MjU1JmEsYj0yNTUmYT4+OCxhPTI1NSZhPj4xNiksbnVsbD09ZD9cInJnYihcIithK1wiLFwiK2IrXCIsXCIrYytcIilcIjpcInJnYmEoXCIrYStcIixcIitiK1wiLFwiK2MrXCIsXCIrZCtcIilcIn0sYi5nZXRIU0w9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIG51bGw9PWQ/XCJoc2woXCIrYSUzNjArXCIsXCIrYitcIiUsXCIrYytcIiUpXCI6XCJoc2xhKFwiK2ElMzYwK1wiLFwiK2IrXCIlLFwiK2MrXCIlLFwiK2QrXCIpXCJ9LGIuQ29tbWFuZD1hLGIuQkFTRV82ND17QTowLEI6MSxDOjIsRDozLEU6NCxGOjUsRzo2LEg6NyxJOjgsSjo5LEs6MTAsTDoxMSxNOjEyLE46MTMsTzoxNCxQOjE1LFE6MTYsUjoxNyxTOjE4LFQ6MTksVToyMCxWOjIxLFc6MjIsWDoyMyxZOjI0LFo6MjUsYToyNixiOjI3LGM6MjgsZDoyOSxlOjMwLGY6MzEsZzozMixoOjMzLGk6MzQsajozNSxrOjM2LGw6MzcsbTozOCxuOjM5LG86NDAscDo0MSxxOjQyLHI6NDMsczo0NCx0OjQ1LHU6NDYsdjo0Nyx3OjQ4LHg6NDkseTo1MCx6OjUxLDA6NTIsMTo1MywyOjU0LDM6NTUsNDo1Niw1OjU3LDY6NTgsNzo1OSw4OjYwLDk6NjEsXCIrXCI6NjIsXCIvXCI6NjN9LGIuU1RST0tFX0NBUFNfTUFQPVtcImJ1dHRcIixcInJvdW5kXCIsXCJzcXVhcmVcIl0sYi5TVFJPS0VfSk9JTlRTX01BUD1bXCJtaXRlclwiLFwicm91bmRcIixcImJldmVsXCJdO3ZhciBkPWNyZWF0ZWpzLmNyZWF0ZUNhbnZhcz9jcmVhdGVqcy5jcmVhdGVDYW52YXMoKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO2lmKGQuZ2V0Q29udGV4dCl7dmFyIGU9Yi5fY3R4PWQuZ2V0Q29udGV4dChcIjJkXCIpO2IuYmVnaW5DbWQ9bmV3IGEoZS5iZWdpblBhdGgsW10sITEpLGIuZmlsbENtZD1uZXcgYShlLmZpbGwsW10sITEpLGIuc3Ryb2tlQ21kPW5ldyBhKGUuc3Ryb2tlLFtdLCExKSxkLndpZHRoPWQuaGVpZ2h0PTF9Yy5fc3Ryb2tlSW5zdHJ1Y3Rpb25zPW51bGwsYy5fc3Ryb2tlU3R5bGVJbnN0cnVjdGlvbnM9bnVsbCxjLl9zdHJva2VJZ25vcmVTY2FsZT0hMSxjLl9maWxsSW5zdHJ1Y3Rpb25zPW51bGwsYy5fZmlsbE1hdHJpeD1udWxsLGMuX2luc3RydWN0aW9ucz1udWxsLGMuX29sZEluc3RydWN0aW9ucz1udWxsLGMuX2FjdGl2ZUluc3RydWN0aW9ucz1udWxsLGMuX2FjdGl2ZT0hMSxjLl9kaXJ0eT0hMSxjLmluaXRpYWxpemU9ZnVuY3Rpb24oKXt0aGlzLmNsZWFyKCksdGhpcy5fY3R4PWIuX2N0eH0sYy5pc0VtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuISh0aGlzLl9pbnN0cnVjdGlvbnMubGVuZ3RofHx0aGlzLl9vbGRJbnN0cnVjdGlvbnMubGVuZ3RofHx0aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnMubGVuZ3RoKX0sYy5kcmF3PWZ1bmN0aW9uKGEpe3RoaXMuX2RpcnR5JiZ0aGlzLl91cGRhdGVJbnN0cnVjdGlvbnMoKTtmb3IodmFyIGI9dGhpcy5faW5zdHJ1Y3Rpb25zLGM9MCxkPWIubGVuZ3RoO2Q+YztjKyspYltjXS5leGVjKGEpfSxjLmRyYXdBc1BhdGg9ZnVuY3Rpb24oYSl7dGhpcy5fZGlydHkmJnRoaXMuX3VwZGF0ZUluc3RydWN0aW9ucygpO2Zvcih2YXIgYixjPXRoaXMuX2luc3RydWN0aW9ucyxkPTAsZT1jLmxlbmd0aDtlPmQ7ZCsrKSgoYj1jW2RdKS5wYXRofHwwPT1kKSYmYi5leGVjKGEpfSxjLm1vdmVUbz1mdW5jdGlvbihiLGMpe3JldHVybiB0aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnMucHVzaChuZXcgYSh0aGlzLl9jdHgubW92ZVRvLFtiLGNdKSksdGhpc30sYy5saW5lVG89ZnVuY3Rpb24oYixjKXtyZXR1cm4gdGhpcy5fZGlydHk9dGhpcy5fYWN0aXZlPSEwLHRoaXMuX2FjdGl2ZUluc3RydWN0aW9ucy5wdXNoKG5ldyBhKHRoaXMuX2N0eC5saW5lVG8sW2IsY10pKSx0aGlzfSxjLmFyY1RvPWZ1bmN0aW9uKGIsYyxkLGUsZil7cmV0dXJuIHRoaXMuX2RpcnR5PXRoaXMuX2FjdGl2ZT0hMCx0aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnMucHVzaChuZXcgYSh0aGlzLl9jdHguYXJjVG8sW2IsYyxkLGUsZl0pKSx0aGlzfSxjLmFyYz1mdW5jdGlvbihiLGMsZCxlLGYsZyl7cmV0dXJuIHRoaXMuX2RpcnR5PXRoaXMuX2FjdGl2ZT0hMCxudWxsPT1nJiYoZz0hMSksdGhpcy5fYWN0aXZlSW5zdHJ1Y3Rpb25zLnB1c2gobmV3IGEodGhpcy5fY3R4LmFyYyxbYixjLGQsZSxmLGddKSksdGhpc30sYy5xdWFkcmF0aWNDdXJ2ZVRvPWZ1bmN0aW9uKGIsYyxkLGUpe3JldHVybiB0aGlzLl9kaXJ0eT10aGlzLl9hY3RpdmU9ITAsdGhpcy5fYWN0aXZlSW5zdHJ1Y3Rpb25zLnB1c2gobmV3IGEodGhpcy5fY3R4LnF1YWRyYXRpY0N1cnZlVG8sW2IsYyxkLGVdKSksdGhpc30sYy5iZXppZXJDdXJ2ZVRvPWZ1bmN0aW9uKGIsYyxkLGUsZixnKXtyZXR1cm4gdGhpcy5fZGlydHk9dGhpcy5fYWN0aXZlPSEwLHRoaXMuX2FjdGl2ZUluc3RydWN0aW9ucy5wdXNoKG5ldyBhKHRoaXMuX2N0eC5iZXppZXJDdXJ2ZVRvLFtiLGMsZCxlLGYsZ10pKSx0aGlzfSxjLnJlY3Q9ZnVuY3Rpb24oYixjLGQsZSl7cmV0dXJuIHRoaXMuX2RpcnR5PXRoaXMuX2FjdGl2ZT0hMCx0aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnMucHVzaChuZXcgYSh0aGlzLl9jdHgucmVjdCxbYixjLGQsZV0pKSx0aGlzfSxjLmNsb3NlUGF0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9hY3RpdmUmJih0aGlzLl9kaXJ0eT0hMCx0aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnMucHVzaChuZXcgYSh0aGlzLl9jdHguY2xvc2VQYXRoLFtdKSkpLHRoaXN9LGMuY2xlYXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW5zdHJ1Y3Rpb25zPVtdLHRoaXMuX29sZEluc3RydWN0aW9ucz1bXSx0aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnM9W10sdGhpcy5fc3Ryb2tlU3R5bGVJbnN0cnVjdGlvbnM9dGhpcy5fc3Ryb2tlSW5zdHJ1Y3Rpb25zPXRoaXMuX2ZpbGxJbnN0cnVjdGlvbnM9dGhpcy5fZmlsbE1hdHJpeD1udWxsLHRoaXMuX2FjdGl2ZT10aGlzLl9kaXJ0eT10aGlzLl9zdHJva2VJZ25vcmVTY2FsZT0hMSx0aGlzfSxjLmJlZ2luRmlsbD1mdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5fYWN0aXZlJiZ0aGlzLl9uZXdQYXRoKCksdGhpcy5fZmlsbEluc3RydWN0aW9ucz1iP1tuZXcgYSh0aGlzLl9zZXRQcm9wLFtcImZpbGxTdHlsZVwiLGJdLCExKV06bnVsbCx0aGlzLl9maWxsTWF0cml4PW51bGwsdGhpc30sYy5iZWdpbkxpbmVhckdyYWRpZW50RmlsbD1mdW5jdGlvbihiLGMsZCxlLGYsZyl7dGhpcy5fYWN0aXZlJiZ0aGlzLl9uZXdQYXRoKCk7Zm9yKHZhciBoPXRoaXMuX2N0eC5jcmVhdGVMaW5lYXJHcmFkaWVudChkLGUsZixnKSxpPTAsaj1iLmxlbmd0aDtqPmk7aSsrKWguYWRkQ29sb3JTdG9wKGNbaV0sYltpXSk7cmV0dXJuIHRoaXMuX2ZpbGxJbnN0cnVjdGlvbnM9W25ldyBhKHRoaXMuX3NldFByb3AsW1wiZmlsbFN0eWxlXCIsaF0sITEpXSx0aGlzLl9maWxsTWF0cml4PW51bGwsdGhpc30sYy5iZWdpblJhZGlhbEdyYWRpZW50RmlsbD1mdW5jdGlvbihiLGMsZCxlLGYsZyxoLGkpe3RoaXMuX2FjdGl2ZSYmdGhpcy5fbmV3UGF0aCgpO2Zvcih2YXIgaj10aGlzLl9jdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoZCxlLGYsZyxoLGkpLGs9MCxsPWIubGVuZ3RoO2w+aztrKyspai5hZGRDb2xvclN0b3AoY1trXSxiW2tdKTtyZXR1cm4gdGhpcy5fZmlsbEluc3RydWN0aW9ucz1bbmV3IGEodGhpcy5fc2V0UHJvcCxbXCJmaWxsU3R5bGVcIixqXSwhMSldLHRoaXMuX2ZpbGxNYXRyaXg9bnVsbCx0aGlzfSxjLmJlZ2luQml0bWFwRmlsbD1mdW5jdGlvbihiLGMsZCl7dGhpcy5fYWN0aXZlJiZ0aGlzLl9uZXdQYXRoKCksYz1jfHxcIlwiO3ZhciBlPXRoaXMuX2N0eC5jcmVhdGVQYXR0ZXJuKGIsYyk7cmV0dXJuIHRoaXMuX2ZpbGxJbnN0cnVjdGlvbnM9W25ldyBhKHRoaXMuX3NldFByb3AsW1wiZmlsbFN0eWxlXCIsZV0sITEpXSx0aGlzLl9maWxsTWF0cml4PWQ/W2QuYSxkLmIsZC5jLGQuZCxkLnR4LGQudHldOm51bGwsdGhpc30sYy5lbmRGaWxsPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYmVnaW5GaWxsKCl9LGMuc2V0U3Ryb2tlU3R5bGU9ZnVuY3Rpb24oYyxkLGUsZixnKXtyZXR1cm4gdGhpcy5fYWN0aXZlJiZ0aGlzLl9uZXdQYXRoKCksdGhpcy5fc3Ryb2tlU3R5bGVJbnN0cnVjdGlvbnM9W25ldyBhKHRoaXMuX3NldFByb3AsW1wibGluZVdpZHRoXCIsbnVsbD09Yz9cIjFcIjpjXSwhMSksbmV3IGEodGhpcy5fc2V0UHJvcCxbXCJsaW5lQ2FwXCIsbnVsbD09ZD9cImJ1dHRcIjppc05hTihkKT9kOmIuU1RST0tFX0NBUFNfTUFQW2RdXSwhMSksbmV3IGEodGhpcy5fc2V0UHJvcCxbXCJsaW5lSm9pblwiLG51bGw9PWU/XCJtaXRlclwiOmlzTmFOKGUpP2U6Yi5TVFJPS0VfSk9JTlRTX01BUFtlXV0sITEpLG5ldyBhKHRoaXMuX3NldFByb3AsW1wibWl0ZXJMaW1pdFwiLG51bGw9PWY/XCIxMFwiOmZdLCExKV0sdGhpcy5fc3Ryb2tlSWdub3JlU2NhbGU9Zyx0aGlzfSxjLmJlZ2luU3Ryb2tlPWZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLl9hY3RpdmUmJnRoaXMuX25ld1BhdGgoKSx0aGlzLl9zdHJva2VJbnN0cnVjdGlvbnM9Yj9bbmV3IGEodGhpcy5fc2V0UHJvcCxbXCJzdHJva2VTdHlsZVwiLGJdLCExKV06bnVsbCx0aGlzfSxjLmJlZ2luTGluZWFyR3JhZGllbnRTdHJva2U9ZnVuY3Rpb24oYixjLGQsZSxmLGcpe3RoaXMuX2FjdGl2ZSYmdGhpcy5fbmV3UGF0aCgpO2Zvcih2YXIgaD10aGlzLl9jdHguY3JlYXRlTGluZWFyR3JhZGllbnQoZCxlLGYsZyksaT0wLGo9Yi5sZW5ndGg7aj5pO2krKyloLmFkZENvbG9yU3RvcChjW2ldLGJbaV0pO3JldHVybiB0aGlzLl9zdHJva2VJbnN0cnVjdGlvbnM9W25ldyBhKHRoaXMuX3NldFByb3AsW1wic3Ryb2tlU3R5bGVcIixoXSwhMSldLHRoaXN9LGMuYmVnaW5SYWRpYWxHcmFkaWVudFN0cm9rZT1mdW5jdGlvbihiLGMsZCxlLGYsZyxoLGkpe3RoaXMuX2FjdGl2ZSYmdGhpcy5fbmV3UGF0aCgpO2Zvcih2YXIgaj10aGlzLl9jdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoZCxlLGYsZyxoLGkpLGs9MCxsPWIubGVuZ3RoO2w+aztrKyspai5hZGRDb2xvclN0b3AoY1trXSxiW2tdKTtyZXR1cm4gdGhpcy5fc3Ryb2tlSW5zdHJ1Y3Rpb25zPVtuZXcgYSh0aGlzLl9zZXRQcm9wLFtcInN0cm9rZVN0eWxlXCIsal0sITEpXSx0aGlzfSxjLmJlZ2luQml0bWFwU3Ryb2tlPWZ1bmN0aW9uKGIsYyl7dGhpcy5fYWN0aXZlJiZ0aGlzLl9uZXdQYXRoKCksYz1jfHxcIlwiO3ZhciBkPXRoaXMuX2N0eC5jcmVhdGVQYXR0ZXJuKGIsYyk7cmV0dXJuIHRoaXMuX3N0cm9rZUluc3RydWN0aW9ucz1bbmV3IGEodGhpcy5fc2V0UHJvcCxbXCJzdHJva2VTdHlsZVwiLGRdLCExKV0sdGhpc30sYy5lbmRTdHJva2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5iZWdpblN0cm9rZSgpLHRoaXN9LGMuY3VydmVUbz1jLnF1YWRyYXRpY0N1cnZlVG8sYy5kcmF3UmVjdD1jLnJlY3QsYy5kcmF3Um91bmRSZWN0PWZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIHRoaXMuZHJhd1JvdW5kUmVjdENvbXBsZXgoYSxiLGMsZCxlLGUsZSxlKSx0aGlzfSxjLmRyYXdSb3VuZFJlY3RDb21wbGV4PWZ1bmN0aW9uKGIsYyxkLGUsZixnLGgsaSl7dmFyIGo9KGU+ZD9kOmUpLzIsaz0wLGw9MCxtPTAsbj0wOzA+ZiYmKGYqPWs9LTEpLGY+aiYmKGY9aiksMD5nJiYoZyo9bD0tMSksZz5qJiYoZz1qKSwwPmgmJihoKj1tPS0xKSxoPmomJihoPWopLDA+aSYmKGkqPW49LTEpLGk+aiYmKGk9aiksdGhpcy5fZGlydHk9dGhpcy5fYWN0aXZlPSEwO3ZhciBvPXRoaXMuX2N0eC5hcmNUbyxwPXRoaXMuX2N0eC5saW5lVG87cmV0dXJuIHRoaXMuX2FjdGl2ZUluc3RydWN0aW9ucy5wdXNoKG5ldyBhKHRoaXMuX2N0eC5tb3ZlVG8sW2IrZC1nLGNdKSxuZXcgYShvLFtiK2QrZypsLGMtZypsLGIrZCxjK2csZ10pLG5ldyBhKHAsW2IrZCxjK2UtaF0pLG5ldyBhKG8sW2IrZCtoKm0sYytlK2gqbSxiK2QtaCxjK2UsaF0pLG5ldyBhKHAsW2IraSxjK2VdKSxuZXcgYShvLFtiLWkqbixjK2UraSpuLGIsYytlLWksaV0pLG5ldyBhKHAsW2IsYytmXSksbmV3IGEobyxbYi1mKmssYy1mKmssYitmLGMsZl0pLG5ldyBhKHRoaXMuX2N0eC5jbG9zZVBhdGgpKSx0aGlzfSxjLmRyYXdDaXJjbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aGlzLmFyYyhhLGIsYywwLDIqTWF0aC5QSSksdGhpc30sYy5kcmF3RWxsaXBzZT1mdW5jdGlvbihiLGMsZCxlKXt0aGlzLl9kaXJ0eT10aGlzLl9hY3RpdmU9ITA7dmFyIGY9LjU1MjI4NDgsZz1kLzIqZixoPWUvMipmLGk9YitkLGo9YytlLGs9YitkLzIsbD1jK2UvMjtyZXR1cm4gdGhpcy5fYWN0aXZlSW5zdHJ1Y3Rpb25zLnB1c2gobmV3IGEodGhpcy5fY3R4Lm1vdmVUbyxbYixsXSksbmV3IGEodGhpcy5fY3R4LmJlemllckN1cnZlVG8sW2IsbC1oLGstZyxjLGssY10pLG5ldyBhKHRoaXMuX2N0eC5iZXppZXJDdXJ2ZVRvLFtrK2csYyxpLGwtaCxpLGxdKSxuZXcgYSh0aGlzLl9jdHguYmV6aWVyQ3VydmVUbyxbaSxsK2gsaytnLGosayxqXSksbmV3IGEodGhpcy5fY3R4LmJlemllckN1cnZlVG8sW2stZyxqLGIsbCtoLGIsbF0pKSx0aGlzfSxjLmluamVjdD1mdW5jdGlvbihiLGMpe3JldHVybiB0aGlzLl9kaXJ0eT10aGlzLl9hY3RpdmU9ITAsdGhpcy5fYWN0aXZlSW5zdHJ1Y3Rpb25zLnB1c2gobmV3IGEoYixbY10pKSx0aGlzfSxjLmRyYXdQb2x5U3Rhcj1mdW5jdGlvbihiLGMsZCxlLGYsZyl7dGhpcy5fZGlydHk9dGhpcy5fYWN0aXZlPSEwLG51bGw9PWYmJihmPTApLGY9MS1mLG51bGw9PWc/Zz0wOmcvPTE4MC9NYXRoLlBJO3ZhciBoPU1hdGguUEkvZTt0aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnMucHVzaChuZXcgYSh0aGlzLl9jdHgubW92ZVRvLFtiK01hdGguY29zKGcpKmQsYytNYXRoLnNpbihnKSpkXSkpO2Zvcih2YXIgaT0wO2U+aTtpKyspZys9aCwxIT1mJiZ0aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnMucHVzaChuZXcgYSh0aGlzLl9jdHgubGluZVRvLFtiK01hdGguY29zKGcpKmQqZixjK01hdGguc2luKGcpKmQqZl0pKSxnKz1oLHRoaXMuX2FjdGl2ZUluc3RydWN0aW9ucy5wdXNoKG5ldyBhKHRoaXMuX2N0eC5saW5lVG8sW2IrTWF0aC5jb3MoZykqZCxjK01hdGguc2luKGcpKmRdKSk7cmV0dXJuIHRoaXN9LGMuZGVjb2RlUGF0aD1mdW5jdGlvbihhKXtmb3IodmFyIGM9W3RoaXMubW92ZVRvLHRoaXMubGluZVRvLHRoaXMucXVhZHJhdGljQ3VydmVUbyx0aGlzLmJlemllckN1cnZlVG8sdGhpcy5jbG9zZVBhdGhdLGQ9WzIsMiw0LDYsMF0sZT0wLGY9YS5sZW5ndGgsZz1bXSxoPTAsaT0wLGo9Yi5CQVNFXzY0O2Y+ZTspe3ZhciBrPWEuY2hhckF0KGUpLGw9altrXSxtPWw+PjMsbj1jW21dO2lmKCFufHwzJmwpdGhyb3dcImJhZCBwYXRoIGRhdGEgKEBcIitlK1wiKTogXCIrazt2YXIgbz1kW21dO218fChoPWk9MCksZy5sZW5ndGg9MCxlKys7Zm9yKHZhciBwPSgxJmw+PjIpKzIscT0wO28+cTtxKyspe3ZhciByPWpbYS5jaGFyQXQoZSldLHM9cj4+NT8tMToxO3I9KDMxJnIpPDw2fGpbYS5jaGFyQXQoZSsxKV0sMz09cCYmKHI9cjw8NnxqW2EuY2hhckF0KGUrMildKSxyPXMqci8xMCxxJTI/aD1yKz1oOmk9cis9aSxnW3FdPXIsZSs9cH1uLmFwcGx5KHRoaXMsZyl9cmV0dXJuIHRoaXN9LGMuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgYjtyZXR1cm4gYS5faW5zdHJ1Y3Rpb25zPXRoaXMuX2luc3RydWN0aW9ucy5zbGljZSgpLGEuX2FjdGl2ZUluc3RydWN0aW9ucz10aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnMuc2xpY2UoKSxhLl9vbGRJbnN0cnVjdGlvbnM9dGhpcy5fb2xkSW5zdHJ1Y3Rpb25zLnNsaWNlKCksdGhpcy5fZmlsbEluc3RydWN0aW9ucyYmKGEuX2ZpbGxJbnN0cnVjdGlvbnM9dGhpcy5fZmlsbEluc3RydWN0aW9ucy5zbGljZSgpKSx0aGlzLl9zdHJva2VJbnN0cnVjdGlvbnMmJihhLl9zdHJva2VJbnN0cnVjdGlvbnM9dGhpcy5fc3Ryb2tlSW5zdHJ1Y3Rpb25zLnNsaWNlKCkpLHRoaXMuX3N0cm9rZVN0eWxlSW5zdHJ1Y3Rpb25zJiYoYS5fc3Ryb2tlU3R5bGVJbnN0cnVjdGlvbnM9dGhpcy5fc3Ryb2tlU3R5bGVJbnN0cnVjdGlvbnMuc2xpY2UoKSksYS5fYWN0aXZlPXRoaXMuX2FjdGl2ZSxhLl9kaXJ0eT10aGlzLl9kaXJ0eSxhLl9maWxsTWF0cml4PXRoaXMuX2ZpbGxNYXRyaXgsYS5fc3Ryb2tlSWdub3JlU2NhbGU9dGhpcy5fc3Ryb2tlSWdub3JlU2NhbGUsYX0sYy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW0dyYXBoaWNzXVwifSxjLm10PWMubW92ZVRvLGMubHQ9Yy5saW5lVG8sYy5hdD1jLmFyY1RvLGMuYnQ9Yy5iZXppZXJDdXJ2ZVRvLGMucXQ9Yy5xdWFkcmF0aWNDdXJ2ZVRvLGMuYT1jLmFyYyxjLnI9Yy5yZWN0LGMuY3A9Yy5jbG9zZVBhdGgsYy5jPWMuY2xlYXIsYy5mPWMuYmVnaW5GaWxsLGMubGY9Yy5iZWdpbkxpbmVhckdyYWRpZW50RmlsbCxjLnJmPWMuYmVnaW5SYWRpYWxHcmFkaWVudEZpbGwsYy5iZj1jLmJlZ2luQml0bWFwRmlsbCxjLmVmPWMuZW5kRmlsbCxjLnNzPWMuc2V0U3Ryb2tlU3R5bGUsYy5zPWMuYmVnaW5TdHJva2UsYy5scz1jLmJlZ2luTGluZWFyR3JhZGllbnRTdHJva2UsYy5ycz1jLmJlZ2luUmFkaWFsR3JhZGllbnRTdHJva2UsYy5icz1jLmJlZ2luQml0bWFwU3Ryb2tlLGMuZXM9Yy5lbmRTdHJva2UsYy5kcj1jLmRyYXdSZWN0LGMucnI9Yy5kcmF3Um91bmRSZWN0LGMucmM9Yy5kcmF3Um91bmRSZWN0Q29tcGxleCxjLmRjPWMuZHJhd0NpcmNsZSxjLmRlPWMuZHJhd0VsbGlwc2UsYy5kcD1jLmRyYXdQb2x5U3RhcixjLnA9Yy5kZWNvZGVQYXRoLGMuX3VwZGF0ZUluc3RydWN0aW9ucz1mdW5jdGlvbigpe3RoaXMuX2luc3RydWN0aW9ucz10aGlzLl9vbGRJbnN0cnVjdGlvbnMuc2xpY2UoKSx0aGlzLl9pbnN0cnVjdGlvbnMucHVzaChiLmJlZ2luQ21kKSx0aGlzLl9hcHBlbmRJbnN0cnVjdGlvbnModGhpcy5fZmlsbEluc3RydWN0aW9ucyksdGhpcy5fYXBwZW5kSW5zdHJ1Y3Rpb25zKHRoaXMuX3N0cm9rZUluc3RydWN0aW9ucyksdGhpcy5fYXBwZW5kSW5zdHJ1Y3Rpb25zKHRoaXMuX3N0cm9rZUluc3RydWN0aW9ucyYmdGhpcy5fc3Ryb2tlU3R5bGVJbnN0cnVjdGlvbnMpLHRoaXMuX2FwcGVuZEluc3RydWN0aW9ucyh0aGlzLl9hY3RpdmVJbnN0cnVjdGlvbnMpLHRoaXMuX2ZpbGxJbnN0cnVjdGlvbnMmJnRoaXMuX2FwcGVuZERyYXcoYi5maWxsQ21kLHRoaXMuX2ZpbGxNYXRyaXgpLHRoaXMuX3N0cm9rZUluc3RydWN0aW9ucyYmdGhpcy5fYXBwZW5kRHJhdyhiLnN0cm9rZUNtZCx0aGlzLl9zdHJva2VJZ25vcmVTY2FsZSYmWzEsMCwwLDEsMCwwXSl9LGMuX2FwcGVuZEluc3RydWN0aW9ucz1mdW5jdGlvbihhKXthJiZ0aGlzLl9pbnN0cnVjdGlvbnMucHVzaC5hcHBseSh0aGlzLl9pbnN0cnVjdGlvbnMsYSl9LGMuX2FwcGVuZERyYXc9ZnVuY3Rpb24oYixjKXtjP3RoaXMuX2luc3RydWN0aW9ucy5wdXNoKG5ldyBhKHRoaXMuX2N0eC5zYXZlLFtdLCExKSxuZXcgYSh0aGlzLl9jdHgudHJhbnNmb3JtLGMsITEpLGIsbmV3IGEodGhpcy5fY3R4LnJlc3RvcmUsW10sITEpKTp0aGlzLl9pbnN0cnVjdGlvbnMucHVzaChiKX0sYy5fbmV3UGF0aD1mdW5jdGlvbigpe3RoaXMuX2RpcnR5JiZ0aGlzLl91cGRhdGVJbnN0cnVjdGlvbnMoKSx0aGlzLl9vbGRJbnN0cnVjdGlvbnM9dGhpcy5faW5zdHJ1Y3Rpb25zLHRoaXMuX2FjdGl2ZUluc3RydWN0aW9ucz1bXSx0aGlzLl9hY3RpdmU9dGhpcy5fZGlydHk9ITF9LGMuX3NldFByb3A9ZnVuY3Rpb24oYSxiKXt0aGlzW2FdPWJ9LGNyZWF0ZWpzLkdyYXBoaWNzPWJ9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe3ZhciBhPWZ1bmN0aW9uKCl7dGhpcy5pbml0aWFsaXplKCl9LGI9YS5wcm90b3R5cGU9bmV3IGNyZWF0ZWpzLkV2ZW50RGlzcGF0Y2hlcjthLnN1cHByZXNzQ3Jvc3NEb21haW5FcnJvcnM9ITE7dmFyIGM9Y3JlYXRlanMuY3JlYXRlQ2FudmFzP2NyZWF0ZWpzLmNyZWF0ZUNhbnZhcygpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7Yy5nZXRDb250ZXh0JiYoYS5faGl0VGVzdENhbnZhcz1jLGEuX2hpdFRlc3RDb250ZXh0PWMuZ2V0Q29udGV4dChcIjJkXCIpLGMud2lkdGg9Yy5oZWlnaHQ9MSksYS5fbmV4dENhY2hlSUQ9MSxiLmFscGhhPTEsYi5jYWNoZUNhbnZhcz1udWxsLGIuaWQ9LTEsYi5tb3VzZUVuYWJsZWQ9ITAsYi5uYW1lPW51bGwsYi5wYXJlbnQ9bnVsbCxiLnJlZ1g9MCxiLnJlZ1k9MCxiLnJvdGF0aW9uPTAsYi5zY2FsZVg9MSxiLnNjYWxlWT0xLGIuc2tld1g9MCxiLnNrZXdZPTAsYi5zaGFkb3c9bnVsbCxiLnZpc2libGU9ITAsYi54PTAsYi55PTAsYi5jb21wb3NpdGVPcGVyYXRpb249bnVsbCxiLnNuYXBUb1BpeGVsPSExLGIuZmlsdGVycz1udWxsLGIuY2FjaGVJRD0wLGIubWFzaz1udWxsLGIuaGl0QXJlYT1udWxsLGIuY3Vyc29yPW51bGwsYi5fY2FjaGVPZmZzZXRYPTAsYi5fY2FjaGVPZmZzZXRZPTAsYi5fY2FjaGVTY2FsZT0xLGIuX2NhY2hlRGF0YVVSTElEPTAsYi5fY2FjaGVEYXRhVVJMPW51bGwsYi5fbWF0cml4PW51bGwsYi5fcmVjdGFuZ2xlPW51bGwsYi5fYm91bmRzPW51bGwsYi5pbml0aWFsaXplPWZ1bmN0aW9uKCl7dGhpcy5pZD1jcmVhdGVqcy5VSUQuZ2V0KCksdGhpcy5fbWF0cml4PW5ldyBjcmVhdGVqcy5NYXRyaXgyRCx0aGlzLl9yZWN0YW5nbGU9bmV3IGNyZWF0ZWpzLlJlY3RhbmdsZX0sYi5pc1Zpc2libGU9ZnVuY3Rpb24oKXtyZXR1cm4hISh0aGlzLnZpc2libGUmJnRoaXMuYWxwaGE+MCYmMCE9dGhpcy5zY2FsZVgmJjAhPXRoaXMuc2NhbGVZKX0sYi5kcmF3PWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jYWNoZUNhbnZhcztpZihifHwhYylyZXR1cm4hMTt2YXIgZCxlPXRoaXMuX2NhY2hlU2NhbGUsZj10aGlzLl9jYWNoZU9mZnNldFgsZz10aGlzLl9jYWNoZU9mZnNldFk7cmV0dXJuKGQ9dGhpcy5fYXBwbHlGaWx0ZXJCb3VuZHMoZixnLDAsMCkpJiYoZj1kLngsZz1kLnkpLGEuZHJhd0ltYWdlKGMsZixnLGMud2lkdGgvZSxjLmhlaWdodC9lKSwhMH0sYi51cGRhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe3ZhciBiLGM9dGhpcy5tYXNrLGQ9dGhpcztjJiZjLmdyYXBoaWNzJiYhYy5ncmFwaGljcy5pc0VtcHR5KCkmJihiPWMuZ2V0TWF0cml4KGMuX21hdHJpeCksYS50cmFuc2Zvcm0oYi5hLGIuYixiLmMsYi5kLGIudHgsYi50eSksYy5ncmFwaGljcy5kcmF3QXNQYXRoKGEpLGEuY2xpcCgpLGIuaW52ZXJ0KCksYS50cmFuc2Zvcm0oYi5hLGIuYixiLmMsYi5kLGIudHgsYi50eSkpLGI9ZC5fbWF0cml4LmlkZW50aXR5KCkuYXBwZW5kVHJhbnNmb3JtKGQueCxkLnksZC5zY2FsZVgsZC5zY2FsZVksZC5yb3RhdGlvbixkLnNrZXdYLGQuc2tld1ksZC5yZWdYLGQucmVnWSksY3JlYXRlanMuU3RhZ2UuX3NuYXBUb1BpeGVsRW5hYmxlZCYmZC5zbmFwVG9QaXhlbD9hLnRyYW5zZm9ybShiLmEsYi5iLGIuYyxiLmQsMHxiLnR4Ky41LDB8Yi50eSsuNSk6YS50cmFuc2Zvcm0oYi5hLGIuYixiLmMsYi5kLGIudHgsYi50eSksYS5nbG9iYWxBbHBoYSo9ZC5hbHBoYSxkLmNvbXBvc2l0ZU9wZXJhdGlvbiYmKGEuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uPWQuY29tcG9zaXRlT3BlcmF0aW9uKSxkLnNoYWRvdyYmdGhpcy5fYXBwbHlTaGFkb3coYSxkLnNoYWRvdyl9LGIuY2FjaGU9ZnVuY3Rpb24oYSxiLGMsZCxlKXtlPWV8fDEsdGhpcy5jYWNoZUNhbnZhc3x8KHRoaXMuY2FjaGVDYW52YXM9Y3JlYXRlanMuY3JlYXRlQ2FudmFzP2NyZWF0ZWpzLmNyZWF0ZUNhbnZhcygpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikpLHRoaXMuX2NhY2hlV2lkdGg9Yyx0aGlzLl9jYWNoZUhlaWdodD1kLHRoaXMuX2NhY2hlT2Zmc2V0WD1hLHRoaXMuX2NhY2hlT2Zmc2V0WT1iLHRoaXMuX2NhY2hlU2NhbGU9ZSx0aGlzLnVwZGF0ZUNhY2hlKCl9LGIudXBkYXRlQ2FjaGU9ZnVuY3Rpb24oYil7dmFyIGMsZD10aGlzLmNhY2hlQ2FudmFzLGU9dGhpcy5fY2FjaGVTY2FsZSxmPXRoaXMuX2NhY2hlT2Zmc2V0WCplLGc9dGhpcy5fY2FjaGVPZmZzZXRZKmUsaD10aGlzLl9jYWNoZVdpZHRoLGk9dGhpcy5fY2FjaGVIZWlnaHQ7aWYoIWQpdGhyb3dcImNhY2hlKCkgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIHVwZGF0ZUNhY2hlKClcIjt2YXIgaj1kLmdldENvbnRleHQoXCIyZFwiKTsoYz10aGlzLl9hcHBseUZpbHRlckJvdW5kcyhmLGcsaCxpKSkmJihmPWMueCxnPWMueSxoPWMud2lkdGgsaT1jLmhlaWdodCksaD1NYXRoLmNlaWwoaCplKSxpPU1hdGguY2VpbChpKmUpLGghPWQud2lkdGh8fGkhPWQuaGVpZ2h0PyhkLndpZHRoPWgsZC5oZWlnaHQ9aSk6Ynx8ai5jbGVhclJlY3QoMCwwLGgrMSxpKzEpLGouc2F2ZSgpLGouZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uPWIsai5zZXRUcmFuc2Zvcm0oZSwwLDAsZSwtZiwtZyksdGhpcy5kcmF3KGosITApLHRoaXMuX2FwcGx5RmlsdGVycygpLGoucmVzdG9yZSgpLHRoaXMuY2FjaGVJRD1hLl9uZXh0Q2FjaGVJRCsrfSxiLnVuY2FjaGU9ZnVuY3Rpb24oKXt0aGlzLl9jYWNoZURhdGFVUkw9dGhpcy5jYWNoZUNhbnZhcz1udWxsLHRoaXMuY2FjaGVJRD10aGlzLl9jYWNoZU9mZnNldFg9dGhpcy5fY2FjaGVPZmZzZXRZPTAsdGhpcy5fY2FjaGVTY2FsZT0xfSxiLmdldENhY2hlRGF0YVVSTD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNhY2hlQ2FudmFzPyh0aGlzLmNhY2hlSUQhPXRoaXMuX2NhY2hlRGF0YVVSTElEJiYodGhpcy5fY2FjaGVEYXRhVVJMPXRoaXMuY2FjaGVDYW52YXMudG9EYXRhVVJMKCkpLHRoaXMuX2NhY2hlRGF0YVVSTCk6bnVsbH0sYi5nZXRTdGFnZT1mdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzO2EucGFyZW50OylhPWEucGFyZW50O3JldHVybiBhIGluc3RhbmNlb2YgY3JlYXRlanMuU3RhZ2U/YTpudWxsfSxiLmxvY2FsVG9HbG9iYWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmdldENvbmNhdGVuYXRlZE1hdHJpeCh0aGlzLl9tYXRyaXgpO3JldHVybiBudWxsPT1jP251bGw6KGMuYXBwZW5kKDEsMCwwLDEsYSxiKSxuZXcgY3JlYXRlanMuUG9pbnQoYy50eCxjLnR5KSl9LGIuZ2xvYmFsVG9Mb2NhbD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZ2V0Q29uY2F0ZW5hdGVkTWF0cml4KHRoaXMuX21hdHJpeCk7cmV0dXJuIG51bGw9PWM/bnVsbDooYy5pbnZlcnQoKSxjLmFwcGVuZCgxLDAsMCwxLGEsYiksbmV3IGNyZWF0ZWpzLlBvaW50KGMudHgsYy50eSkpfSxiLmxvY2FsVG9Mb2NhbD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5sb2NhbFRvR2xvYmFsKGEsYik7cmV0dXJuIGMuZ2xvYmFsVG9Mb2NhbChkLngsZC55KX0sYi5zZXRUcmFuc2Zvcm09ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGkpe3JldHVybiB0aGlzLng9YXx8MCx0aGlzLnk9Ynx8MCx0aGlzLnNjYWxlWD1udWxsPT1jPzE6Yyx0aGlzLnNjYWxlWT1udWxsPT1kPzE6ZCx0aGlzLnJvdGF0aW9uPWV8fDAsdGhpcy5za2V3WD1mfHwwLHRoaXMuc2tld1k9Z3x8MCx0aGlzLnJlZ1g9aHx8MCx0aGlzLnJlZ1k9aXx8MCx0aGlzfSxiLmdldE1hdHJpeD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybihhP2EuaWRlbnRpdHkoKTpuZXcgY3JlYXRlanMuTWF0cml4MkQpLmFwcGVuZFRyYW5zZm9ybShiLngsYi55LGIuc2NhbGVYLGIuc2NhbGVZLGIucm90YXRpb24sYi5za2V3WCxiLnNrZXdZLGIucmVnWCxiLnJlZ1kpLmFwcGVuZFByb3BlcnRpZXMoYi5hbHBoYSxiLnNoYWRvdyxiLmNvbXBvc2l0ZU9wZXJhdGlvbil9LGIuZ2V0Q29uY2F0ZW5hdGVkTWF0cml4PWZ1bmN0aW9uKGEpe2E/YS5pZGVudGl0eSgpOmE9bmV3IGNyZWF0ZWpzLk1hdHJpeDJEO2Zvcih2YXIgYj10aGlzO251bGwhPWI7KWEucHJlcGVuZFRyYW5zZm9ybShiLngsYi55LGIuc2NhbGVYLGIuc2NhbGVZLGIucm90YXRpb24sYi5za2V3WCxiLnNrZXdZLGIucmVnWCxiLnJlZ1kpLnByZXBlbmRQcm9wZXJ0aWVzKGIuYWxwaGEsYi5zaGFkb3csYi5jb21wb3NpdGVPcGVyYXRpb24pLGI9Yi5wYXJlbnQ7cmV0dXJuIGF9LGIuaGl0VGVzdD1mdW5jdGlvbihiLGMpe3ZhciBkPWEuX2hpdFRlc3RDb250ZXh0O2Quc2V0VHJhbnNmb3JtKDEsMCwwLDEsLWIsLWMpLHRoaXMuZHJhdyhkKTt2YXIgZT10aGlzLl90ZXN0SGl0KGQpO3JldHVybiBkLnNldFRyYW5zZm9ybSgxLDAsMCwxLDAsMCksZC5jbGVhclJlY3QoMCwwLDIsMiksZX0sYi5zZXQ9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiIGluIGEpdGhpc1tiXT1hW2JdO3JldHVybiB0aGlzfSxiLmdldEJvdW5kcz1mdW5jdGlvbigpe2lmKHRoaXMuX2JvdW5kcylyZXR1cm4gdGhpcy5fcmVjdGFuZ2xlLmNvcHkodGhpcy5fYm91bmRzKTt2YXIgYT10aGlzLmNhY2hlQ2FudmFzO2lmKGEpe3ZhciBiPXRoaXMuX2NhY2hlU2NhbGU7cmV0dXJuIHRoaXMuX3JlY3RhbmdsZS5pbml0aWFsaXplKHRoaXMuX2NhY2hlT2Zmc2V0WCx0aGlzLl9jYWNoZU9mZnNldFksYS53aWR0aC9iLGEuaGVpZ2h0L2IpfXJldHVybiBudWxsfSxiLmdldFRyYW5zZm9ybWVkQm91bmRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2dldEJvdW5kcygpfSxiLnNldEJvdW5kcz1mdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hJiYodGhpcy5fYm91bmRzPWEpLHRoaXMuX2JvdW5kcz0odGhpcy5fYm91bmRzfHxuZXcgY3JlYXRlanMuUmVjdGFuZ2xlKS5pbml0aWFsaXplKGEsYixjLGQpXG59LGIuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYj1uZXcgYTtyZXR1cm4gdGhpcy5jbG9uZVByb3BzKGIpLGJ9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltEaXNwbGF5T2JqZWN0IChuYW1lPVwiK3RoaXMubmFtZStcIildXCJ9LGIuY2xvbmVQcm9wcz1mdW5jdGlvbihhKXthLmFscGhhPXRoaXMuYWxwaGEsYS5uYW1lPXRoaXMubmFtZSxhLnJlZ1g9dGhpcy5yZWdYLGEucmVnWT10aGlzLnJlZ1ksYS5yb3RhdGlvbj10aGlzLnJvdGF0aW9uLGEuc2NhbGVYPXRoaXMuc2NhbGVYLGEuc2NhbGVZPXRoaXMuc2NhbGVZLGEuc2hhZG93PXRoaXMuc2hhZG93LGEuc2tld1g9dGhpcy5za2V3WCxhLnNrZXdZPXRoaXMuc2tld1ksYS52aXNpYmxlPXRoaXMudmlzaWJsZSxhLng9dGhpcy54LGEueT10aGlzLnksYS5fYm91bmRzPXRoaXMuX2JvdW5kcyxhLm1vdXNlRW5hYmxlZD10aGlzLm1vdXNlRW5hYmxlZCxhLmNvbXBvc2l0ZU9wZXJhdGlvbj10aGlzLmNvbXBvc2l0ZU9wZXJhdGlvbn0sYi5fYXBwbHlTaGFkb3c9ZnVuY3Rpb24oYSxiKXtiPWJ8fFNoYWRvdy5pZGVudGl0eSxhLnNoYWRvd0NvbG9yPWIuY29sb3IsYS5zaGFkb3dPZmZzZXRYPWIub2Zmc2V0WCxhLnNoYWRvd09mZnNldFk9Yi5vZmZzZXRZLGEuc2hhZG93Qmx1cj1iLmJsdXJ9LGIuX3RpY2s9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fbGlzdGVuZXJzO2lmKGImJmIudGljayl7dmFyIGM9bmV3IGNyZWF0ZWpzLkV2ZW50KFwidGlja1wiKTtjLnBhcmFtcz1hLHRoaXMuX2Rpc3BhdGNoRXZlbnQoYyx0aGlzLDIpfX0sYi5fdGVzdEhpdD1mdW5jdGlvbihiKXt0cnl7dmFyIGM9Yi5nZXRJbWFnZURhdGEoMCwwLDEsMSkuZGF0YVszXT4xfWNhdGNoKGQpe2lmKCFhLnN1cHByZXNzQ3Jvc3NEb21haW5FcnJvcnMpdGhyb3dcIkFuIGVycm9yIGhhcyBvY2N1cnJlZC4gVGhpcyBpcyBtb3N0IGxpa2VseSBkdWUgdG8gc2VjdXJpdHkgcmVzdHJpY3Rpb25zIG9uIHJlYWRpbmcgY2FudmFzIHBpeGVsIGRhdGEgd2l0aCBsb2NhbCBvciBjcm9zcy1kb21haW4gaW1hZ2VzLlwifXJldHVybiBjfSxiLl9hcHBseUZpbHRlcnM9ZnVuY3Rpb24oKXtpZih0aGlzLmZpbHRlcnMmJjAhPXRoaXMuZmlsdGVycy5sZW5ndGgmJnRoaXMuY2FjaGVDYW52YXMpZm9yKHZhciBhPXRoaXMuZmlsdGVycy5sZW5ndGgsYj10aGlzLmNhY2hlQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKSxjPXRoaXMuY2FjaGVDYW52YXMud2lkdGgsZD10aGlzLmNhY2hlQ2FudmFzLmhlaWdodCxlPTA7YT5lO2UrKyl0aGlzLmZpbHRlcnNbZV0uYXBwbHlGaWx0ZXIoYiwwLDAsYyxkKX0sYi5fYXBwbHlGaWx0ZXJCb3VuZHM9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnPXRoaXMuZmlsdGVycztpZihnJiYoZj1nLmxlbmd0aCkpe2Zvcih2YXIgaD0wO2Y+aDtoKyspe3ZhciBpPXRoaXMuZmlsdGVyc1toXSxqPWkuZ2V0Qm91bmRzJiZpLmdldEJvdW5kcygpO2omJihlfHwoZT10aGlzLl9yZWN0YW5nbGUuaW5pdGlhbGl6ZShhLGIsYyxkKSksZS54Kz1qLngsZS55Kz1qLnksZS53aWR0aCs9ai53aWR0aCxlLmhlaWdodCs9ai5oZWlnaHQpfXJldHVybiBlfX0sYi5fZ2V0Qm91bmRzPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuX3RyYW5zZm9ybUJvdW5kcyh0aGlzLmdldEJvdW5kcygpLGEsYil9LGIuX3RyYW5zZm9ybUJvdW5kcz1mdW5jdGlvbihhLGIsYyl7aWYoIWEpcmV0dXJuIGE7dmFyIGQ9YS54LGU9YS55LGY9YS53aWR0aCxnPWEuaGVpZ2h0LGg9Yz90aGlzLl9tYXRyaXguaWRlbnRpdHkoKTp0aGlzLmdldE1hdHJpeCh0aGlzLl9tYXRyaXgpOyhkfHxlKSYmaC5hcHBlbmRUcmFuc2Zvcm0oMCwwLDEsMSwwLDAsMCwtZCwtZSksYiYmaC5wcmVwZW5kTWF0cml4KGIpO3ZhciBpPWYqaC5hLGo9ZipoLmIsaz1nKmguYyxsPWcqaC5kLG09aC50eCxuPWgudHksbz1tLHA9bSxxPW4scj1uO3JldHVybihkPWkrbSk8bz9vPWQ6ZD5wJiYocD1kKSwoZD1pK2srbSk8bz9vPWQ6ZD5wJiYocD1kKSwoZD1rK20pPG8/bz1kOmQ+cCYmKHA9ZCksKGU9aituKTxxP3E9ZTplPnImJihyPWUpLChlPWorbCtuKTxxP3E9ZTplPnImJihyPWUpLChlPWwrbik8cT9xPWU6ZT5yJiYocj1lKSxhLmluaXRpYWxpemUobyxxLHAtbyxyLXEpfSxjcmVhdGVqcy5EaXNwbGF5T2JqZWN0PWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe3ZhciBhPWZ1bmN0aW9uKCl7dGhpcy5pbml0aWFsaXplKCl9LGI9YS5wcm90b3R5cGU9bmV3IGNyZWF0ZWpzLkRpc3BsYXlPYmplY3Q7Yi5jaGlsZHJlbj1udWxsLGIubW91c2VDaGlsZHJlbj0hMCxiLkRpc3BsYXlPYmplY3RfaW5pdGlhbGl6ZT1iLmluaXRpYWxpemUsYi5pbml0aWFsaXplPWZ1bmN0aW9uKCl7dGhpcy5EaXNwbGF5T2JqZWN0X2luaXRpYWxpemUoKSx0aGlzLmNoaWxkcmVuPVtdfSxiLmlzVmlzaWJsZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMuY2FjaGVDYW52YXN8fHRoaXMuY2hpbGRyZW4ubGVuZ3RoO3JldHVybiEhKHRoaXMudmlzaWJsZSYmdGhpcy5hbHBoYT4wJiYwIT10aGlzLnNjYWxlWCYmMCE9dGhpcy5zY2FsZVkmJmEpfSxiLkRpc3BsYXlPYmplY3RfZHJhdz1iLmRyYXcsYi5kcmF3PWZ1bmN0aW9uKGEsYil7aWYodGhpcy5EaXNwbGF5T2JqZWN0X2RyYXcoYSxiKSlyZXR1cm4hMDtmb3IodmFyIGM9dGhpcy5jaGlsZHJlbi5zbGljZSgwKSxkPTAsZT1jLmxlbmd0aDtlPmQ7ZCsrKXt2YXIgZj1jW2RdO2YuaXNWaXNpYmxlKCkmJihhLnNhdmUoKSxmLnVwZGF0ZUNvbnRleHQoYSksZi5kcmF3KGEpLGEucmVzdG9yZSgpKX1yZXR1cm4hMH0sYi5hZGRDaGlsZD1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBiPWFyZ3VtZW50cy5sZW5ndGg7aWYoYj4xKXtmb3IodmFyIGM9MDtiPmM7YysrKXRoaXMuYWRkQ2hpbGQoYXJndW1lbnRzW2NdKTtyZXR1cm4gYXJndW1lbnRzW2ItMV19cmV0dXJuIGEucGFyZW50JiZhLnBhcmVudC5yZW1vdmVDaGlsZChhKSxhLnBhcmVudD10aGlzLHRoaXMuY2hpbGRyZW4ucHVzaChhKSxhfSxiLmFkZENoaWxkQXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hcmd1bWVudHMubGVuZ3RoLGQ9YXJndW1lbnRzW2MtMV07aWYoMD5kfHxkPnRoaXMuY2hpbGRyZW4ubGVuZ3RoKXJldHVybiBhcmd1bWVudHNbYy0yXTtpZihjPjIpe2Zvcih2YXIgZT0wO2MtMT5lO2UrKyl0aGlzLmFkZENoaWxkQXQoYXJndW1lbnRzW2VdLGQrZSk7cmV0dXJuIGFyZ3VtZW50c1tjLTJdfXJldHVybiBhLnBhcmVudCYmYS5wYXJlbnQucmVtb3ZlQ2hpbGQoYSksYS5wYXJlbnQ9dGhpcyx0aGlzLmNoaWxkcmVuLnNwbGljZShiLDAsYSksYX0sYi5yZW1vdmVDaGlsZD1mdW5jdGlvbihhKXt2YXIgYj1hcmd1bWVudHMubGVuZ3RoO2lmKGI+MSl7Zm9yKHZhciBjPSEwLGQ9MDtiPmQ7ZCsrKWM9YyYmdGhpcy5yZW1vdmVDaGlsZChhcmd1bWVudHNbZF0pO3JldHVybiBjfXJldHVybiB0aGlzLnJlbW92ZUNoaWxkQXQoY3JlYXRlanMuaW5kZXhPZih0aGlzLmNoaWxkcmVuLGEpKX0sYi5yZW1vdmVDaGlsZEF0PWZ1bmN0aW9uKGEpe3ZhciBiPWFyZ3VtZW50cy5sZW5ndGg7aWYoYj4xKXtmb3IodmFyIGM9W10sZD0wO2I+ZDtkKyspY1tkXT1hcmd1bWVudHNbZF07Yy5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGItYX0pO2Zvcih2YXIgZT0hMCxkPTA7Yj5kO2QrKyllPWUmJnRoaXMucmVtb3ZlQ2hpbGRBdChjW2RdKTtyZXR1cm4gZX1pZigwPmF8fGE+dGhpcy5jaGlsZHJlbi5sZW5ndGgtMSlyZXR1cm4hMTt2YXIgZj10aGlzLmNoaWxkcmVuW2FdO3JldHVybiBmJiYoZi5wYXJlbnQ9bnVsbCksdGhpcy5jaGlsZHJlbi5zcGxpY2UoYSwxKSwhMH0sYi5yZW1vdmVBbGxDaGlsZHJlbj1mdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmNoaWxkcmVuO2EubGVuZ3RoOylhLnBvcCgpLnBhcmVudD1udWxsfSxiLmdldENoaWxkQXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuY2hpbGRyZW5bYV19LGIuZ2V0Q2hpbGRCeU5hbWU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuY2hpbGRyZW4sYz0wLGQ9Yi5sZW5ndGg7ZD5jO2MrKylpZihiW2NdLm5hbWU9PWEpcmV0dXJuIGJbY107cmV0dXJuIG51bGx9LGIuc29ydENoaWxkcmVuPWZ1bmN0aW9uKGEpe3RoaXMuY2hpbGRyZW4uc29ydChhKX0sYi5nZXRDaGlsZEluZGV4PWZ1bmN0aW9uKGEpe3JldHVybiBjcmVhdGVqcy5pbmRleE9mKHRoaXMuY2hpbGRyZW4sYSl9LGIuZ2V0TnVtQ2hpbGRyZW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGh9LGIuc3dhcENoaWxkcmVuQXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmNoaWxkcmVuLGQ9Y1thXSxlPWNbYl07ZCYmZSYmKGNbYV09ZSxjW2JdPWQpfSxiLnN3YXBDaGlsZHJlbj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYyxkLGU9dGhpcy5jaGlsZHJlbixmPTAsZz1lLmxlbmd0aDtnPmYmJihlW2ZdPT1hJiYoYz1mKSxlW2ZdPT1iJiYoZD1mKSxudWxsPT1jfHxudWxsPT1kKTtmKyspO2YhPWcmJihlW2NdPWIsZVtkXT1hKX0sYi5zZXRDaGlsZEluZGV4PWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jaGlsZHJlbixkPWMubGVuZ3RoO2lmKCEoYS5wYXJlbnQhPXRoaXN8fDA+Ynx8Yj49ZCkpe2Zvcih2YXIgZT0wO2Q+ZSYmY1tlXSE9YTtlKyspO2UhPWQmJmUhPWImJihjLnNwbGljZShlLDEpLGMuc3BsaWNlKGIsMCxhKSl9fSxiLmNvbnRhaW5zPWZ1bmN0aW9uKGEpe2Zvcig7YTspe2lmKGE9PXRoaXMpcmV0dXJuITA7YT1hLnBhcmVudH1yZXR1cm4hMX0sYi5oaXRUZXN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIG51bGwhPXRoaXMuZ2V0T2JqZWN0VW5kZXJQb2ludChhLGIpfSxiLmdldE9iamVjdHNVbmRlclBvaW50PWZ1bmN0aW9uKGEsYil7dmFyIGM9W10sZD10aGlzLmxvY2FsVG9HbG9iYWwoYSxiKTtyZXR1cm4gdGhpcy5fZ2V0T2JqZWN0c1VuZGVyUG9pbnQoZC54LGQueSxjKSxjfSxiLmdldE9iamVjdFVuZGVyUG9pbnQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmxvY2FsVG9HbG9iYWwoYSxiKTtyZXR1cm4gdGhpcy5fZ2V0T2JqZWN0c1VuZGVyUG9pbnQoYy54LGMueSl9LGIuRGlzcGxheU9iamVjdF9nZXRCb3VuZHM9Yi5nZXRCb3VuZHMsYi5nZXRCb3VuZHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZ2V0Qm91bmRzKG51bGwsITApfSxiLmdldFRyYW5zZm9ybWVkQm91bmRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2dldEJvdW5kcygpfSxiLmNsb25lPWZ1bmN0aW9uKGIpe3ZhciBjPW5ldyBhO2lmKHRoaXMuY2xvbmVQcm9wcyhjKSxiKWZvcih2YXIgZD1jLmNoaWxkcmVuPVtdLGU9MCxmPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2Y+ZTtlKyspe3ZhciBnPXRoaXMuY2hpbGRyZW5bZV0uY2xvbmUoYik7Zy5wYXJlbnQ9YyxkLnB1c2goZyl9cmV0dXJuIGN9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltDb250YWluZXIgKG5hbWU9XCIrdGhpcy5uYW1lK1wiKV1cIn0sYi5EaXNwbGF5T2JqZWN0X190aWNrPWIuX3RpY2ssYi5fdGljaz1mdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5jaGlsZHJlbi5sZW5ndGgtMTtiPj0wO2ItLSl7dmFyIGM9dGhpcy5jaGlsZHJlbltiXTtjLl90aWNrJiZjLl90aWNrKGEpfXRoaXMuRGlzcGxheU9iamVjdF9fdGljayhhKX0sYi5fZ2V0T2JqZWN0c1VuZGVyUG9pbnQ9ZnVuY3Rpb24oYixjLGQsZSl7Zm9yKHZhciBmPWNyZWF0ZWpzLkRpc3BsYXlPYmplY3QuX2hpdFRlc3RDb250ZXh0LGc9dGhpcy5fbWF0cml4LGg9dGhpcy5jaGlsZHJlbi5sZW5ndGgsaT1oLTE7aT49MDtpLS0pe3ZhciBqPXRoaXMuY2hpbGRyZW5baV0saz1lJiZqLmhpdEFyZWE7aWYoai52aXNpYmxlJiYoa3x8ai5pc1Zpc2libGUoKSkmJighZXx8ai5tb3VzZUVuYWJsZWQpKWlmKCFrJiZqIGluc3RhbmNlb2YgYSl7dmFyIGw9ai5fZ2V0T2JqZWN0c1VuZGVyUG9pbnQoYixjLGQsZSk7aWYoIWQmJmwpcmV0dXJuIGx9ZWxzZXtpZihqLmdldENvbmNhdGVuYXRlZE1hdHJpeChnKSxrJiYoZy5hcHBlbmRUcmFuc2Zvcm0oay54LGsueSxrLnNjYWxlWCxrLnNjYWxlWSxrLnJvdGF0aW9uLGsuc2tld1gsay5za2V3WSxrLnJlZ1gsay5yZWdZKSxnLmFscGhhPWsuYWxwaGEpLGYuZ2xvYmFsQWxwaGE9Zy5hbHBoYSxmLnNldFRyYW5zZm9ybShnLmEsZy5iLGcuYyxnLmQsZy50eC1iLGcudHktYyksKGt8fGopLmRyYXcoZiksIXRoaXMuX3Rlc3RIaXQoZikpY29udGludWU7aWYoZi5zZXRUcmFuc2Zvcm0oMSwwLDAsMSwwLDApLGYuY2xlYXJSZWN0KDAsMCwyLDIpLCFkKXJldHVybiBlJiYhdGhpcy5tb3VzZUNoaWxkcmVuP3RoaXM6ajtkLnB1c2goail9fXJldHVybiBudWxsfSxiLl9nZXRCb3VuZHM9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLkRpc3BsYXlPYmplY3RfZ2V0Qm91bmRzKCk7aWYoYylyZXR1cm4gdGhpcy5fdHJhbnNmb3JtQm91bmRzKGMsYSxiKTt2YXIgZCxlLGYsZyxoPWI/dGhpcy5fbWF0cml4LmlkZW50aXR5KCk6dGhpcy5nZXRNYXRyaXgodGhpcy5fbWF0cml4KTthJiZoLnByZXBlbmRNYXRyaXgoYSk7Zm9yKHZhciBpPXRoaXMuY2hpbGRyZW4ubGVuZ3RoLGo9MDtpPmo7aisrKXt2YXIgaz10aGlzLmNoaWxkcmVuW2pdO2lmKGsudmlzaWJsZSYmKGM9ay5fZ2V0Qm91bmRzKGgpKSl7dmFyIGw9Yy54LG09Yy55LG49bCtjLndpZHRoLG89bStjLmhlaWdodDsoZD5sfHxudWxsPT1kKSYmKGQ9bCksKG4+ZXx8bnVsbD09ZSkmJihlPW4pLChmPm18fG51bGw9PWYpJiYoZj1tKSwobz5nfHxudWxsPT1nKSYmKGc9byl9fXJldHVybiBudWxsPT1lP251bGw6dGhpcy5fcmVjdGFuZ2xlLmluaXRpYWxpemUoZCxmLGUtZCxnLWYpfSxjcmVhdGVqcy5Db250YWluZXI9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oYSl7dGhpcy5pbml0aWFsaXplKGEpfSxiPWEucHJvdG90eXBlPW5ldyBjcmVhdGVqcy5Db250YWluZXI7YS5fc25hcFRvUGl4ZWxFbmFibGVkPSExLGIuYXV0b0NsZWFyPSEwLGIuY2FudmFzPW51bGwsYi5tb3VzZVg9MCxiLm1vdXNlWT0wLGIuc25hcFRvUGl4ZWxFbmFibGVkPSExLGIubW91c2VJbkJvdW5kcz0hMSxiLnRpY2tPblVwZGF0ZT0hMCxiLm1vdXNlTW92ZU91dHNpZGU9ITEsYi5uZXh0U3RhZ2U9bnVsbCxiLl9wb2ludGVyRGF0YT1udWxsLGIuX3BvaW50ZXJDb3VudD0wLGIuX3ByaW1hcnlQb2ludGVySUQ9bnVsbCxiLl9tb3VzZU92ZXJJbnRlcnZhbElEPW51bGwsYi5Db250YWluZXJfaW5pdGlhbGl6ZT1iLmluaXRpYWxpemUsYi5pbml0aWFsaXplPWZ1bmN0aW9uKGEpe3RoaXMuQ29udGFpbmVyX2luaXRpYWxpemUoKSx0aGlzLmNhbnZhcz1cInN0cmluZ1wiPT10eXBlb2YgYT9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChhKTphLHRoaXMuX3BvaW50ZXJEYXRhPXt9LHRoaXMuZW5hYmxlRE9NRXZlbnRzKCEwKX0sYi51cGRhdGU9ZnVuY3Rpb24oKXtpZih0aGlzLmNhbnZhcyl7dGhpcy50aWNrT25VcGRhdGUmJih0aGlzLmRpc3BhdGNoRXZlbnQoXCJ0aWNrc3RhcnRcIiksdGhpcy5fdGljayhhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50czpudWxsKSx0aGlzLmRpc3BhdGNoRXZlbnQoXCJ0aWNrZW5kXCIpKSx0aGlzLmRpc3BhdGNoRXZlbnQoXCJkcmF3c3RhcnRcIiksYS5fc25hcFRvUGl4ZWxFbmFibGVkPXRoaXMuc25hcFRvUGl4ZWxFbmFibGVkLHRoaXMuYXV0b0NsZWFyJiZ0aGlzLmNsZWFyKCk7dmFyIGI9dGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO2Iuc2F2ZSgpLHRoaXMudXBkYXRlQ29udGV4dChiKSx0aGlzLmRyYXcoYiwhMSksYi5yZXN0b3JlKCksdGhpcy5kaXNwYXRjaEV2ZW50KFwiZHJhd2VuZFwiKX19LGIuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oYSl7XCJ0aWNrXCI9PWEudHlwZSYmdGhpcy51cGRhdGUoYSl9LGIuY2xlYXI9ZnVuY3Rpb24oKXtpZih0aGlzLmNhbnZhcyl7dmFyIGE9dGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO2Euc2V0VHJhbnNmb3JtKDEsMCwwLDEsMCwwKSxhLmNsZWFyUmVjdCgwLDAsdGhpcy5jYW52YXMud2lkdGgrMSx0aGlzLmNhbnZhcy5oZWlnaHQrMSl9fSxiLnRvRGF0YVVSTD1mdW5jdGlvbihhLGIpe2J8fChiPVwiaW1hZ2UvcG5nXCIpO3ZhciBjLGQ9dGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLGU9dGhpcy5jYW52YXMud2lkdGgsZj10aGlzLmNhbnZhcy5oZWlnaHQ7aWYoYSl7Yz1kLmdldEltYWdlRGF0YSgwLDAsZSxmKTt2YXIgZz1kLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbjtkLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj1cImRlc3RpbmF0aW9uLW92ZXJcIixkLmZpbGxTdHlsZT1hLGQuZmlsbFJlY3QoMCwwLGUsZil9dmFyIGg9dGhpcy5jYW52YXMudG9EYXRhVVJMKGIpO3JldHVybiBhJiYoZC5jbGVhclJlY3QoMCwwLGUrMSxmKzEpLGQucHV0SW1hZ2VEYXRhKGMsMCwwKSxkLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj1nKSxofSxiLmVuYWJsZU1vdXNlT3Zlcj1mdW5jdGlvbihhKXtpZih0aGlzLl9tb3VzZU92ZXJJbnRlcnZhbElEJiYoY2xlYXJJbnRlcnZhbCh0aGlzLl9tb3VzZU92ZXJJbnRlcnZhbElEKSx0aGlzLl9tb3VzZU92ZXJJbnRlcnZhbElEPW51bGwsMD09YSYmdGhpcy5fdGVzdE1vdXNlT3ZlcighMCkpLG51bGw9PWEpYT0yMDtlbHNlIGlmKDA+PWEpcmV0dXJuO3ZhciBiPXRoaXM7dGhpcy5fbW91c2VPdmVySW50ZXJ2YWxJRD1zZXRJbnRlcnZhbChmdW5jdGlvbigpe2IuX3Rlc3RNb3VzZU92ZXIoKX0sMWUzL01hdGgubWluKDUwLGEpKX0sYi5lbmFibGVET01FdmVudHM9ZnVuY3Rpb24oYSl7bnVsbD09YSYmKGE9ITApO3ZhciBiLGMsZD10aGlzLl9ldmVudExpc3RlbmVycztpZighYSYmZCl7Zm9yKGIgaW4gZCljPWRbYl0sYy50LnJlbW92ZUV2ZW50TGlzdGVuZXIoYixjLmYsITEpO3RoaXMuX2V2ZW50TGlzdGVuZXJzPW51bGx9ZWxzZSBpZihhJiYhZCYmdGhpcy5jYW52YXMpe3ZhciBlPXdpbmRvdy5hZGRFdmVudExpc3RlbmVyP3dpbmRvdzpkb2N1bWVudCxmPXRoaXM7ZD10aGlzLl9ldmVudExpc3RlbmVycz17fSxkLm1vdXNldXA9e3Q6ZSxmOmZ1bmN0aW9uKGEpe2YuX2hhbmRsZU1vdXNlVXAoYSl9fSxkLm1vdXNlbW92ZT17dDplLGY6ZnVuY3Rpb24oYSl7Zi5faGFuZGxlTW91c2VNb3ZlKGEpfX0sZC5kYmxjbGljaz17dDplLGY6ZnVuY3Rpb24oYSl7Zi5faGFuZGxlRG91YmxlQ2xpY2soYSl9fSxkLm1vdXNlZG93bj17dDp0aGlzLmNhbnZhcyxmOmZ1bmN0aW9uKGEpe2YuX2hhbmRsZU1vdXNlRG93bihhKX19O2ZvcihiIGluIGQpYz1kW2JdLGMudC5hZGRFdmVudExpc3RlbmVyKGIsYy5mLCExKX19LGIuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYj1uZXcgYShudWxsKTtyZXR1cm4gdGhpcy5jbG9uZVByb3BzKGIpLGJ9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltTdGFnZSAobmFtZT1cIit0aGlzLm5hbWUrXCIpXVwifSxiLl9nZXRFbGVtZW50UmVjdD1mdW5jdGlvbihhKXt2YXIgYjt0cnl7Yj1hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpfWNhdGNoKGMpe2I9e3RvcDphLm9mZnNldFRvcCxsZWZ0OmEub2Zmc2V0TGVmdCx3aWR0aDphLm9mZnNldFdpZHRoLGhlaWdodDphLm9mZnNldEhlaWdodH19dmFyIGQ9KHdpbmRvdy5wYWdlWE9mZnNldHx8ZG9jdW1lbnQuc2Nyb2xsTGVmdHx8MCktKGRvY3VtZW50LmNsaWVudExlZnR8fGRvY3VtZW50LmJvZHkuY2xpZW50TGVmdHx8MCksZT0od2luZG93LnBhZ2VZT2Zmc2V0fHxkb2N1bWVudC5zY3JvbGxUb3B8fDApLShkb2N1bWVudC5jbGllbnRUb3B8fGRvY3VtZW50LmJvZHkuY2xpZW50VG9wfHwwKSxmPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlP2dldENvbXB1dGVkU3R5bGUoYSk6YS5jdXJyZW50U3R5bGUsZz1wYXJzZUludChmLnBhZGRpbmdMZWZ0KStwYXJzZUludChmLmJvcmRlckxlZnRXaWR0aCksaD1wYXJzZUludChmLnBhZGRpbmdUb3ApK3BhcnNlSW50KGYuYm9yZGVyVG9wV2lkdGgpLGk9cGFyc2VJbnQoZi5wYWRkaW5nUmlnaHQpK3BhcnNlSW50KGYuYm9yZGVyUmlnaHRXaWR0aCksaj1wYXJzZUludChmLnBhZGRpbmdCb3R0b20pK3BhcnNlSW50KGYuYm9yZGVyQm90dG9tV2lkdGgpO3JldHVybntsZWZ0OmIubGVmdCtkK2cscmlnaHQ6Yi5yaWdodCtkLWksdG9wOmIudG9wK2UraCxib3R0b206Yi5ib3R0b20rZS1qfX0sYi5fZ2V0UG9pbnRlckRhdGE9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fcG9pbnRlckRhdGFbYV07cmV0dXJuIGJ8fChiPXRoaXMuX3BvaW50ZXJEYXRhW2FdPXt4OjAseTowfSxudWxsPT10aGlzLl9wcmltYXJ5UG9pbnRlcklEJiYodGhpcy5fcHJpbWFyeVBvaW50ZXJJRD1hKSksYn0sYi5faGFuZGxlTW91c2VNb3ZlPWZ1bmN0aW9uKGEpe2F8fChhPXdpbmRvdy5ldmVudCksdGhpcy5faGFuZGxlUG9pbnRlck1vdmUoLTEsYSxhLnBhZ2VYLGEucGFnZVkpfSxiLl9oYW5kbGVQb2ludGVyTW92ZT1mdW5jdGlvbihhLGIsYyxkKXtpZih0aGlzLmNhbnZhcyl7dmFyIGU9dGhpcy5fZ2V0UG9pbnRlckRhdGEoYSksZj1lLmluQm91bmRzO2lmKHRoaXMuX3VwZGF0ZVBvaW50ZXJQb3NpdGlvbihhLGIsYyxkKSxmfHxlLmluQm91bmRzfHx0aGlzLm1vdXNlTW92ZU91dHNpZGUpey0xPT1hJiZlLmluQm91bmRzPT0hZiYmdGhpcy5fZGlzcGF0Y2hNb3VzZUV2ZW50KHRoaXMsZj9cIm1vdXNlbGVhdmVcIjpcIm1vdXNlZW50ZXJcIiwhMSxhLGUsYiksdGhpcy5fZGlzcGF0Y2hNb3VzZUV2ZW50KHRoaXMsXCJzdGFnZW1vdXNlbW92ZVwiLCExLGEsZSxiKSx0aGlzLl9kaXNwYXRjaE1vdXNlRXZlbnQoZS50YXJnZXQsXCJwcmVzc21vdmVcIiwhMCxhLGUsYik7dmFyIGc9ZS5ldmVudDtnJiZnLmhhc0V2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIikmJmcuZGlzcGF0Y2hFdmVudChuZXcgY3JlYXRlanMuTW91c2VFdmVudChcIm1vdXNlbW92ZVwiLCExLCExLGUueCxlLnksYixhLGE9PXRoaXMuX3ByaW1hcnlQb2ludGVySUQsZS5yYXdYLGUucmF3WSksb1RhcmdldCksdGhpcy5uZXh0U3RhZ2UmJnRoaXMubmV4dFN0YWdlLl9oYW5kbGVQb2ludGVyTW92ZShhLGIsYyxkKX19fSxiLl91cGRhdGVQb2ludGVyUG9zaXRpb249ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcy5fZ2V0RWxlbWVudFJlY3QodGhpcy5jYW52YXMpO2MtPWUubGVmdCxkLT1lLnRvcDt2YXIgZj10aGlzLmNhbnZhcy53aWR0aCxnPXRoaXMuY2FudmFzLmhlaWdodDtjLz0oZS5yaWdodC1lLmxlZnQpL2YsZC89KGUuYm90dG9tLWUudG9wKS9nO3ZhciBoPXRoaXMuX2dldFBvaW50ZXJEYXRhKGEpOyhoLmluQm91bmRzPWM+PTAmJmQ+PTAmJmYtMT49YyYmZy0xPj1kKT8oaC54PWMsaC55PWQpOnRoaXMubW91c2VNb3ZlT3V0c2lkZSYmKGgueD0wPmM/MDpjPmYtMT9mLTE6YyxoLnk9MD5kPzA6ZD5nLTE/Zy0xOmQpLGgucG9zRXZ0T2JqPWIsaC5yYXdYPWMsaC5yYXdZPWQsYT09dGhpcy5fcHJpbWFyeVBvaW50ZXJJRCYmKHRoaXMubW91c2VYPWgueCx0aGlzLm1vdXNlWT1oLnksdGhpcy5tb3VzZUluQm91bmRzPWguaW5Cb3VuZHMpfSxiLl9oYW5kbGVNb3VzZVVwPWZ1bmN0aW9uKGEpe3RoaXMuX2hhbmRsZVBvaW50ZXJVcCgtMSxhLCExKX0sYi5faGFuZGxlUG9pbnRlclVwPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9nZXRQb2ludGVyRGF0YShhKTt0aGlzLl9kaXNwYXRjaE1vdXNlRXZlbnQodGhpcyxcInN0YWdlbW91c2V1cFwiLCExLGEsZCxiKTt2YXIgZT1kLnRhcmdldDtlJiYodGhpcy5fZ2V0T2JqZWN0c1VuZGVyUG9pbnQoZC54LGQueSxudWxsLCEwKT09ZSYmdGhpcy5fZGlzcGF0Y2hNb3VzZUV2ZW50KGUsXCJjbGlja1wiLCEwLGEsZCxiKSx0aGlzLl9kaXNwYXRjaE1vdXNlRXZlbnQoZSxcInByZXNzdXBcIiwhMCxhLGQsYikpO3ZhciBmPWQuZXZlbnQ7ZiYmZi5oYXNFdmVudExpc3RlbmVyKFwibW91c2V1cFwiKSYmZi5kaXNwYXRjaEV2ZW50KG5ldyBjcmVhdGVqcy5Nb3VzZUV2ZW50KFwibW91c2V1cFwiLCExLCExLGQueCxkLnksYixhLGE9PXRoaXMuX3ByaW1hcnlQb2ludGVySUQsZC5yYXdYLGQucmF3WSksZSksYz8oYT09dGhpcy5fcHJpbWFyeVBvaW50ZXJJRCYmKHRoaXMuX3ByaW1hcnlQb2ludGVySUQ9bnVsbCksZGVsZXRlIHRoaXMuX3BvaW50ZXJEYXRhW2FdKTpkLmV2ZW50PWQudGFyZ2V0PW51bGwsdGhpcy5uZXh0U3RhZ2UmJnRoaXMubmV4dFN0YWdlLl9oYW5kbGVQb2ludGVyVXAoYSxiLGMpfSxiLl9oYW5kbGVNb3VzZURvd249ZnVuY3Rpb24oYSl7dGhpcy5faGFuZGxlUG9pbnRlckRvd24oLTEsYSl9LGIuX2hhbmRsZVBvaW50ZXJEb3duPWZ1bmN0aW9uKGEsYixjLGQpe251bGwhPWQmJnRoaXMuX3VwZGF0ZVBvaW50ZXJQb3NpdGlvbihhLGIsYyxkKTt2YXIgZT10aGlzLl9nZXRQb2ludGVyRGF0YShhKTt0aGlzLl9kaXNwYXRjaE1vdXNlRXZlbnQodGhpcyxcInN0YWdlbW91c2Vkb3duXCIsITEsYSxlLGIpLGUudGFyZ2V0PXRoaXMuX2dldE9iamVjdHNVbmRlclBvaW50KGUueCxlLnksbnVsbCwhMCksdGhpcy5fZGlzcGF0Y2hNb3VzZUV2ZW50KGUudGFyZ2V0LFwibW91c2Vkb3duXCIsITAsYSxlLGIpLHRoaXMubmV4dFN0YWdlJiZ0aGlzLm5leHRTdGFnZS5faGFuZGxlUG9pbnRlckRvd24oYSxiLGMsZCl9LGIuX3Rlc3RNb3VzZU92ZXI9ZnVuY3Rpb24oYSl7aWYoLTE9PXRoaXMuX3ByaW1hcnlQb2ludGVySUQmJihhfHx0aGlzLm1vdXNlWCE9dGhpcy5fbW91c2VPdmVyWHx8dGhpcy5tb3VzZVkhPXRoaXMuX21vdXNlT3Zlcll8fCF0aGlzLm1vdXNlSW5Cb3VuZHMpKXt2YXIgYixjLGQsZSxmPXRoaXMuX2dldFBvaW50ZXJEYXRhKC0xKSxnPWYucG9zRXZ0T2JqLGg9LTEsaT1cIlwiOyhhfHx0aGlzLm1vdXNlSW5Cb3VuZHMmJmcmJmcudGFyZ2V0PT10aGlzLmNhbnZhcykmJihiPXRoaXMuX2dldE9iamVjdHNVbmRlclBvaW50KHRoaXMubW91c2VYLHRoaXMubW91c2VZLG51bGwsITApLHRoaXMuX21vdXNlT3Zlclg9dGhpcy5tb3VzZVgsdGhpcy5fbW91c2VPdmVyWT10aGlzLm1vdXNlWSk7dmFyIGo9dGhpcy5fbW91c2VPdmVyVGFyZ2V0fHxbXSxrPWpbai5sZW5ndGgtMV0sbD10aGlzLl9tb3VzZU92ZXJUYXJnZXQ9W107Zm9yKGM9YjtjOylsLnVuc2hpZnQoYyksbnVsbCE9Yy5jdXJzb3ImJihpPWMuY3Vyc29yKSxjPWMucGFyZW50O2Zvcih0aGlzLmNhbnZhcy5zdHlsZS5jdXJzb3I9aSxkPTAsZT1sLmxlbmd0aDtlPmQmJmxbZF09PWpbZF07ZCsrKWg9ZDtmb3IoayE9YiYmdGhpcy5fZGlzcGF0Y2hNb3VzZUV2ZW50KGssXCJtb3VzZW91dFwiLCEwLC0xLGYsZyksZD1qLmxlbmd0aC0xO2Q+aDtkLS0pdGhpcy5fZGlzcGF0Y2hNb3VzZUV2ZW50KGpbZF0sXCJyb2xsb3V0XCIsITEsLTEsZixnKTtmb3IoZD1sLmxlbmd0aC0xO2Q+aDtkLS0pdGhpcy5fZGlzcGF0Y2hNb3VzZUV2ZW50KGxbZF0sXCJyb2xsb3ZlclwiLCExLC0xLGYsZyk7ayE9YiYmdGhpcy5fZGlzcGF0Y2hNb3VzZUV2ZW50KGIsXCJtb3VzZW92ZXJcIiwhMCwtMSxmLGcpfX0sYi5faGFuZGxlRG91YmxlQ2xpY2s9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fZ2V0UG9pbnRlckRhdGEoLTEpLGM9dGhpcy5fZ2V0T2JqZWN0c1VuZGVyUG9pbnQoYi54LGIueSxudWxsLCEwKTt0aGlzLl9kaXNwYXRjaE1vdXNlRXZlbnQoYyxcImRibGNsaWNrXCIsITAsLTEsYixhKSx0aGlzLm5leHRTdGFnZSYmdGhpcy5uZXh0U3RhZ2UuX2hhbmRsZURvdWJsZUNsaWNrKGEpfSxiLl9kaXNwYXRjaE1vdXNlRXZlbnQ9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2lmKGEmJihjfHxhLmhhc0V2ZW50TGlzdGVuZXIoYikpKXt2YXIgZz1uZXcgY3JlYXRlanMuTW91c2VFdmVudChiLGMsITEsZS54LGUueSxmLGQsZD09dGhpcy5fcHJpbWFyeVBvaW50ZXJJRCxlLnJhd1gsZS5yYXdZKTthLmRpc3BhdGNoRXZlbnQoZyl9fSxjcmVhdGVqcy5TdGFnZT1hfSgpLHRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXt2YXIgYT1mdW5jdGlvbihhKXt0aGlzLmluaXRpYWxpemUoYSl9LGI9YS5wcm90b3R5cGU9bmV3IGNyZWF0ZWpzLkRpc3BsYXlPYmplY3Q7Yi5pbWFnZT1udWxsLGIuc25hcFRvUGl4ZWw9ITAsYi5zb3VyY2VSZWN0PW51bGwsYi5EaXNwbGF5T2JqZWN0X2luaXRpYWxpemU9Yi5pbml0aWFsaXplLGIuaW5pdGlhbGl6ZT1mdW5jdGlvbihhKXt0aGlzLkRpc3BsYXlPYmplY3RfaW5pdGlhbGl6ZSgpLFwic3RyaW5nXCI9PXR5cGVvZiBhPyh0aGlzLmltYWdlPW5ldyBJbWFnZSx0aGlzLmltYWdlLnNyYz1hKTp0aGlzLmltYWdlPWF9LGIuaXNWaXNpYmxlPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jYWNoZUNhbnZhc3x8dGhpcy5pbWFnZSYmKHRoaXMuaW1hZ2UuY29tcGxldGV8fHRoaXMuaW1hZ2UuZ2V0Q29udGV4dHx8dGhpcy5pbWFnZS5yZWFkeVN0YXRlPj0yKTtyZXR1cm4hISh0aGlzLnZpc2libGUmJnRoaXMuYWxwaGE+MCYmMCE9dGhpcy5zY2FsZVgmJjAhPXRoaXMuc2NhbGVZJiZhKX0sYi5EaXNwbGF5T2JqZWN0X2RyYXc9Yi5kcmF3LGIuZHJhdz1mdW5jdGlvbihhLGIpe2lmKHRoaXMuRGlzcGxheU9iamVjdF9kcmF3KGEsYikpcmV0dXJuITA7dmFyIGM9dGhpcy5zb3VyY2VSZWN0O3JldHVybiBjP2EuZHJhd0ltYWdlKHRoaXMuaW1hZ2UsYy54LGMueSxjLndpZHRoLGMuaGVpZ2h0LDAsMCxjLndpZHRoLGMuaGVpZ2h0KTphLmRyYXdJbWFnZSh0aGlzLmltYWdlLDAsMCksITB9LGIuRGlzcGxheU9iamVjdF9nZXRCb3VuZHM9Yi5nZXRCb3VuZHMsYi5nZXRCb3VuZHM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLkRpc3BsYXlPYmplY3RfZ2V0Qm91bmRzKCk7aWYoYSlyZXR1cm4gYTt2YXIgYj10aGlzLnNvdXJjZVJlY3R8fHRoaXMuaW1hZ2UsYz10aGlzLmltYWdlJiYodGhpcy5pbWFnZS5jb21wbGV0ZXx8dGhpcy5pbWFnZS5nZXRDb250ZXh0fHx0aGlzLmltYWdlLnJlYWR5U3RhdGU+PTIpO3JldHVybiBjP3RoaXMuX3JlY3RhbmdsZS5pbml0aWFsaXplKDAsMCxiLndpZHRoLGIuaGVpZ2h0KTpudWxsfSxiLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGI9bmV3IGEodGhpcy5pbWFnZSk7cmV0dXJuIHRoaXMuc291cmNlUmVjdCYmKGIuc291cmNlUmVjdD10aGlzLnNvdXJjZVJlY3QuY2xvbmUoKSksdGhpcy5jbG9uZVByb3BzKGIpLGJ9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltCaXRtYXAgKG5hbWU9XCIrdGhpcy5uYW1lK1wiKV1cIn0sY3JlYXRlanMuQml0bWFwPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEsYil7dGhpcy5pbml0aWFsaXplKGEsYil9LGI9YS5wcm90b3R5cGU9bmV3IGNyZWF0ZWpzLkRpc3BsYXlPYmplY3Q7Yi5jdXJyZW50RnJhbWU9MCxiLmN1cnJlbnRBbmltYXRpb249bnVsbCxiLnBhdXNlZD0hMCxiLnNwcml0ZVNoZWV0PW51bGwsYi5zbmFwVG9QaXhlbD0hMCxiLm9mZnNldD0wLGIuY3VycmVudEFuaW1hdGlvbkZyYW1lPTAsYi5mcmFtZXJhdGU9MCxiLl9hZHZhbmNlQ291bnQ9MCxiLl9hbmltYXRpb249bnVsbCxiLl9jdXJyZW50RnJhbWU9bnVsbCxiLkRpc3BsYXlPYmplY3RfaW5pdGlhbGl6ZT1iLmluaXRpYWxpemUsYi5pbml0aWFsaXplPWZ1bmN0aW9uKGEsYil7dGhpcy5EaXNwbGF5T2JqZWN0X2luaXRpYWxpemUoKSx0aGlzLnNwcml0ZVNoZWV0PWEsYiYmdGhpcy5nb3RvQW5kUGxheShiKX0sYi5pc1Zpc2libGU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNhY2hlQ2FudmFzfHx0aGlzLnNwcml0ZVNoZWV0LmNvbXBsZXRlO3JldHVybiEhKHRoaXMudmlzaWJsZSYmdGhpcy5hbHBoYT4wJiYwIT10aGlzLnNjYWxlWCYmMCE9dGhpcy5zY2FsZVkmJmEpfSxiLkRpc3BsYXlPYmplY3RfZHJhdz1iLmRyYXcsYi5kcmF3PWZ1bmN0aW9uKGEsYil7aWYodGhpcy5EaXNwbGF5T2JqZWN0X2RyYXcoYSxiKSlyZXR1cm4hMDt0aGlzLl9ub3JtYWxpemVGcmFtZSgpO3ZhciBjPXRoaXMuc3ByaXRlU2hlZXQuZ2V0RnJhbWUoMHx0aGlzLl9jdXJyZW50RnJhbWUpO2lmKCFjKXJldHVybiExO3ZhciBkPWMucmVjdDtyZXR1cm4gYS5kcmF3SW1hZ2UoYy5pbWFnZSxkLngsZC55LGQud2lkdGgsZC5oZWlnaHQsLWMucmVnWCwtYy5yZWdZLGQud2lkdGgsZC5oZWlnaHQpLCEwfSxiLnBsYXk9ZnVuY3Rpb24oKXt0aGlzLnBhdXNlZD0hMX0sYi5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5wYXVzZWQ9ITB9LGIuZ290b0FuZFBsYXk9ZnVuY3Rpb24oYSl7dGhpcy5wYXVzZWQ9ITEsdGhpcy5fZ290byhhKX0sYi5nb3RvQW5kU3RvcD1mdW5jdGlvbihhKXt0aGlzLnBhdXNlZD0hMCx0aGlzLl9nb3RvKGEpfSxiLmFkdmFuY2U9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fYW5pbWF0aW9uJiZ0aGlzLl9hbmltYXRpb24uc3BlZWR8fDEsYz10aGlzLmZyYW1lcmF0ZXx8dGhpcy5zcHJpdGVTaGVldC5mcmFtZXJhdGUsZD1jJiZudWxsIT1hP2EvKDFlMy9jKToxO3RoaXMuX2FuaW1hdGlvbj90aGlzLmN1cnJlbnRBbmltYXRpb25GcmFtZSs9ZCpiOnRoaXMuX2N1cnJlbnRGcmFtZSs9ZCpiLHRoaXMuX25vcm1hbGl6ZUZyYW1lKCl9LGIuRGlzcGxheU9iamVjdF9nZXRCb3VuZHM9Yi5nZXRCb3VuZHMsYi5nZXRCb3VuZHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5EaXNwbGF5T2JqZWN0X2dldEJvdW5kcygpfHx0aGlzLnNwcml0ZVNoZWV0LmdldEZyYW1lQm91bmRzKHRoaXMuY3VycmVudEZyYW1lLHRoaXMuX3JlY3RhbmdsZSl9LGIuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYj1uZXcgYSh0aGlzLnNwcml0ZVNoZWV0KTtyZXR1cm4gdGhpcy5jbG9uZVByb3BzKGIpLGJ9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltTcHJpdGUgKG5hbWU9XCIrdGhpcy5uYW1lK1wiKV1cIn0sYi5EaXNwbGF5T2JqZWN0X190aWNrPWIuX3RpY2ssYi5fdGljaz1mdW5jdGlvbihhKXt0aGlzLnBhdXNlZHx8dGhpcy5hZHZhbmNlKGEmJmFbMF0mJmFbMF0uZGVsdGEpLHRoaXMuRGlzcGxheU9iamVjdF9fdGljayhhKX0sYi5fbm9ybWFsaXplRnJhbWU9ZnVuY3Rpb24oKXt2YXIgYSxiPXRoaXMuX2FuaW1hdGlvbixjPXRoaXMucGF1c2VkLGQ9dGhpcy5fY3VycmVudEZyYW1lLGU9dGhpcy5jdXJyZW50QW5pbWF0aW9uRnJhbWU7aWYoYilpZihhPWIuZnJhbWVzLmxlbmd0aCwoMHxlKT49YSl7dmFyIGY9Yi5uZXh0O2lmKHRoaXMuX2Rpc3BhdGNoQW5pbWF0aW9uRW5kKGIsZCxjLGYsYS0xKSk7ZWxzZXtpZihmKXJldHVybiB0aGlzLl9nb3RvKGYsZS1hKTt0aGlzLnBhdXNlZD0hMCxlPXRoaXMuY3VycmVudEFuaW1hdGlvbkZyYW1lPWIuZnJhbWVzLmxlbmd0aC0xLHRoaXMuX2N1cnJlbnRGcmFtZT1iLmZyYW1lc1tlXX19ZWxzZSB0aGlzLl9jdXJyZW50RnJhbWU9Yi5mcmFtZXNbMHxlXTtlbHNlIGlmKGE9dGhpcy5zcHJpdGVTaGVldC5nZXROdW1GcmFtZXMoKSxkPj1hJiYhdGhpcy5fZGlzcGF0Y2hBbmltYXRpb25FbmQoYixkLGMsYS0xKSYmKHRoaXMuX2N1cnJlbnRGcmFtZS09YSk+PWEpcmV0dXJuIHRoaXMuX25vcm1hbGl6ZUZyYW1lKCk7dGhpcy5jdXJyZW50RnJhbWU9MHx0aGlzLl9jdXJyZW50RnJhbWV9LGIuX2Rpc3BhdGNoQW5pbWF0aW9uRW5kPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YT9hLm5hbWU6bnVsbDtpZih0aGlzLmhhc0V2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIikpe3ZhciBnPW5ldyBjcmVhdGVqcy5FdmVudChcImFuaW1hdGlvbmVuZFwiKTtnLm5hbWU9ZixnLm5leHQ9ZCx0aGlzLmRpc3BhdGNoRXZlbnQoZyl9cmV0dXJuIWMmJnRoaXMucGF1c2VkJiYodGhpcy5jdXJyZW50QW5pbWF0aW9uRnJhbWU9ZSksdGhpcy5wYXVzZWQhPWN8fHRoaXMuX2FuaW1hdGlvbiE9YXx8dGhpcy5fY3VycmVudEZyYW1lIT1ifSxiLkRpc3BsYXlPYmplY3RfY2xvbmVQcm9wcz1iLmNsb25lUHJvcHMsYi5jbG9uZVByb3BzPWZ1bmN0aW9uKGEpe3RoaXMuRGlzcGxheU9iamVjdF9jbG9uZVByb3BzKGEpLGEuY3VycmVudEZyYW1lPXRoaXMuY3VycmVudEZyYW1lLGEuX2N1cnJlbnRGcmFtZT10aGlzLl9jdXJyZW50RnJhbWUsYS5jdXJyZW50QW5pbWF0aW9uPXRoaXMuY3VycmVudEFuaW1hdGlvbixhLnBhdXNlZD10aGlzLnBhdXNlZCxhLl9hbmltYXRpb249dGhpcy5fYW5pbWF0aW9uLGEuY3VycmVudEFuaW1hdGlvbkZyYW1lPXRoaXMuY3VycmVudEFuaW1hdGlvbkZyYW1lLGEuZnJhbWVyYXRlPXRoaXMuZnJhbWVyYXRlfSxiLl9nb3RvPWZ1bmN0aW9uKGEsYil7aWYoaXNOYU4oYSkpe3ZhciBjPXRoaXMuc3ByaXRlU2hlZXQuZ2V0QW5pbWF0aW9uKGEpO2MmJih0aGlzLmN1cnJlbnRBbmltYXRpb25GcmFtZT1ifHwwLHRoaXMuX2FuaW1hdGlvbj1jLHRoaXMuY3VycmVudEFuaW1hdGlvbj1hLHRoaXMuX25vcm1hbGl6ZUZyYW1lKCkpfWVsc2UgdGhpcy5jdXJyZW50QW5pbWF0aW9uRnJhbWU9MCx0aGlzLmN1cnJlbnRBbmltYXRpb249dGhpcy5fYW5pbWF0aW9uPW51bGwsdGhpcy5fY3VycmVudEZyYW1lPWEsdGhpcy5fbm9ybWFsaXplRnJhbWUoKX0sY3JlYXRlanMuU3ByaXRlPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPVwiQml0bWFwQW5pbWF0aW9uIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3VyIG9mIFNwcml0ZS4gU2VlIFZFUlNJT05TIGZpbGUgZm9yIGluZm8gb24gY2hhbmdlcy5cIjtpZighY3JlYXRlanMuU3ByaXRlKXRocm93IGE7KGNyZWF0ZWpzLkJpdG1hcEFuaW1hdGlvbj1mdW5jdGlvbihiKXtjb25zb2xlLmxvZyhhKSx0aGlzLmluaXRpYWxpemUoYil9KS5wcm90b3R5cGU9bmV3IGNyZWF0ZWpzLlNwcml0ZX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oYSl7dGhpcy5pbml0aWFsaXplKGEpfSxiPWEucHJvdG90eXBlPW5ldyBjcmVhdGVqcy5EaXNwbGF5T2JqZWN0O2IuZ3JhcGhpY3M9bnVsbCxiLkRpc3BsYXlPYmplY3RfaW5pdGlhbGl6ZT1iLmluaXRpYWxpemUsYi5pbml0aWFsaXplPWZ1bmN0aW9uKGEpe3RoaXMuRGlzcGxheU9iamVjdF9pbml0aWFsaXplKCksdGhpcy5ncmFwaGljcz1hP2E6bmV3IGNyZWF0ZWpzLkdyYXBoaWNzfSxiLmlzVmlzaWJsZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMuY2FjaGVDYW52YXN8fHRoaXMuZ3JhcGhpY3MmJiF0aGlzLmdyYXBoaWNzLmlzRW1wdHkoKTtyZXR1cm4hISh0aGlzLnZpc2libGUmJnRoaXMuYWxwaGE+MCYmMCE9dGhpcy5zY2FsZVgmJjAhPXRoaXMuc2NhbGVZJiZhKX0sYi5EaXNwbGF5T2JqZWN0X2RyYXc9Yi5kcmF3LGIuZHJhdz1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLkRpc3BsYXlPYmplY3RfZHJhdyhhLGIpPyEwOih0aGlzLmdyYXBoaWNzLmRyYXcoYSksITApfSxiLmNsb25lPWZ1bmN0aW9uKGIpe3ZhciBjPW5ldyBhKGImJnRoaXMuZ3JhcGhpY3M/dGhpcy5ncmFwaGljcy5jbG9uZSgpOnRoaXMuZ3JhcGhpY3MpO3JldHVybiB0aGlzLmNsb25lUHJvcHMoYyksY30sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW1NoYXBlIChuYW1lPVwiK3RoaXMubmFtZStcIildXCJ9LGNyZWF0ZWpzLlNoYXBlPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmluaXRpYWxpemUoYSxiLGMpfSxiPWEucHJvdG90eXBlPW5ldyBjcmVhdGVqcy5EaXNwbGF5T2JqZWN0LGM9Y3JlYXRlanMuY3JlYXRlQ2FudmFzP2NyZWF0ZWpzLmNyZWF0ZUNhbnZhcygpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7Yy5nZXRDb250ZXh0JiYoYS5fd29ya2luZ0NvbnRleHQ9Yy5nZXRDb250ZXh0KFwiMmRcIiksYy53aWR0aD1jLmhlaWdodD0xKSxhLkhfT0ZGU0VUUz17c3RhcnQ6MCxsZWZ0OjAsY2VudGVyOi0uNSxlbmQ6LTEscmlnaHQ6LTF9LGEuVl9PRkZTRVRTPXt0b3A6MCxoYW5naW5nOi0uMDEsbWlkZGxlOi0uNCxhbHBoYWJldGljOi0uOCxpZGVvZ3JhcGhpYzotLjg1LGJvdHRvbTotMX0sYi50ZXh0PVwiXCIsYi5mb250PW51bGwsYi5jb2xvcj1udWxsLGIudGV4dEFsaWduPVwibGVmdFwiLGIudGV4dEJhc2VsaW5lPVwidG9wXCIsYi5tYXhXaWR0aD1udWxsLGIub3V0bGluZT0wLGIubGluZUhlaWdodD0wLGIubGluZVdpZHRoPW51bGwsYi5EaXNwbGF5T2JqZWN0X2luaXRpYWxpemU9Yi5pbml0aWFsaXplLGIuaW5pdGlhbGl6ZT1mdW5jdGlvbihhLGIsYyl7dGhpcy5EaXNwbGF5T2JqZWN0X2luaXRpYWxpemUoKSx0aGlzLnRleHQ9YSx0aGlzLmZvbnQ9Yix0aGlzLmNvbG9yPWN9LGIuaXNWaXNpYmxlPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jYWNoZUNhbnZhc3x8bnVsbCE9dGhpcy50ZXh0JiZcIlwiIT09dGhpcy50ZXh0O3JldHVybiEhKHRoaXMudmlzaWJsZSYmdGhpcy5hbHBoYT4wJiYwIT10aGlzLnNjYWxlWCYmMCE9dGhpcy5zY2FsZVkmJmEpfSxiLkRpc3BsYXlPYmplY3RfZHJhdz1iLmRyYXcsYi5kcmF3PWZ1bmN0aW9uKGEsYil7aWYodGhpcy5EaXNwbGF5T2JqZWN0X2RyYXcoYSxiKSlyZXR1cm4hMDt2YXIgYz10aGlzLmNvbG9yfHxcIiMwMDBcIjtyZXR1cm4gdGhpcy5vdXRsaW5lPyhhLnN0cm9rZVN0eWxlPWMsYS5saW5lV2lkdGg9MSp0aGlzLm91dGxpbmUpOmEuZmlsbFN0eWxlPWMsdGhpcy5fZHJhd1RleHQodGhpcy5fcHJlcENvbnRleHQoYSkpLCEwfSxiLmdldE1lYXN1cmVkV2lkdGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJlcENvbnRleHQoYS5fd29ya2luZ0NvbnRleHQpLm1lYXN1cmVUZXh0KHRoaXMudGV4dCkud2lkdGh9LGIuZ2V0TWVhc3VyZWRMaW5lSGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIDEuMip0aGlzLl9wcmVwQ29udGV4dChhLl93b3JraW5nQ29udGV4dCkubWVhc3VyZVRleHQoXCJNXCIpLndpZHRofSxiLmdldE1lYXN1cmVkSGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RyYXdUZXh0KG51bGwse30pLmhlaWdodH0sYi5EaXNwbGF5T2JqZWN0X2dldEJvdW5kcz1iLmdldEJvdW5kcyxiLmdldEJvdW5kcz1mdW5jdGlvbigpe3ZhciBiPXRoaXMuRGlzcGxheU9iamVjdF9nZXRCb3VuZHMoKTtpZihiKXJldHVybiBiO2lmKG51bGw9PXRoaXMudGV4dHx8XCJcIj09dGhpcy50ZXh0KXJldHVybiBudWxsO3ZhciBjPXRoaXMuX2RyYXdUZXh0KG51bGwse30pLGQ9dGhpcy5tYXhXaWR0aCYmdGhpcy5tYXhXaWR0aDxjLndpZHRoP3RoaXMubWF4V2lkdGg6Yy53aWR0aCxlPWQqYS5IX09GRlNFVFNbdGhpcy50ZXh0QWxpZ258fFwibGVmdFwiXSxmPXRoaXMubGluZUhlaWdodHx8dGhpcy5nZXRNZWFzdXJlZExpbmVIZWlnaHQoKSxnPWYqYS5WX09GRlNFVFNbdGhpcy50ZXh0QmFzZWxpbmV8fFwidG9wXCJdO3JldHVybiB0aGlzLl9yZWN0YW5nbGUuaW5pdGlhbGl6ZShlLGcsZCxjLmhlaWdodCl9LGIuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYj1uZXcgYSh0aGlzLnRleHQsdGhpcy5mb250LHRoaXMuY29sb3IpO3JldHVybiB0aGlzLmNsb25lUHJvcHMoYiksYn0sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW1RleHQgKHRleHQ9XCIrKHRoaXMudGV4dC5sZW5ndGg+MjA/dGhpcy50ZXh0LnN1YnN0cigwLDE3KStcIi4uLlwiOnRoaXMudGV4dCkrXCIpXVwifSxiLkRpc3BsYXlPYmplY3RfY2xvbmVQcm9wcz1iLmNsb25lUHJvcHMsYi5jbG9uZVByb3BzPWZ1bmN0aW9uKGEpe3RoaXMuRGlzcGxheU9iamVjdF9jbG9uZVByb3BzKGEpLGEudGV4dEFsaWduPXRoaXMudGV4dEFsaWduLGEudGV4dEJhc2VsaW5lPXRoaXMudGV4dEJhc2VsaW5lLGEubWF4V2lkdGg9dGhpcy5tYXhXaWR0aCxhLm91dGxpbmU9dGhpcy5vdXRsaW5lLGEubGluZUhlaWdodD10aGlzLmxpbmVIZWlnaHQsYS5saW5lV2lkdGg9dGhpcy5saW5lV2lkdGh9LGIuX3ByZXBDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBhLmZvbnQ9dGhpcy5mb250LGEudGV4dEFsaWduPXRoaXMudGV4dEFsaWdufHxcImxlZnRcIixhLnRleHRCYXNlbGluZT10aGlzLnRleHRCYXNlbGluZXx8XCJ0b3BcIixhfSxiLl9kcmF3VGV4dD1mdW5jdGlvbihiLGMpe3ZhciBkPSEhYjtkfHwoYj10aGlzLl9wcmVwQ29udGV4dChhLl93b3JraW5nQ29udGV4dCkpO2Zvcih2YXIgZT10aGlzLmxpbmVIZWlnaHR8fHRoaXMuZ2V0TWVhc3VyZWRMaW5lSGVpZ2h0KCksZj0wLGc9MCxoPVN0cmluZyh0aGlzLnRleHQpLnNwbGl0KC8oPzpcXHJcXG58XFxyfFxcbikvKSxpPTAsaj1oLmxlbmd0aDtqPmk7aSsrKXt2YXIgaz1oW2ldLGw9bnVsbDtpZihudWxsIT10aGlzLmxpbmVXaWR0aCYmKGw9Yi5tZWFzdXJlVGV4dChrKS53aWR0aCk+dGhpcy5saW5lV2lkdGgpe3ZhciBtPWsuc3BsaXQoLyhcXHMpLyk7az1tWzBdLGw9Yi5tZWFzdXJlVGV4dChrKS53aWR0aDtmb3IodmFyIG49MSxvPW0ubGVuZ3RoO28+bjtuKz0yKXt2YXIgcD1iLm1lYXN1cmVUZXh0KG1bbl0rbVtuKzFdKS53aWR0aDtsK3A+dGhpcy5saW5lV2lkdGg/KGQmJnRoaXMuX2RyYXdUZXh0TGluZShiLGssZyplKSxsPmYmJihmPWwpLGs9bVtuKzFdLGw9Yi5tZWFzdXJlVGV4dChrKS53aWR0aCxnKyspOihrKz1tW25dK21bbisxXSxsKz1wKX19ZCYmdGhpcy5fZHJhd1RleHRMaW5lKGIsayxnKmUpLGMmJm51bGw9PWwmJihsPWIubWVhc3VyZVRleHQoaykud2lkdGgpLGw+ZiYmKGY9bCksZysrfXJldHVybiBjJiYoYy5jb3VudD1nLGMud2lkdGg9ZixjLmhlaWdodD1nKmUpLGN9LGIuX2RyYXdUZXh0TGluZT1mdW5jdGlvbihhLGIsYyl7dGhpcy5vdXRsaW5lP2Euc3Ryb2tlVGV4dChiLDAsYyx0aGlzLm1heFdpZHRofHw2NTUzNSk6YS5maWxsVGV4dChiLDAsYyx0aGlzLm1heFdpZHRofHw2NTUzNSl9LGNyZWF0ZWpzLlRleHQ9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYShhLGIpe3RoaXMuaW5pdGlhbGl6ZShhLGIpfXZhciBiPWEucHJvdG90eXBlPW5ldyBjcmVhdGVqcy5EaXNwbGF5T2JqZWN0O2IudGV4dD1cIlwiLGIuc3ByaXRlU2hlZXQ9bnVsbCxiLmxpbmVIZWlnaHQ9MCxiLmxldHRlclNwYWNpbmc9MCxiLnNwYWNlV2lkdGg9MCxiLkRpc3BsYXlPYmplY3RfaW5pdGlhbGl6ZT1iLmluaXRpYWxpemUsYi5pbml0aWFsaXplPWZ1bmN0aW9uKGEsYil7dGhpcy5EaXNwbGF5T2JqZWN0X2luaXRpYWxpemUoKSx0aGlzLnRleHQ9YSx0aGlzLnNwcml0ZVNoZWV0PWJ9LGIuRGlzcGxheU9iamVjdF9kcmF3PWIuZHJhdyxiLmRyYXc9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5EaXNwbGF5T2JqZWN0X2RyYXcoYSxiKT8hMDoodGhpcy5fZHJhd1RleHQoYSksdm9pZCAwKX0sYi5pc1Zpc2libGU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNhY2hlQ2FudmFzfHx0aGlzLnNwcml0ZVNoZWV0JiZ0aGlzLnNwcml0ZVNoZWV0LmNvbXBsZXRlJiZ0aGlzLnRleHQ7cmV0dXJuISEodGhpcy52aXNpYmxlJiZ0aGlzLmFscGhhPjAmJjAhPXRoaXMuc2NhbGVYJiYwIT10aGlzLnNjYWxlWSYmYSl9LGIuZ2V0Qm91bmRzPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcmVjdGFuZ2xlO3JldHVybiB0aGlzLl9kcmF3VGV4dChudWxsLGEpLGEud2lkdGg/YTpudWxsfSxiLl9nZXRGcmFtZT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9Yi5nZXRBbmltYXRpb24oYSk7cmV0dXJuIGR8fChhIT0oYz1hLnRvVXBwZXJDYXNlKCkpfHxhIT0oYz1hLnRvTG93ZXJDYXNlKCkpfHwoYz1udWxsKSxjJiYoZD1iLmdldEFuaW1hdGlvbihjKSkpLGQmJmIuZ2V0RnJhbWUoZC5mcmFtZXNbMF0pfSxiLl9nZXRMaW5lSGVpZ2h0PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2dldEZyYW1lKFwiMVwiLGEpfHx0aGlzLl9nZXRGcmFtZShcIlRcIixhKXx8dGhpcy5fZ2V0RnJhbWUoXCJMXCIsYSl8fGEuZ2V0RnJhbWUoMCk7cmV0dXJuIGI/Yi5yZWN0LmhlaWdodDoxfSxiLl9nZXRTcGFjZVdpZHRoPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2dldEZyYW1lKFwiMVwiLGEpfHx0aGlzLl9nZXRGcmFtZShcImxcIixhKXx8dGhpcy5fZ2V0RnJhbWUoXCJlXCIsYSl8fHRoaXMuX2dldEZyYW1lKFwiYVwiLGEpfHxhLmdldEZyYW1lKDApO3JldHVybiBiP2IucmVjdC53aWR0aDoxfSxiLl9kcmF3VGV4dD1mdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmPTAsZz0wLGg9dGhpcy5zcGFjZVdpZHRoLGk9dGhpcy5saW5lSGVpZ2h0LGo9dGhpcy5zcHJpdGVTaGVldCxrPSEhdGhpcy5fZ2V0RnJhbWUoXCIgXCIsaik7a3x8MCE9aHx8KGg9dGhpcy5fZ2V0U3BhY2VXaWR0aChqKSksMD09aSYmKGk9dGhpcy5fZ2V0TGluZUhlaWdodChqKSk7Zm9yKHZhciBsPTAsbT0wLG49dGhpcy50ZXh0Lmxlbmd0aDtuPm07bSsrKXt2YXIgbz10aGlzLnRleHQuY2hhckF0KG0pO2lmKGt8fFwiIFwiIT1vKWlmKFwiXFxuXCIhPW8mJlwiXFxyXCIhPW8pe3ZhciBwPXRoaXMuX2dldEZyYW1lKG8saik7aWYocCl7dmFyIHE9cC5yZWN0O2U9cC5yZWdYLGM9cS53aWR0aCxhJiZhLmRyYXdJbWFnZShwLmltYWdlLHEueCxxLnksYyxkPXEuaGVpZ2h0LGYtZSxnLXAucmVnWSxjLGQpLGYrPWMrdGhpcy5sZXR0ZXJTcGFjaW5nfX1lbHNlXCJcXHJcIj09byYmXCJcXG5cIj09dGhpcy50ZXh0LmNoYXJBdChtKzEpJiZtKyssZi1lPmwmJihsPWYtZSksZj0wLGcrPWk7ZWxzZSBmKz1ofWYtZT5sJiYobD1mLWUpLGImJihiLndpZHRoPWwtdGhpcy5sZXR0ZXJTcGFjaW5nLGIuaGVpZ2h0PWcraSl9LGNyZWF0ZWpzLkJpdG1hcFRleHQ9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oKXt0aHJvd1wiU3ByaXRlU2hlZXRVdGlscyBjYW5ub3QgYmUgaW5zdGFudGlhdGVkXCJ9LGI9Y3JlYXRlanMuY3JlYXRlQ2FudmFzP2NyZWF0ZWpzLmNyZWF0ZUNhbnZhcygpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7Yi5nZXRDb250ZXh0JiYoYS5fd29ya2luZ0NhbnZhcz1iLGEuX3dvcmtpbmdDb250ZXh0PWIuZ2V0Q29udGV4dChcIjJkXCIpLGIud2lkdGg9Yi5oZWlnaHQ9MSksYS5hZGRGbGlwcGVkRnJhbWVzPWZ1bmN0aW9uKGIsYyxkLGUpe2lmKGN8fGR8fGUpe3ZhciBmPTA7YyYmYS5fZmxpcChiLCsrZiwhMCwhMSksZCYmYS5fZmxpcChiLCsrZiwhMSwhMCksZSYmYS5fZmxpcChiLCsrZiwhMCwhMCl9fSxhLmV4dHJhY3RGcmFtZT1mdW5jdGlvbihiLGMpe2lzTmFOKGMpJiYoYz1iLmdldEFuaW1hdGlvbihjKS5mcmFtZXNbMF0pO3ZhciBkPWIuZ2V0RnJhbWUoYyk7aWYoIWQpcmV0dXJuIG51bGw7dmFyIGU9ZC5yZWN0LGY9YS5fd29ya2luZ0NhbnZhcztmLndpZHRoPWUud2lkdGgsZi5oZWlnaHQ9ZS5oZWlnaHQsYS5fd29ya2luZ0NvbnRleHQuZHJhd0ltYWdlKGQuaW1hZ2UsZS54LGUueSxlLndpZHRoLGUuaGVpZ2h0LDAsMCxlLndpZHRoLGUuaGVpZ2h0KTt2YXIgZz1uZXcgSW1hZ2U7cmV0dXJuIGcuc3JjPWYudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpLGd9LGEubWVyZ2VBbHBoYT1mdW5jdGlvbihhLGIsYyl7Y3x8KGM9Y3JlYXRlanMuY3JlYXRlQ2FudmFzP2NyZWF0ZWpzLmNyZWF0ZUNhbnZhcygpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikpLGMud2lkdGg9TWF0aC5tYXgoYi53aWR0aCxhLndpZHRoKSxjLmhlaWdodD1NYXRoLm1heChiLmhlaWdodCxhLmhlaWdodCk7dmFyIGQ9Yy5nZXRDb250ZXh0KFwiMmRcIik7cmV0dXJuIGQuc2F2ZSgpLGQuZHJhd0ltYWdlKGEsMCwwKSxkLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj1cImRlc3RpbmF0aW9uLWluXCIsZC5kcmF3SW1hZ2UoYiwwLDApLGQucmVzdG9yZSgpLGN9LGEuX2ZsaXA9ZnVuY3Rpb24oYixjLGQsZSl7Zm9yKHZhciBmPWIuX2ltYWdlcyxnPWEuX3dvcmtpbmdDYW52YXMsaD1hLl93b3JraW5nQ29udGV4dCxpPWYubGVuZ3RoL2Msaj0wO2k+ajtqKyspe3ZhciBrPWZbal07ay5fX3RtcD1qLGguc2V0VHJhbnNmb3JtKDEsMCwwLDEsMCwwKSxoLmNsZWFyUmVjdCgwLDAsZy53aWR0aCsxLGcuaGVpZ2h0KzEpLGcud2lkdGg9ay53aWR0aCxnLmhlaWdodD1rLmhlaWdodCxoLnNldFRyYW5zZm9ybShkPy0xOjEsMCwwLGU/LTE6MSxkP2sud2lkdGg6MCxlP2suaGVpZ2h0OjApLGguZHJhd0ltYWdlKGssMCwwKTt2YXIgbD1uZXcgSW1hZ2U7bC5zcmM9Zy50b0RhdGFVUkwoXCJpbWFnZS9wbmdcIiksbC53aWR0aD1rLndpZHRoLGwuaGVpZ2h0PWsuaGVpZ2h0LGYucHVzaChsKX12YXIgbT1iLl9mcmFtZXMsbj1tLmxlbmd0aC9jO2ZvcihqPTA7bj5qO2orKyl7az1tW2pdO3ZhciBvPWsucmVjdC5jbG9uZSgpO2w9ZltrLmltYWdlLl9fdG1wK2kqY107dmFyIHA9e2ltYWdlOmwscmVjdDpvLHJlZ1g6ay5yZWdYLHJlZ1k6ay5yZWdZfTtkJiYoby54PWwud2lkdGgtby54LW8ud2lkdGgscC5yZWdYPW8ud2lkdGgtay5yZWdYKSxlJiYoby55PWwuaGVpZ2h0LW8ueS1vLmhlaWdodCxwLnJlZ1k9by5oZWlnaHQtay5yZWdZKSxtLnB1c2gocCl9dmFyIHE9XCJfXCIrKGQ/XCJoXCI6XCJcIikrKGU/XCJ2XCI6XCJcIikscj1iLl9hbmltYXRpb25zLHM9Yi5fZGF0YSx0PXIubGVuZ3RoL2M7Zm9yKGo9MDt0Pmo7aisrKXt2YXIgdT1yW2pdO2s9c1t1XTt2YXIgdj17bmFtZTp1K3EsZnJlcXVlbmN5OmsuZnJlcXVlbmN5LG5leHQ6ay5uZXh0LGZyYW1lczpbXX07ay5uZXh0JiYodi5uZXh0Kz1xKSxtPWsuZnJhbWVzO2Zvcih2YXIgdz0wLHg9bS5sZW5ndGg7eD53O3crKyl2LmZyYW1lcy5wdXNoKG1bd10rbipjKTtzW3YubmFtZV09dixyLnB1c2godi5uYW1lKX19LGNyZWF0ZWpzLlNwcml0ZVNoZWV0VXRpbHM9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oKXt0aGlzLmluaXRpYWxpemUoKX0sYj1hLnByb3RvdHlwZT1uZXcgY3JlYXRlanMuRXZlbnREaXNwYXRjaGVyO2EuRVJSX0RJTUVOU0lPTlM9XCJmcmFtZSBkaW1lbnNpb25zIGV4Y2VlZCBtYXggc3ByaXRlc2hlZXQgZGltZW5zaW9uc1wiLGEuRVJSX1JVTk5JTkc9XCJhIGJ1aWxkIGlzIGFscmVhZHkgcnVubmluZ1wiLGIubWF4V2lkdGg9MjA0OCxiLm1heEhlaWdodD0yMDQ4LGIuc3ByaXRlU2hlZXQ9bnVsbCxiLnNjYWxlPTEsYi5wYWRkaW5nPTEsYi50aW1lU2xpY2U9LjMsYi5wcm9ncmVzcz0tMSxiLl9mcmFtZXM9bnVsbCxiLl9hbmltYXRpb25zPW51bGwsYi5fZGF0YT1udWxsLGIuX25leHRGcmFtZUluZGV4PTAsYi5faW5kZXg9MCxiLl90aW1lcklEPW51bGwsYi5fc2NhbGU9MSxiLmluaXRpYWxpemU9ZnVuY3Rpb24oKXt0aGlzLl9mcmFtZXM9W10sdGhpcy5fYW5pbWF0aW9ucz17fX0sYi5hZGRGcmFtZT1mdW5jdGlvbihiLGMsZCxlLGYsZyl7aWYodGhpcy5fZGF0YSl0aHJvdyBhLkVSUl9SVU5OSU5HO3ZhciBoPWN8fGIuYm91bmRzfHxiLm5vbWluYWxCb3VuZHM7cmV0dXJuIWgmJmIuZ2V0Qm91bmRzJiYoaD1iLmdldEJvdW5kcygpKSxoPyhkPWR8fDEsdGhpcy5fZnJhbWVzLnB1c2goe3NvdXJjZTpiLHNvdXJjZVJlY3Q6aCxzY2FsZTpkLGZ1bmN0OmUscGFyYW1zOmYsc2NvcGU6ZyxpbmRleDp0aGlzLl9mcmFtZXMubGVuZ3RoLGhlaWdodDpoLmhlaWdodCpkfSktMSk6bnVsbH0sYi5hZGRBbmltYXRpb249ZnVuY3Rpb24oYixjLGQsZSl7aWYodGhpcy5fZGF0YSl0aHJvdyBhLkVSUl9SVU5OSU5HO3RoaXMuX2FuaW1hdGlvbnNbYl09e2ZyYW1lczpjLG5leHQ6ZCxmcmVxdWVuY3k6ZX19LGIuYWRkTW92aWVDbGlwPWZ1bmN0aW9uKGIsYyxkKXtpZih0aGlzLl9kYXRhKXRocm93IGEuRVJSX1JVTk5JTkc7dmFyIGU9Yi5mcmFtZUJvdW5kcyxmPWN8fGIuYm91bmRzfHxiLm5vbWluYWxCb3VuZHM7aWYoIWYmJmIuZ2V0Qm91bmRzJiYoZj1iLmdldEJvdW5kcygpKSwhZiYmIWUpcmV0dXJuIG51bGw7Zm9yKHZhciBnPXRoaXMuX2ZyYW1lcy5sZW5ndGgsaD1iLnRpbWVsaW5lLmR1cmF0aW9uLGk9MDtoPmk7aSsrKXt2YXIgaj1lJiZlW2ldP2VbaV06Zjt0aGlzLmFkZEZyYW1lKGIsaixkLGZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYWN0aW9uc0VuYWJsZWQ7dGhpcy5hY3Rpb25zRW5hYmxlZD0hMSx0aGlzLmdvdG9BbmRTdG9wKGEpLHRoaXMuYWN0aW9uc0VuYWJsZWQ9Yn0sW2ldLGIpfXZhciBrPWIudGltZWxpbmUuX2xhYmVscyxsPVtdO2Zvcih2YXIgbSBpbiBrKWwucHVzaCh7aW5kZXg6a1ttXSxsYWJlbDptfSk7aWYobC5sZW5ndGgpe2wuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBhLmluZGV4LWIuaW5kZXh9KTtmb3IodmFyIGk9MCxuPWwubGVuZ3RoO24+aTtpKyspe2Zvcih2YXIgbz1sW2ldLmxhYmVsLHA9ZytsW2ldLmluZGV4LHE9ZysoaT09bi0xP2g6bFtpKzFdLmluZGV4KSxyPVtdLHM9cDtxPnM7cysrKXIucHVzaChzKTt0aGlzLmFkZEFuaW1hdGlvbihvLHIsITApfX19LGIuYnVpbGQ9ZnVuY3Rpb24oKXtpZih0aGlzLl9kYXRhKXRocm93IGEuRVJSX1JVTk5JTkc7Zm9yKHRoaXMuX3N0YXJ0QnVpbGQoKTt0aGlzLl9kcmF3TmV4dCgpOyk7cmV0dXJuIHRoaXMuX2VuZEJ1aWxkKCksdGhpcy5zcHJpdGVTaGVldH0sYi5idWlsZEFzeW5jPWZ1bmN0aW9uKGIpe2lmKHRoaXMuX2RhdGEpdGhyb3cgYS5FUlJfUlVOTklORzt0aGlzLnRpbWVTbGljZT1iLHRoaXMuX3N0YXJ0QnVpbGQoKTt2YXIgYz10aGlzO3RoaXMuX3RpbWVySUQ9c2V0VGltZW91dChmdW5jdGlvbigpe2MuX3J1bigpfSw1MC01MCpNYXRoLm1heCguMDEsTWF0aC5taW4oLjk5LHRoaXMudGltZVNsaWNlfHwuMykpKX0sYi5zdG9wQXN5bmM9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5fdGltZXJJRCksdGhpcy5fZGF0YT1udWxsfSxiLmNsb25lPWZ1bmN0aW9uKCl7dGhyb3dcIlNwcml0ZVNoZWV0QnVpbGRlciBjYW5ub3QgYmUgY2xvbmVkLlwifSxiLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbU3ByaXRlU2hlZXRCdWlsZGVyXVwifSxiLl9zdGFydEJ1aWxkPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5wYWRkaW5nfHwwO3RoaXMucHJvZ3Jlc3M9MCx0aGlzLnNwcml0ZVNoZWV0PW51bGwsdGhpcy5faW5kZXg9MCx0aGlzLl9zY2FsZT10aGlzLnNjYWxlO3ZhciBjPVtdO3RoaXMuX2RhdGE9e2ltYWdlczpbXSxmcmFtZXM6YyxhbmltYXRpb25zOnRoaXMuX2FuaW1hdGlvbnN9O3ZhciBkPXRoaXMuX2ZyYW1lcy5zbGljZSgpO2lmKGQuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBhLmhlaWdodDw9Yi5oZWlnaHQ/LTE6MX0pLGRbZC5sZW5ndGgtMV0uaGVpZ2h0KzIqYj50aGlzLm1heEhlaWdodCl0aHJvdyBhLkVSUl9ESU1FTlNJT05TO2Zvcih2YXIgZT0wLGY9MCxnPTA7ZC5sZW5ndGg7KXt2YXIgaD10aGlzLl9maWxsUm93KGQsZSxnLGMsYik7aWYoaC53PmYmJihmPWgudyksZSs9aC5oLCFoLmh8fCFkLmxlbmd0aCl7dmFyIGk9Y3JlYXRlanMuY3JlYXRlQ2FudmFzP2NyZWF0ZWpzLmNyZWF0ZUNhbnZhcygpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7aS53aWR0aD10aGlzLl9nZXRTaXplKGYsdGhpcy5tYXhXaWR0aCksaS5oZWlnaHQ9dGhpcy5fZ2V0U2l6ZShlLHRoaXMubWF4SGVpZ2h0KSx0aGlzLl9kYXRhLmltYWdlc1tnXT1pLGguaHx8KGY9ZT0wLGcrKyl9fX0sYi5fZ2V0U2l6ZT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz00O01hdGgucG93KDIsKytjKTxhOyk7cmV0dXJuIE1hdGgubWluKGIsTWF0aC5wb3coMixjKSl9LGIuX2ZpbGxSb3c9ZnVuY3Rpb24oYixjLGQsZSxmKXt2YXIgZz10aGlzLm1heFdpZHRoLGg9dGhpcy5tYXhIZWlnaHQ7Yys9Zjtmb3IodmFyIGk9aC1jLGo9ZixrPTAsbD1iLmxlbmd0aC0xO2w+PTA7bC0tKXt2YXIgbT1iW2xdLG49dGhpcy5fc2NhbGUqbS5zY2FsZSxvPW0uc291cmNlUmVjdCxwPW0uc291cmNlLHE9TWF0aC5mbG9vcihuKm8ueC1mKSxyPU1hdGguZmxvb3IobipvLnktZikscz1NYXRoLmNlaWwobipvLmhlaWdodCsyKmYpLHQ9TWF0aC5jZWlsKG4qby53aWR0aCsyKmYpO2lmKHQ+Zyl0aHJvdyBhLkVSUl9ESU1FTlNJT05TO3M+aXx8ait0Pmd8fChtLmltZz1kLG0ucmVjdD1uZXcgY3JlYXRlanMuUmVjdGFuZ2xlKGosYyx0LHMpLGs9a3x8cyxiLnNwbGljZShsLDEpLGVbbS5pbmRleF09W2osYyx0LHMsZCxNYXRoLnJvdW5kKC1xK24qcC5yZWdYLWYpLE1hdGgucm91bmQoLXIrbipwLnJlZ1ktZildLGorPXQpfXJldHVybnt3OmosaDprfX0sYi5fZW5kQnVpbGQ9ZnVuY3Rpb24oKXt0aGlzLnNwcml0ZVNoZWV0PW5ldyBjcmVhdGVqcy5TcHJpdGVTaGVldCh0aGlzLl9kYXRhKSx0aGlzLl9kYXRhPW51bGwsdGhpcy5wcm9ncmVzcz0xLHRoaXMuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpfSxiLl9ydW49ZnVuY3Rpb24oKXtmb3IodmFyIGE9NTAqTWF0aC5tYXgoLjAxLE1hdGgubWluKC45OSx0aGlzLnRpbWVTbGljZXx8LjMpKSxiPShuZXcgRGF0ZSkuZ2V0VGltZSgpK2EsYz0hMTtiPihuZXcgRGF0ZSkuZ2V0VGltZSgpOylpZighdGhpcy5fZHJhd05leHQoKSl7Yz0hMDticmVha31pZihjKXRoaXMuX2VuZEJ1aWxkKCk7ZWxzZXt2YXIgZD10aGlzO3RoaXMuX3RpbWVySUQ9c2V0VGltZW91dChmdW5jdGlvbigpe2QuX3J1bigpfSw1MC1hKX12YXIgZT10aGlzLnByb2dyZXNzPXRoaXMuX2luZGV4L3RoaXMuX2ZyYW1lcy5sZW5ndGg7aWYodGhpcy5oYXNFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIikpe3ZhciBmPW5ldyBjcmVhdGVqcy5FdmVudChcInByb2dyZXNzXCIpO2YucHJvZ3Jlc3M9ZSx0aGlzLmRpc3BhdGNoRXZlbnQoZil9fSxiLl9kcmF3TmV4dD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ZyYW1lc1t0aGlzLl9pbmRleF0sYj1hLnNjYWxlKnRoaXMuX3NjYWxlLGM9YS5yZWN0LGQ9YS5zb3VyY2VSZWN0LGU9dGhpcy5fZGF0YS5pbWFnZXNbYS5pbWddLGY9ZS5nZXRDb250ZXh0KFwiMmRcIik7cmV0dXJuIGEuZnVuY3QmJmEuZnVuY3QuYXBwbHkoYS5zY29wZSxhLnBhcmFtcyksZi5zYXZlKCksZi5iZWdpblBhdGgoKSxmLnJlY3QoYy54LGMueSxjLndpZHRoLGMuaGVpZ2h0KSxmLmNsaXAoKSxmLnRyYW5zbGF0ZShNYXRoLmNlaWwoYy54LWQueCpiKSxNYXRoLmNlaWwoYy55LWQueSpiKSksZi5zY2FsZShiLGIpLGEuc291cmNlLmRyYXcoZiksZi5yZXN0b3JlKCksKyt0aGlzLl9pbmRleDx0aGlzLl9mcmFtZXMubGVuZ3RofSxjcmVhdGVqcy5TcHJpdGVTaGVldEJ1aWxkZXI9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oYSl7dGhpcy5pbml0aWFsaXplKGEpfSxiPWEucHJvdG90eXBlPW5ldyBjcmVhdGVqcy5EaXNwbGF5T2JqZWN0O2IuaHRtbEVsZW1lbnQ9bnVsbCxiLl9vbGRNdHg9bnVsbCxiLl92aXNpYmxlPSExLGIuRGlzcGxheU9iamVjdF9pbml0aWFsaXplPWIuaW5pdGlhbGl6ZSxiLmluaXRpYWxpemU9ZnVuY3Rpb24oYSl7XCJzdHJpbmdcIj09dHlwZW9mIGEmJihhPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpKSx0aGlzLkRpc3BsYXlPYmplY3RfaW5pdGlhbGl6ZSgpLHRoaXMubW91c2VFbmFibGVkPSExLHRoaXMuaHRtbEVsZW1lbnQ9YTt2YXIgYj1hLnN0eWxlO2IucG9zaXRpb249XCJhYnNvbHV0ZVwiLGIudHJhbnNmb3JtT3JpZ2luPWIuV2Via2l0VHJhbnNmb3JtT3JpZ2luPWIubXNUcmFuc2Zvcm1PcmlnaW49Yi5Nb3pUcmFuc2Zvcm1PcmlnaW49Yi5PVHJhbnNmb3JtT3JpZ2luPVwiMCUgMCVcIn0sYi5pc1Zpc2libGU9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9dGhpcy5odG1sRWxlbWVudH0sYi5kcmF3PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlzaWJsZSYmKHRoaXMuX3Zpc2libGU9ITApLCEwfSxiLmNhY2hlPWZ1bmN0aW9uKCl7fSxiLnVuY2FjaGU9ZnVuY3Rpb24oKXt9LGIudXBkYXRlQ2FjaGU9ZnVuY3Rpb24oKXt9LGIuaGl0VGVzdD1mdW5jdGlvbigpe30sYi5sb2NhbFRvR2xvYmFsPWZ1bmN0aW9uKCl7fSxiLmdsb2JhbFRvTG9jYWw9ZnVuY3Rpb24oKXt9LGIubG9jYWxUb0xvY2FsPWZ1bmN0aW9uKCl7fSxiLmNsb25lPWZ1bmN0aW9uKCl7dGhyb3dcIkRPTUVsZW1lbnQgY2Fubm90IGJlIGNsb25lZC5cIn0sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW0RPTUVsZW1lbnQgKG5hbWU9XCIrdGhpcy5uYW1lK1wiKV1cIn0sYi5EaXNwbGF5T2JqZWN0X190aWNrPWIuX3RpY2ssYi5fdGljaz1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmdldFN0YWdlKCk7dGhpcy5fdmlzaWJsZT0hMSxiJiZiLm9uKFwiZHJhd2VuZFwiLHRoaXMuX2hhbmRsZURyYXdFbmQsdGhpcywhMCksdGhpcy5EaXNwbGF5T2JqZWN0X190aWNrKGEpfSxiLl9oYW5kbGVEcmF3RW5kPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5odG1sRWxlbWVudDtpZihhKXt2YXIgYj1hLnN0eWxlLGM9dGhpcy5fdmlzaWJsZT9cInZpc2libGVcIjpcImhpZGRlblwiO2lmKGMhPWIudmlzaWJpbGl0eSYmKGIudmlzaWJpbGl0eT1jKSx0aGlzLl92aXNpYmxlKXt2YXIgZD10aGlzLmdldENvbmNhdGVuYXRlZE1hdHJpeCh0aGlzLl9tYXRyaXgpLGU9dGhpcy5fb2xkTXR4LGY9MWU0O1xuaWYoZSYmZS5hbHBoYT09ZC5hbHBoYXx8KGIub3BhY2l0eT1cIlwiKygwfGQuYWxwaGEqZikvZixlJiYoZS5hbHBoYT1kLmFscGhhKSksIWV8fGUudHghPWQudHh8fGUudHkhPWQudHl8fGUuYSE9ZC5hfHxlLmIhPWQuYnx8ZS5jIT1kLmN8fGUuZCE9ZC5kKXt2YXIgZz1cIm1hdHJpeChcIisoMHxkLmEqZikvZitcIixcIisoMHxkLmIqZikvZitcIixcIisoMHxkLmMqZikvZitcIixcIisoMHxkLmQqZikvZitcIixcIisoMHxkLnR4Ky41KTtiLnRyYW5zZm9ybT1iLldlYmtpdFRyYW5zZm9ybT1iLk9UcmFuc2Zvcm09Yi5tc1RyYW5zZm9ybT1nK1wiLFwiKygwfGQudHkrLjUpK1wiKVwiLGIuTW96VHJhbnNmb3JtPWcrXCJweCxcIisoMHxkLnR5Ky41KStcInB4KVwiLHRoaXMuX29sZE10eD1lP2UuY29weShkKTpkLmNsb25lKCl9fX19LGNyZWF0ZWpzLkRPTUVsZW1lbnQ9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oKXt0aGlzLmluaXRpYWxpemUoKX0sYj1hLnByb3RvdHlwZTtiLmluaXRpYWxpemU9ZnVuY3Rpb24oKXt9LGIuZ2V0Qm91bmRzPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGIuYXBwbHlGaWx0ZXI9ZnVuY3Rpb24oKXt9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltGaWx0ZXJdXCJ9LGIuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGF9LGNyZWF0ZWpzLkZpbHRlcj1hfSgpLHRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1mdW5jdGlvbihhLGIsYyl7dGhpcy5pbml0aWFsaXplKGEsYixjKX0sYj1hLnByb3RvdHlwZT1uZXcgY3JlYXRlanMuRmlsdGVyO2IuaW5pdGlhbGl6ZT1mdW5jdGlvbihhLGIsYyl7KGlzTmFOKGEpfHwwPmEpJiYoYT0wKSx0aGlzLmJsdXJYPTB8YSwoaXNOYU4oYil8fDA+YikmJihiPTApLHRoaXMuYmx1clk9MHxiLChpc05hTihjKXx8MT5jKSYmKGM9MSksdGhpcy5xdWFsaXR5PTB8Y30sYi5ibHVyWD0wLGIuYmx1clk9MCxiLnF1YWxpdHk9MSxiLm11bF90YWJsZT1bMSwxNzEsMjA1LDI5Myw1NywzNzMsNzksMTM3LDI0MSwyNywzOTEsMzU3LDQxLDE5LDI4MywyNjUsNDk3LDQ2OSw0NDMsNDIxLDI1LDE5MSwzNjUsMzQ5LDMzNSwxNjEsMTU1LDE0OSw5LDI3OCwyNjksMjYxLDUwNSwyNDUsNDc1LDIzMSw0NDksNDM3LDIxMyw0MTUsNDA1LDM5NSwxOTMsMzc3LDM2OSwzNjEsMzUzLDM0NSwxNjksMzMxLDMyNSwzMTksMzEzLDMwNywzMDEsMzcsMTQ1LDI4NSwyODEsNjksMjcxLDI2NywyNjMsMjU5LDUwOSw1MDEsNDkzLDI0Myw0NzksMTE4LDQ2NSw0NTksMTEzLDQ0Niw1NSw0MzUsNDI5LDQyMywyMDksNDEzLDUxLDQwMywxOTksMzkzLDk3LDMsMzc5LDM3NSwzNzEsMzY3LDM2MywzNTksMzU1LDM1MSwzNDcsNDMsODUsMzM3LDMzMywxNjUsMzI3LDMyMyw1LDMxNywxNTcsMzExLDc3LDMwNSwzMDMsNzUsMjk3LDI5NCw3MywyODksMjg3LDcxLDE0MSwyNzksMjc3LDI3NSw2OCwxMzUsNjcsMTMzLDMzLDI2MiwyNjAsMTI5LDUxMSw1MDcsNTAzLDQ5OSw0OTUsNDkxLDYxLDEyMSw0ODEsNDc3LDIzNywyMzUsNDY3LDIzMiwxMTUsNDU3LDIyNyw0NTEsNyw0NDUsMjIxLDQzOSwyMTgsNDMzLDIxNSw0MjcsNDI1LDIxMSw0MTksNDE3LDIwNyw0MTEsNDA5LDIwMywyMDIsNDAxLDM5OSwzOTYsMTk3LDQ5LDM4OSwzODcsMzg1LDM4Myw5NSwxODksNDcsMTg3LDkzLDE4NSwyMywxODMsOTEsMTgxLDQ1LDE3OSw4OSwxNzcsMTEsMTc1LDg3LDE3MywzNDUsMzQzLDM0MSwzMzksMzM3LDIxLDE2Nyw4MywzMzEsMzI5LDMyNywxNjMsODEsMzIzLDMyMSwzMTksMTU5LDc5LDMxNSwzMTMsMzksMTU1LDMwOSwzMDcsMTUzLDMwNSwzMDMsMTUxLDc1LDI5OSwxNDksMzcsMjk1LDE0Nyw3MywyOTEsMTQ1LDI4OSwyODcsMTQzLDI4NSw3MSwxNDEsMjgxLDM1LDI3OSwxMzksNjksMjc1LDEzNywyNzMsMTcsMjcxLDEzNSwyNjksMjY3LDEzMywyNjUsMzMsMjYzLDEzMSwyNjEsMTMwLDI1OSwxMjksMjU3LDFdLGIuc2hnX3RhYmxlPVswLDksMTAsMTEsOSwxMiwxMCwxMSwxMiw5LDEzLDEzLDEwLDksMTMsMTMsMTQsMTQsMTQsMTQsMTAsMTMsMTQsMTQsMTQsMTMsMTMsMTMsOSwxNCwxNCwxNCwxNSwxNCwxNSwxNCwxNSwxNSwxNCwxNSwxNSwxNSwxNCwxNSwxNSwxNSwxNSwxNSwxNCwxNSwxNSwxNSwxNSwxNSwxNSwxMiwxNCwxNSwxNSwxMywxNSwxNSwxNSwxNSwxNiwxNiwxNiwxNSwxNiwxNCwxNiwxNiwxNCwxNiwxMywxNiwxNiwxNiwxNSwxNiwxMywxNiwxNSwxNiwxNCw5LDE2LDE2LDE2LDE2LDE2LDE2LDE2LDE2LDE2LDEzLDE0LDE2LDE2LDE1LDE2LDE2LDEwLDE2LDE1LDE2LDE0LDE2LDE2LDE0LDE2LDE2LDE0LDE2LDE2LDE0LDE1LDE2LDE2LDE2LDE0LDE1LDE0LDE1LDEzLDE2LDE2LDE1LDE3LDE3LDE3LDE3LDE3LDE3LDE0LDE1LDE3LDE3LDE2LDE2LDE3LDE2LDE1LDE3LDE2LDE3LDExLDE3LDE2LDE3LDE2LDE3LDE2LDE3LDE3LDE2LDE3LDE3LDE2LDE3LDE3LDE2LDE2LDE3LDE3LDE3LDE2LDE0LDE3LDE3LDE3LDE3LDE1LDE2LDE0LDE2LDE1LDE2LDEzLDE2LDE1LDE2LDE0LDE2LDE1LDE2LDEyLDE2LDE1LDE2LDE3LDE3LDE3LDE3LDE3LDEzLDE2LDE1LDE3LDE3LDE3LDE2LDE1LDE3LDE3LDE3LDE2LDE1LDE3LDE3LDE0LDE2LDE3LDE3LDE2LDE3LDE3LDE2LDE1LDE3LDE2LDE0LDE3LDE2LDE1LDE3LDE2LDE3LDE3LDE2LDE3LDE1LDE2LDE3LDE0LDE3LDE2LDE1LDE3LDE2LDE3LDEzLDE3LDE2LDE3LDE3LDE2LDE3LDE0LDE3LDE2LDE3LDE2LDE3LDE2LDE3LDldLGIuZ2V0Qm91bmRzPWZ1bmN0aW9uKCl7dmFyIGE9LjUqTWF0aC5wb3codGhpcy5xdWFsaXR5LC42KTtyZXR1cm4gbmV3IGNyZWF0ZWpzLlJlY3RhbmdsZSgtdGhpcy5ibHVyWCphLC10aGlzLmJsdXJZKmEsMip0aGlzLmJsdXJYKmEsMip0aGlzLmJsdXJZKmEpfSxiLmFwcGx5RmlsdGVyPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCl7Zj1mfHxhLG51bGw9PWcmJihnPWIpLG51bGw9PWgmJihoPWMpO3RyeXt2YXIgaT1hLmdldEltYWdlRGF0YShiLGMsZCxlKX1jYXRjaChqKXtyZXR1cm4hMX12YXIgaz10aGlzLmJsdXJYLzI7aWYoaXNOYU4oayl8fDA+aylyZXR1cm4hMTtrfD0wO3ZhciBsPXRoaXMuYmx1clkvMjtpZihpc05hTihsKXx8MD5sKXJldHVybiExO2lmKGx8PTAsMD09ayYmMD09bClyZXR1cm4hMTt2YXIgbT10aGlzLnF1YWxpdHk7KGlzTmFOKG0pfHwxPm0pJiYobT0xKSxtfD0wLG0+MyYmKG09MyksMT5tJiYobT0xKTt2YXIgYixjLG4sbyxwLHEscixzLHQsdSx2LHcseCx5LHosQT1pLmRhdGEsQj1rK2srMSxDPWwrbCsxLEQ9ZC0xLEU9ZS0xLEY9aysxLEc9bCsxLEg9e3I6MCxiOjAsZzowLGE6MCxuZXh0Om51bGx9LEk9SDtmb3Iobj0xO0I+bjtuKyspST1JLm5leHQ9e3I6MCxiOjAsZzowLGE6MCxuZXh0Om51bGx9O0kubmV4dD1IO3ZhciBKPXtyOjAsYjowLGc6MCxhOjAsbmV4dDpudWxsfSxLPUo7Zm9yKG49MTtDPm47bisrKUs9Sy5uZXh0PXtyOjAsYjowLGc6MCxhOjAsbmV4dDpudWxsfTtLLm5leHQ9Sjtmb3IodmFyIEw9bnVsbDttLS0+MDspe3I9cT0wO3ZhciBNPXRoaXMubXVsX3RhYmxlW2tdLE49dGhpcy5zaGdfdGFibGVba107Zm9yKGM9ZTstLWM+LTE7KXtmb3Iocz1GKih3PUFbcV0pLHQ9RiooeD1BW3ErMV0pLHU9RiooeT1BW3ErMl0pLHY9Riooej1BW3ErM10pLEk9SCxuPUY7LS1uPi0xOylJLnI9dyxJLmc9eCxJLmI9eSxJLmE9eixJPUkubmV4dDtmb3Iobj0xO0Y+bjtuKyspbz1xKygobj5EP0Q6bik8PDIpLHMrPUkucj1BW29dLHQrPUkuZz1BW28rMV0sdSs9SS5iPUFbbysyXSx2Kz1JLmE9QVtvKzNdLEk9SS5uZXh0O2ZvcihMPUgsYj0wO2Q+YjtiKyspQVtxKytdPXMqTT4+Pk4sQVtxKytdPXQqTT4+Pk4sQVtxKytdPXUqTT4+Pk4sQVtxKytdPXYqTT4+Pk4sbz1yKygobz1iK2srMSk8RD9vOkQpPDwyLHMtPUwuci0oTC5yPUFbb10pLHQtPUwuZy0oTC5nPUFbbysxXSksdS09TC5iLShMLmI9QVtvKzJdKSx2LT1MLmEtKEwuYT1BW28rM10pLEw9TC5uZXh0O3IrPWR9Zm9yKE09dGhpcy5tdWxfdGFibGVbbF0sTj10aGlzLnNoZ190YWJsZVtsXSxiPTA7ZD5iO2IrKyl7Zm9yKHE9Yjw8MixzPUcqKHc9QVtxXSksdD1HKih4PUFbcSsxXSksdT1HKih5PUFbcSsyXSksdj1HKih6PUFbcSszXSksSz1KLG49MDtHPm47bisrKUsucj13LEsuZz14LEsuYj15LEsuYT16LEs9Sy5uZXh0O2ZvcihwPWQsbj0xO2w+PW47bisrKXE9cCtiPDwyLHMrPUsucj1BW3FdLHQrPUsuZz1BW3ErMV0sdSs9Sy5iPUFbcSsyXSx2Kz1LLmE9QVtxKzNdLEs9Sy5uZXh0LEU+biYmKHArPWQpO2lmKHE9YixMPUosbT4wKWZvcihjPTA7ZT5jO2MrKylvPXE8PDIsQVtvKzNdPXo9dipNPj4+Tix6PjA/KEFbb109cypNPj4+TixBW28rMV09dCpNPj4+TixBW28rMl09dSpNPj4+Tik6QVtvXT1BW28rMV09QVtvKzJdPTAsbz1iKygobz1jK0cpPEU/bzpFKSpkPDwyLHMtPUwuci0oTC5yPUFbb10pLHQtPUwuZy0oTC5nPUFbbysxXSksdS09TC5iLShMLmI9QVtvKzJdKSx2LT1MLmEtKEwuYT1BW28rM10pLEw9TC5uZXh0LHErPWQ7ZWxzZSBmb3IoYz0wO2U+YztjKyspbz1xPDwyLEFbbyszXT16PXYqTT4+Pk4sej4wPyh6PTI1NS96LEFbb109KHMqTT4+Pk4pKnosQVtvKzFdPSh0Kk0+Pj5OKSp6LEFbbysyXT0odSpNPj4+Tikqeik6QVtvXT1BW28rMV09QVtvKzJdPTAsbz1iKygobz1jK0cpPEU/bzpFKSpkPDwyLHMtPUwuci0oTC5yPUFbb10pLHQtPUwuZy0oTC5nPUFbbysxXSksdS09TC5iLShMLmI9QVtvKzJdKSx2LT1MLmEtKEwuYT1BW28rM10pLEw9TC5uZXh0LHErPWR9fXJldHVybiBmLnB1dEltYWdlRGF0YShpLGcsaCksITB9LGIuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGEodGhpcy5ibHVyWCx0aGlzLmJsdXJZLHRoaXMucXVhbGl0eSl9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltCbHVyRmlsdGVyXVwifSxjcmVhdGVqcy5CbHVyRmlsdGVyPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEpe3RoaXMuaW5pdGlhbGl6ZShhKX0sYj1hLnByb3RvdHlwZT1uZXcgY3JlYXRlanMuRmlsdGVyO2IuaW5pdGlhbGl6ZT1mdW5jdGlvbihhKXt0aGlzLmFscGhhTWFwPWF9LGIuYWxwaGFNYXA9bnVsbCxiLl9hbHBoYU1hcD1udWxsLGIuX21hcERhdGE9bnVsbCxiLmFwcGx5RmlsdGVyPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCl7aWYoIXRoaXMuYWxwaGFNYXApcmV0dXJuITA7aWYoIXRoaXMuX3ByZXBBbHBoYU1hcCgpKXJldHVybiExO2Y9Znx8YSxudWxsPT1nJiYoZz1iKSxudWxsPT1oJiYoaD1jKTt0cnl7dmFyIGk9YS5nZXRJbWFnZURhdGEoYixjLGQsZSl9Y2F0Y2goail7cmV0dXJuITF9Zm9yKHZhciBrPWkuZGF0YSxsPXRoaXMuX21hcERhdGEsbT1rLmxlbmd0aCxuPTA7bT5uO24rPTQpa1tuKzNdPWxbbl18fDA7cmV0dXJuIGkuZGF0YT1rLGYucHV0SW1hZ2VEYXRhKGksZyxoKSwhMH0sYi5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgYSh0aGlzLmFscGhhTWFwKX0sYi50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW0FscGhhTWFwRmlsdGVyXVwifSxiLl9wcmVwQWxwaGFNYXA9ZnVuY3Rpb24oKXtpZighdGhpcy5hbHBoYU1hcClyZXR1cm4hMTtpZih0aGlzLmFscGhhTWFwPT10aGlzLl9hbHBoYU1hcCYmdGhpcy5fbWFwRGF0YSlyZXR1cm4hMDt0aGlzLl9tYXBEYXRhPW51bGw7dmFyIGEsYj10aGlzLl9hbHBoYU1hcD10aGlzLmFscGhhTWFwLGM9YjtiIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQ/YT1jLmdldENvbnRleHQoXCIyZFwiKTooYz1jcmVhdGVqcy5jcmVhdGVDYW52YXM/Y3JlYXRlanMuY3JlYXRlQ2FudmFzKCk6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSxjLndpZHRoPWIud2lkdGgsYy5oZWlnaHQ9Yi5oZWlnaHQsYT1jLmdldENvbnRleHQoXCIyZFwiKSxhLmRyYXdJbWFnZShiLDAsMCkpO3RyeXt2YXIgZD1hLmdldEltYWdlRGF0YSgwLDAsYi53aWR0aCxiLmhlaWdodCl9Y2F0Y2goZSl7cmV0dXJuITF9cmV0dXJuIHRoaXMuX21hcERhdGE9ZC5kYXRhLCEwfSxjcmVhdGVqcy5BbHBoYU1hcEZpbHRlcj1hfSgpLHRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1mdW5jdGlvbihhKXt0aGlzLmluaXRpYWxpemUoYSl9LGI9YS5wcm90b3R5cGU9bmV3IGNyZWF0ZWpzLkZpbHRlcjtiLmluaXRpYWxpemU9ZnVuY3Rpb24oYSl7dGhpcy5tYXNrPWF9LGIubWFzaz1udWxsLGIuYXBwbHlGaWx0ZXI9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoKXtyZXR1cm4gdGhpcy5tYXNrPyhmPWZ8fGEsbnVsbD09ZyYmKGc9YiksbnVsbD09aCYmKGg9YyksZi5zYXZlKCksZi5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249XCJkZXN0aW5hdGlvbi1pblwiLGYuZHJhd0ltYWdlKHRoaXMubWFzayxnLGgpLGYucmVzdG9yZSgpLCEwKTohMH0sYi5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgYSh0aGlzLm1hc2spfSxiLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbQWxwaGFNYXNrRmlsdGVyXVwifSxjcmVhdGVqcy5BbHBoYU1hc2tGaWx0ZXI9YX0oKSx0aGlzLmNyZWF0ZWpzPXRoaXMuY3JlYXRlanN8fHt9LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoKXt0aGlzLmluaXRpYWxpemUoYSxiLGMsZCxlLGYsZyxoKX0sYj1hLnByb3RvdHlwZT1uZXcgY3JlYXRlanMuRmlsdGVyO2IucmVkTXVsdGlwbGllcj0xLGIuZ3JlZW5NdWx0aXBsaWVyPTEsYi5ibHVlTXVsdGlwbGllcj0xLGIuYWxwaGFNdWx0aXBsaWVyPTEsYi5yZWRPZmZzZXQ9MCxiLmdyZWVuT2Zmc2V0PTAsYi5ibHVlT2Zmc2V0PTAsYi5hbHBoYU9mZnNldD0wLGIuaW5pdGlhbGl6ZT1mdW5jdGlvbihhLGIsYyxkLGUsZixnLGgpe3RoaXMucmVkTXVsdGlwbGllcj1udWxsIT1hP2E6MSx0aGlzLmdyZWVuTXVsdGlwbGllcj1udWxsIT1iP2I6MSx0aGlzLmJsdWVNdWx0aXBsaWVyPW51bGwhPWM/YzoxLHRoaXMuYWxwaGFNdWx0aXBsaWVyPW51bGwhPWQ/ZDoxLHRoaXMucmVkT2Zmc2V0PWV8fDAsdGhpcy5ncmVlbk9mZnNldD1mfHwwLHRoaXMuYmx1ZU9mZnNldD1nfHwwLHRoaXMuYWxwaGFPZmZzZXQ9aHx8MH0sYi5hcHBseUZpbHRlcj1mdW5jdGlvbihhLGIsYyxkLGUsZixnLGgpe2Y9Znx8YSxudWxsPT1nJiYoZz1iKSxudWxsPT1oJiYoaD1jKTt0cnl7dmFyIGk9YS5nZXRJbWFnZURhdGEoYixjLGQsZSl9Y2F0Y2goail7cmV0dXJuITF9Zm9yKHZhciBrPWkuZGF0YSxsPWsubGVuZ3RoLG09MDtsPm07bSs9NClrW21dPWtbbV0qdGhpcy5yZWRNdWx0aXBsaWVyK3RoaXMucmVkT2Zmc2V0LGtbbSsxXT1rW20rMV0qdGhpcy5ncmVlbk11bHRpcGxpZXIrdGhpcy5ncmVlbk9mZnNldCxrW20rMl09a1ttKzJdKnRoaXMuYmx1ZU11bHRpcGxpZXIrdGhpcy5ibHVlT2Zmc2V0LGtbbSszXT1rW20rM10qdGhpcy5hbHBoYU11bHRpcGxpZXIrdGhpcy5hbHBoYU9mZnNldDtyZXR1cm4gZi5wdXRJbWFnZURhdGEoaSxnLGgpLCEwfSxiLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbQ29sb3JGaWx0ZXJdXCJ9LGIuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGEodGhpcy5yZWRNdWx0aXBsaWVyLHRoaXMuZ3JlZW5NdWx0aXBsaWVyLHRoaXMuYmx1ZU11bHRpcGxpZXIsdGhpcy5hbHBoYU11bHRpcGxpZXIsdGhpcy5yZWRPZmZzZXQsdGhpcy5ncmVlbk9mZnNldCx0aGlzLmJsdWVPZmZzZXQsdGhpcy5hbHBoYU9mZnNldCl9LGNyZWF0ZWpzLkNvbG9yRmlsdGVyPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuaW5pdGlhbGl6ZShhLGIsYyxkKX0sYj1hLnByb3RvdHlwZT1bXTthLkRFTFRBX0lOREVYPVswLC4wMSwuMDIsLjA0LC4wNSwuMDYsLjA3LC4wOCwuMSwuMTEsLjEyLC4xNCwuMTUsLjE2LC4xNywuMTgsLjIsLjIxLC4yMiwuMjQsLjI1LC4yNywuMjgsLjMsLjMyLC4zNCwuMzYsLjM4LC40LC40MiwuNDQsLjQ2LC40OCwuNSwuNTMsLjU2LC41OSwuNjIsLjY1LC42OCwuNzEsLjc0LC43NywuOCwuODMsLjg2LC44OSwuOTIsLjk1LC45OCwxLDEuMDYsMS4xMiwxLjE4LDEuMjQsMS4zLDEuMzYsMS40MiwxLjQ4LDEuNTQsMS42LDEuNjYsMS43MiwxLjc4LDEuODQsMS45LDEuOTYsMiwyLjEyLDIuMjUsMi4zNywyLjUsMi42MiwyLjc1LDIuODcsMywzLjIsMy40LDMuNiwzLjgsNCw0LjMsNC43LDQuOSw1LDUuNSw2LDYuNSw2LjgsNyw3LjMsNy41LDcuOCw4LDguNCw4LjcsOSw5LjQsOS42LDkuOCwxMF0sYS5JREVOVElUWV9NQVRSSVg9WzEsMCwwLDAsMCwwLDEsMCwwLDAsMCwwLDEsMCwwLDAsMCwwLDEsMCwwLDAsMCwwLDFdLGEuTEVOR1RIPWEuSURFTlRJVFlfTUFUUklYLmxlbmd0aCxiLmluaXRpYWxpemU9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMucmVzZXQoKSx0aGlzLmFkanVzdENvbG9yKGEsYixjLGQpLHRoaXN9LGIucmVzZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb3B5TWF0cml4KGEuSURFTlRJVFlfTUFUUklYKX0sYi5hZGp1c3RDb2xvcj1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5hZGp1c3RIdWUoZCksdGhpcy5hZGp1c3RDb250cmFzdChiKSx0aGlzLmFkanVzdEJyaWdodG5lc3MoYSksdGhpcy5hZGp1c3RTYXR1cmF0aW9uKGMpfSxiLmFkanVzdEJyaWdodG5lc3M9ZnVuY3Rpb24oYSl7cmV0dXJuIDA9PWF8fGlzTmFOKGEpP3RoaXM6KGE9dGhpcy5fY2xlYW5WYWx1ZShhLDI1NSksdGhpcy5fbXVsdGlwbHlNYXRyaXgoWzEsMCwwLDAsYSwwLDEsMCwwLGEsMCwwLDEsMCxhLDAsMCwwLDEsMCwwLDAsMCwwLDFdKSx0aGlzKX0sYi5hZGp1c3RDb250cmFzdD1mdW5jdGlvbihiKXtpZigwPT1ifHxpc05hTihiKSlyZXR1cm4gdGhpcztiPXRoaXMuX2NsZWFuVmFsdWUoYiwxMDApO3ZhciBjO3JldHVybiAwPmI/Yz0xMjcrMTI3KihiLzEwMCk6KGM9YiUxLGM9MD09Yz9hLkRFTFRBX0lOREVYW2JdOmEuREVMVEFfSU5ERVhbYjw8MF0qKDEtYykrYS5ERUxUQV9JTkRFWFsoYjw8MCkrMV0qYyxjPTEyNypjKzEyNyksdGhpcy5fbXVsdGlwbHlNYXRyaXgoW2MvMTI3LDAsMCwwLC41KigxMjctYyksMCxjLzEyNywwLDAsLjUqKDEyNy1jKSwwLDAsYy8xMjcsMCwuNSooMTI3LWMpLDAsMCwwLDEsMCwwLDAsMCwwLDFdKSx0aGlzfSxiLmFkanVzdFNhdHVyYXRpb249ZnVuY3Rpb24oYSl7aWYoMD09YXx8aXNOYU4oYSkpcmV0dXJuIHRoaXM7YT10aGlzLl9jbGVhblZhbHVlKGEsMTAwKTt2YXIgYj0xKyhhPjA/MyphLzEwMDphLzEwMCksYz0uMzA4NixkPS42MDk0LGU9LjA4MjtyZXR1cm4gdGhpcy5fbXVsdGlwbHlNYXRyaXgoW2MqKDEtYikrYixkKigxLWIpLGUqKDEtYiksMCwwLGMqKDEtYiksZCooMS1iKStiLGUqKDEtYiksMCwwLGMqKDEtYiksZCooMS1iKSxlKigxLWIpK2IsMCwwLDAsMCwwLDEsMCwwLDAsMCwwLDFdKSx0aGlzfSxiLmFkanVzdEh1ZT1mdW5jdGlvbihhKXtpZigwPT1hfHxpc05hTihhKSlyZXR1cm4gdGhpczthPXRoaXMuX2NsZWFuVmFsdWUoYSwxODApLzE4MCpNYXRoLlBJO3ZhciBiPU1hdGguY29zKGEpLGM9TWF0aC5zaW4oYSksZD0uMjEzLGU9LjcxNSxmPS4wNzI7cmV0dXJuIHRoaXMuX211bHRpcGx5TWF0cml4KFtkK2IqKDEtZCkrYyotZCxlK2IqLWUrYyotZSxmK2IqLWYrYyooMS1mKSwwLDAsZCtiKi1kKy4xNDMqYyxlK2IqKDEtZSkrLjE0KmMsZitiKi1mK2MqLS4yODMsMCwwLGQrYiotZCtjKi0oMS1kKSxlK2IqLWUrYyplLGYrYiooMS1mKStjKmYsMCwwLDAsMCwwLDEsMCwwLDAsMCwwLDFdKSx0aGlzfSxiLmNvbmNhdD1mdW5jdGlvbihiKXtyZXR1cm4gYj10aGlzLl9maXhNYXRyaXgoYiksYi5sZW5ndGghPWEuTEVOR1RIP3RoaXM6KHRoaXMuX211bHRpcGx5TWF0cml4KGIpLHRoaXMpfSxiLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBhKHRoaXMpfSxiLnRvQXJyYXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zbGljZSgwLGEuTEVOR1RIKX0sYi5jb3B5TWF0cml4PWZ1bmN0aW9uKGIpe2Zvcih2YXIgYz1hLkxFTkdUSCxkPTA7Yz5kO2QrKyl0aGlzW2RdPWJbZF07cmV0dXJuIHRoaXN9LGIuX211bHRpcGx5TWF0cml4PWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTA7NT5jO2MrKyl7Zm9yKHZhciBkPTA7NT5kO2QrKyliW2RdPXRoaXNbZCs1KmNdO2Zvcih2YXIgZD0wOzU+ZDtkKyspe2Zvcih2YXIgZT0wLGY9MDs1PmY7ZisrKWUrPWFbZCs1KmZdKmJbZl07dGhpc1tkKzUqY109ZX19fSxiLl9jbGVhblZhbHVlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIE1hdGgubWluKGIsTWF0aC5tYXgoLWIsYSkpfSxiLl9maXhNYXRyaXg9ZnVuY3Rpb24oYil7cmV0dXJuIGIgaW5zdGFuY2VvZiBhJiYoYj1iLnNsaWNlKDApKSxiLmxlbmd0aDxhLkxFTkdUSD9iPWIuc2xpY2UoMCxiLmxlbmd0aCkuY29uY2F0KGEuSURFTlRJVFlfTUFUUklYLnNsaWNlKGIubGVuZ3RoLGEuTEVOR1RIKSk6Yi5sZW5ndGg+YS5MRU5HVEgmJihiPWIuc2xpY2UoMCxhLkxFTkdUSCkpLGJ9LGNyZWF0ZWpzLkNvbG9yTWF0cml4PWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKGEpe3RoaXMuaW5pdGlhbGl6ZShhKX0sYj1hLnByb3RvdHlwZT1uZXcgY3JlYXRlanMuRmlsdGVyO2IubWF0cml4PW51bGwsYi5pbml0aWFsaXplPWZ1bmN0aW9uKGEpe3RoaXMubWF0cml4PWF9LGIuYXBwbHlGaWx0ZXI9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoKXtmPWZ8fGEsbnVsbD09ZyYmKGc9YiksbnVsbD09aCYmKGg9Yyk7dHJ5e3ZhciBpPWEuZ2V0SW1hZ2VEYXRhKGIsYyxkLGUpfWNhdGNoKGope3JldHVybiExfWZvcih2YXIgayxsLG0sbixvPWkuZGF0YSxwPW8ubGVuZ3RoLHE9dGhpcy5tYXRyaXgscj1xWzBdLHM9cVsxXSx0PXFbMl0sdT1xWzNdLHY9cVs0XSx3PXFbNV0seD1xWzZdLHk9cVs3XSx6PXFbOF0sQT1xWzldLEI9cVsxMF0sQz1xWzExXSxEPXFbMTJdLEU9cVsxM10sRj1xWzE0XSxHPXFbMTVdLEg9cVsxNl0sST1xWzE3XSxKPXFbMThdLEs9cVsxOV0sTD0wO3A+TDtMKz00KWs9b1tMXSxsPW9bTCsxXSxtPW9bTCsyXSxuPW9bTCszXSxvW0xdPWsqcitsKnMrbSp0K24qdSt2LG9bTCsxXT1rKncrbCp4K20qeStuKnorQSxvW0wrMl09aypCK2wqQyttKkQrbipFK0Ysb1tMKzNdPWsqRytsKkgrbSpJK24qSitLO3JldHVybiBmLnB1dEltYWdlRGF0YShpLGcsaCksITB9LGIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltDb2xvck1hdHJpeEZpbHRlcl1cIn0sYi5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgYSh0aGlzLm1hdHJpeCl9LGNyZWF0ZWpzLkNvbG9yTWF0cml4RmlsdGVyPWF9KCksdGhpcy5jcmVhdGVqcz10aGlzLmNyZWF0ZWpzfHx7fSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPWZ1bmN0aW9uKCl7dGhyb3dcIlRvdWNoIGNhbm5vdCBiZSBpbnN0YW50aWF0ZWRcIn07YS5pc1N1cHBvcnRlZD1mdW5jdGlvbigpe3JldHVyblwib250b3VjaHN0YXJ0XCJpbiB3aW5kb3d8fHdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCYmd2luZG93Lm5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzPjB9LGEuZW5hYmxlPWZ1bmN0aW9uKGIsYyxkKXtyZXR1cm4gYiYmYi5jYW52YXMmJmEuaXNTdXBwb3J0ZWQoKT8oYi5fX3RvdWNoPXtwb2ludGVyczp7fSxtdWx0aXRvdWNoOiFjLHByZXZlbnREZWZhdWx0OiFkLGNvdW50OjB9LFwib250b3VjaHN0YXJ0XCJpbiB3aW5kb3c/YS5fSU9TX2VuYWJsZShiKTp3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQmJmEuX0lFX2VuYWJsZShiKSwhMCk6ITF9LGEuZGlzYWJsZT1mdW5jdGlvbihiKXtiJiYoXCJvbnRvdWNoc3RhcnRcImluIHdpbmRvdz9hLl9JT1NfZGlzYWJsZShiKTp3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQmJmEuX0lFX2Rpc2FibGUoYikpfSxhLl9JT1NfZW5hYmxlPWZ1bmN0aW9uKGIpe3ZhciBjPWIuY2FudmFzLGQ9Yi5fX3RvdWNoLmY9ZnVuY3Rpb24oYyl7YS5fSU9TX2hhbmRsZUV2ZW50KGIsYyl9O2MuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIixkLCExKSxjLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixkLCExKSxjLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLGQsITEpLGMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsZCwhMSl9LGEuX0lPU19kaXNhYmxlPWZ1bmN0aW9uKGEpe3ZhciBiPWEuY2FudmFzO2lmKGIpe3ZhciBjPWEuX190b3VjaC5mO2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIixjLCExKSxiLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixjLCExKSxiLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLGMsITEpLGIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsYywhMSl9fSxhLl9JT1NfaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oYSxiKXtpZihhKXthLl9fdG91Y2gucHJldmVudERlZmF1bHQmJmIucHJldmVudERlZmF1bHQmJmIucHJldmVudERlZmF1bHQoKTtmb3IodmFyIGM9Yi5jaGFuZ2VkVG91Y2hlcyxkPWIudHlwZSxlPTAsZj1jLmxlbmd0aDtmPmU7ZSsrKXt2YXIgZz1jW2VdLGg9Zy5pZGVudGlmaWVyO2cudGFyZ2V0PT1hLmNhbnZhcyYmKFwidG91Y2hzdGFydFwiPT1kP3RoaXMuX2hhbmRsZVN0YXJ0KGEsaCxiLGcucGFnZVgsZy5wYWdlWSk6XCJ0b3VjaG1vdmVcIj09ZD90aGlzLl9oYW5kbGVNb3ZlKGEsaCxiLGcucGFnZVgsZy5wYWdlWSk6KFwidG91Y2hlbmRcIj09ZHx8XCJ0b3VjaGNhbmNlbFwiPT1kKSYmdGhpcy5faGFuZGxlRW5kKGEsaCxiKSl9fX0sYS5fSUVfZW5hYmxlPWZ1bmN0aW9uKGIpe3ZhciBjPWIuY2FudmFzLGQ9Yi5fX3RvdWNoLmY9ZnVuY3Rpb24oYyl7YS5fSUVfaGFuZGxlRXZlbnQoYixjKX07Yy5hZGRFdmVudExpc3RlbmVyKFwiTVNQb2ludGVyRG93blwiLGQsITEpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiTVNQb2ludGVyTW92ZVwiLGQsITEpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiTVNQb2ludGVyVXBcIixkLCExKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIk1TUG9pbnRlckNhbmNlbFwiLGQsITEpLGIuX190b3VjaC5wcmV2ZW50RGVmYXVsdCYmKGMuc3R5bGUubXNUb3VjaEFjdGlvbj1cIm5vbmVcIiksYi5fX3RvdWNoLmFjdGl2ZUlEcz17fX0sYS5fSUVfZGlzYWJsZT1mdW5jdGlvbihhKXt2YXIgYj1hLl9fdG91Y2guZjt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIk1TUG9pbnRlck1vdmVcIixiLCExKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIk1TUG9pbnRlclVwXCIsYiwhMSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJNU1BvaW50ZXJDYW5jZWxcIixiLCExKSxhLmNhbnZhcyYmYS5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIk1TUG9pbnRlckRvd25cIixiLCExKX0sYS5fSUVfaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oYSxiKXtpZihhKXthLl9fdG91Y2gucHJldmVudERlZmF1bHQmJmIucHJldmVudERlZmF1bHQmJmIucHJldmVudERlZmF1bHQoKTt2YXIgYz1iLnR5cGUsZD1iLnBvaW50ZXJJZCxlPWEuX190b3VjaC5hY3RpdmVJRHM7aWYoXCJNU1BvaW50ZXJEb3duXCI9PWMpe2lmKGIuc3JjRWxlbWVudCE9YS5jYW52YXMpcmV0dXJuO2VbZF09ITAsdGhpcy5faGFuZGxlU3RhcnQoYSxkLGIsYi5wYWdlWCxiLnBhZ2VZKX1lbHNlIGVbZF0mJihcIk1TUG9pbnRlck1vdmVcIj09Yz90aGlzLl9oYW5kbGVNb3ZlKGEsZCxiLGIucGFnZVgsYi5wYWdlWSk6KFwiTVNQb2ludGVyVXBcIj09Y3x8XCJNU1BvaW50ZXJDYW5jZWxcIj09YykmJihkZWxldGUgZVtkXSx0aGlzLl9oYW5kbGVFbmQoYSxkLGIpKSl9fSxhLl9oYW5kbGVTdGFydD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEuX190b3VjaDtpZihmLm11bHRpdG91Y2h8fCFmLmNvdW50KXt2YXIgZz1mLnBvaW50ZXJzO2dbYl18fChnW2JdPSEwLGYuY291bnQrKyxhLl9oYW5kbGVQb2ludGVyRG93bihiLGMsZCxlKSl9fSxhLl9oYW5kbGVNb3ZlPWZ1bmN0aW9uKGEsYixjLGQsZSl7YS5fX3RvdWNoLnBvaW50ZXJzW2JdJiZhLl9oYW5kbGVQb2ludGVyTW92ZShiLGMsZCxlKX0sYS5faGFuZGxlRW5kPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hLl9fdG91Y2gsZT1kLnBvaW50ZXJzO2VbYl0mJihkLmNvdW50LS0sYS5faGFuZGxlUG9pbnRlclVwKGIsYywhMCksZGVsZXRlIGVbYl0pfSxjcmVhdGVqcy5Ub3VjaD1hfSgpLHRoaXMuY3JlYXRlanM9dGhpcy5jcmVhdGVqc3x8e30sZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1jcmVhdGVqcy5FYXNlbEpTPWNyZWF0ZWpzLkVhc2VsSlN8fHt9O2EudmVyc2lvbj1cIjAuNy4wXCIsYS5idWlsZERhdGU9XCJUdWUsIDAxIE9jdCAyMDEzIDE2OjAyOjM4IEdNVFwifSgpOyIsIkFwcE1vZGVsID0gcmVxdWlyZSAnLi9tb2RlbC9BcHBNb2RlbC5jb2ZmZWUnXHJcblBhcmFsbGF4ID0gcmVxdWlyZSAnLi9wYXJhbGxheC9QYXJhbGxheC5jb2ZmZWUnXHJcbmNsYXNzIFBlbm55RHJlYWRmdWwgZXh0ZW5kcyBCYWNrYm9uZS5Sb3V0ZXJcclxuICAgIFxyXG4gICAgbW9kZWwgOiBudWxsXHJcbiAgICBwYXJhbGxheCA6IG51bGxcclxuXHJcbiAgICBjb25zdHJ1Y3RvcjogKCkgLT5cclxuICAgICAgICBAaW5pdERhdGEoKVxyXG5cclxuXHJcblxyXG4gICAgaW5pdERhdGE6ID0+XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIEBtb2RlbCA9IG5ldyBBcHBNb2RlbFxyXG4gICAgICAgICAgICB1cmw6IHdpbmRvdy5EQVRBX1VSTCBvciBcIi9kYXRhL2RhdGEuanNvblwiICBcclxuICAgICAgICBAbW9kZWwub24gXCJhc3NldHNSZWFkeVwiICwgQGluaXRBcHBcclxuICAgICAgICBAbW9kZWwuZmV0Y2goKVxyXG5cclxuICAgIGluaXRBcHA6ID0+XHJcbiAgICAgICAgY29uc29sZS5sb2cgXCJhc3NldHMgcmVhZHlcIlxyXG4gICAgICAgIEBwYXJhbGxheCA9IG5ldyBQYXJhbGxheCBcInBkcmVhZC1jYW52YXNcIlxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUGVubnlEcmVhZGZ1bCIsIlxyXG4gXHJcblxyXG5cclxuY2xhc3MgQXBwTW9kZWwgZXh0ZW5kcyBCYWNrYm9uZS5Nb2RlbFxyXG4gICAgXHJcbiAgXHJcblxyXG5cclxuICAgIG9wdHMgOiB7fVxyXG4gICAgYXNzZXRzOiB7fVxyXG5cclxuICAgIHByZWxvYWRlciA6IG5ldyBjcmVhdGVqcy5Mb2FkUXVldWUgdHJ1ZVxyXG4gICAgbWFuaWZlc3QgOiBbXVxyXG4gXHJcbiAgICBjb25zdHJ1Y3RvcjogKG9wdHMpIC0+XHJcbiAgICAgICAgc3VwZXIob3B0cylcclxuXHJcblxyXG5cclxuICAgIGluaXRpYWxpemU6IChvcHRzKSA9PiBcclxuICAgICAgICBAb3B0cyA9IG9wdHNcclxuICAgICAgICBAdXJsID0gb3B0cy51cmxcclxuICAgICAgICBzdXBlcigpXHJcbiAgICAgICAgQG9uICdjaGFuZ2UnICwgQG9uQXBwTW9kZWxEYXRhXHJcbiAgICAgIFxyXG4gXHJcbiAgICBvbkFwcE1vZGVsRGF0YTogKHRhcmdldCkgPT5cclxuICAgICAgICBAb2ZmICdjaGFuZ2UnICwgQG9uQXBwTW9kZWxEYXRhXHJcbiAgICAgICAgQHByZWxvYWRlci5hZGRFdmVudExpc3RlbmVyICdwcm9ncmVzcycgLCBAb25QcmVsb2FkUHJvZ3Jlc3NcclxuICAgICAgICBAcHJlbG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIgJ2NvbXBsZXRlJyAsIEBvblByZWxvYWRDb21wbGV0ZVxyXG4gICAgICAgIEBwcm9jZXNzRGF0YSgpXHJcbiAgICAgICAgQHRyaWdnZXIgJ2RhdGFSZWFkeScgLCBAXHJcblxyXG4gXHJcbiBcclxuICAgIHByb2Nlc3NEYXRhOiA9PlxyXG4gICAgICAgIEBzZWFyY2hHbG9iYWxBc3NldHMoQGF0dHJpYnV0ZXMpXHJcbiAgICAgICAgQHByZWxvYWRlci5sb2FkTWFuaWZlc3QoQG1hbmlmZXN0KVxyXG5cclxuXHJcblxyXG4gICAgb25QcmVsb2FkUHJvZ3Jlc3M6IChlKSA9PlxyXG4gICAgICAgIGNvbnNvbGUubG9nICBlLmxvYWRlZCAqIDEwMFxyXG4gICAgb25QcmVsb2FkQ29tcGxldGU6IChlKSA9PlxyXG4gICAgICAgIEB0cmlnZ2VyICdhc3NldHNSZWFkeScgLCBAXHJcblxyXG5cclxuICAgIHNlYXJjaEdsb2JhbEFzc2V0czogKG9iamVjdCkgPT5cclxuICAgICAgICBmb3IgaXRlbSBvZiBvYmplY3RcclxuICAgICAgICAgICAgaWYgaXRlbSBpcyBcImFzc2V0c1wiXHJcbiAgICAgICAgICAgICAgICBmb3IgYXNzZXQgb2Ygb2JqZWN0W2l0ZW1dICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIG9iamVjdFtpdGVtXVthc3NldF0uaW5kZXhPZihcImh0dHBcIikgaXMgLTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0W2l0ZW1dW2Fzc2V0XSA9IEBnZXQoXCJiYXNlVXJsXCIpICsgb2JqZWN0W2l0ZW1dW2Fzc2V0XVxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIEBtYW5pZmVzdC5wdXNoKG9iamVjdFtpdGVtXSlcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBlbHNlIGlmIHR5cGVvZiBvYmplY3RbaXRlbV0gaXMgXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgQHNlYXJjaEdsb2JhbEFzc2V0cyhvYmplY3RbaXRlbV0pXHJcblxyXG4gICAgXHJcblxyXG5cclxuICAgICAgIFxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBcHBNb2RlbCAgIFxyXG4iLCJcclxuXHJcbmNsYXNzIFBhcmFsbGF4IGV4dGVuZHMgY3JlYXRlanMuU3RhZ2VcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3I6IChjYW52YXMpIC0+XHJcbiAgICAgICAgc3VwZXIoY2FudmFzKVxyXG4gICAgICAgIEBpbml0aWFsaXplKGNhbnZhcylcclxuXHJcbiAgICBpbml0aWFsaXplOiAoY2FudmFzKSAtPlxyXG4gICAgICAgIGNvbnNvbGUubG9nIFwieW9cIiAsIGNhbnZhc1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQYXJhbGxheFxyXG5cclxuIiwiI0JhY2tib25lIFJlcXVpcmVzXG53aW5kb3cuXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbndpbmRvdy5CYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyk7XG5CYWNrYm9uZS4kID0gJDtcblxuI0dyZWVuc29jayBSZXF1aXJlc1xucmVxdWlyZShcIi4vaW5jbHVkZS9ncmVlbnNvY2svVHdlZW5MaXRlLm1pbi5qc1wiKVxucmVxdWlyZShcIi4vaW5jbHVkZS9ncmVlbnNvY2svVHdlZW5NYXgubWluLmpzXCIpXG5yZXF1aXJlKFwiLi9pbmNsdWRlL2dyZWVuc29jay9lYXNpbmcvRWFzZVBhY2subWluLmpzXCIpXG5cblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzIG9yIHt9XG4jQ3JlYXRlIEpTIFJlcXVpcmVzXG4jQ2FudmFzIExpYlxucmVxdWlyZShcIi4vaW5jbHVkZS9jcmVhdGUvZWFzZWxqcy0wLjcuMC5taW4uanNcIilcbiNQcmVsb2FkZXIgTGliXG5yZXF1aXJlKFwiLi9pbmNsdWRlL2NyZWF0ZS9wcmVsb2FkanMtMC40LjAubWluLmpzXCIpXG5cblxuXG4jQ2FsbCBNYWluIEFwcCBGaWxlXG5QZW5ueURyZWFkZnVsID0gcmVxdWlyZShcIi4vY29tL1Blbm55RHJlYWRmdWwuY29mZmVlXCIpXG5cblxuXG5cblxuaWYgdHlwZW9mIEFycmF5LmlzQXJyYXkgaXNudCBcImZ1bmN0aW9uXCJcbiAgQXJyYXkuaXNBcnJheSA9IChhcnIpIC0+XG4gICAgT2JqZWN0Ojp0b1N0cmluZy5jYWxsKGFycikgaXMgXCJbb2JqZWN0IEFycmF5XVwiXG5cbiAgICBcbndpbmRvdy51cmxQYXJhbSA9IChuYW1lKSAtPlxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgXCJcXFxcW1wiKS5yZXBsYWNlKC9bXFxdXS8sIFwiXFxcXF1cIilcbiAgICByZWdleFMgPSBcIltcXFxcPyZdXCIgKyBuYW1lICsgXCI9KFteJiNdKilcIlxuICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpXG4gICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWMod2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgdW5sZXNzIHJlc3VsdHM/XG4gICAgXHR1bmRlZmluZWQgXG4gICAgZWxzZVxuICAgXHRcdHJlc3VsdHNbMV1cbiBcbiBcbmlmIHdpbmRvdy5jb25zb2xlIGlzIHVuZGVmaW5lZCBvciB3aW5kb3cuY29uc29sZSBpcyBudWxsXG4gICAgd2luZG93LmNvbnNvbGUgPVxuICAgICAgICBsb2c6IC0+XG4gICAgICAgIHdhcm46IC0+XG4gICAgICAgIGZhdGFsOiAtPlxuXG5cblxuXG4kKGRvY3VtZW50KS5yZWFkeSAtPlxuICAgIGFwcCA9IG5ldyBQZW5ueURyZWFkZnVsKCkiLCIoZnVuY3Rpb24oKXsvLyAgICAgVW5kZXJzY29yZS5qcyAxLjQuMlxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxMiBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgSW5jLlxuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZ2xvYmFsYCBvbiB0aGUgc2VydmVyLlxuICB2YXIgcm9vdCA9IHRoaXM7XG5cbiAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBfYCB2YXJpYWJsZS5cbiAgdmFyIHByZXZpb3VzVW5kZXJzY29yZSA9IHJvb3QuXztcblxuICAvLyBFc3RhYmxpc2ggdGhlIG9iamVjdCB0aGF0IGdldHMgcmV0dXJuZWQgdG8gYnJlYWsgb3V0IG9mIGEgbG9vcCBpdGVyYXRpb24uXG4gIHZhciBicmVha2VyID0ge307XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXIgcHVzaCAgICAgICAgICAgICA9IEFycmF5UHJvdG8ucHVzaCxcbiAgICAgIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgICAgY29uY2F0ICAgICAgICAgICA9IEFycmF5UHJvdG8uY29uY2F0LFxuICAgICAgdW5zaGlmdCAgICAgICAgICA9IEFycmF5UHJvdG8udW5zaGlmdCxcbiAgICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAvLyBBbGwgKipFQ01BU2NyaXB0IDUqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2VcbiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuXG4gIHZhclxuICAgIG5hdGl2ZUZvckVhY2ggICAgICA9IEFycmF5UHJvdG8uZm9yRWFjaCxcbiAgICBuYXRpdmVNYXAgICAgICAgICAgPSBBcnJheVByb3RvLm1hcCxcbiAgICBuYXRpdmVSZWR1Y2UgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZSxcbiAgICBuYXRpdmVSZWR1Y2VSaWdodCAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0LFxuICAgIG5hdGl2ZUZpbHRlciAgICAgICA9IEFycmF5UHJvdG8uZmlsdGVyLFxuICAgIG5hdGl2ZUV2ZXJ5ICAgICAgICA9IEFycmF5UHJvdG8uZXZlcnksXG4gICAgbmF0aXZlU29tZSAgICAgICAgID0gQXJyYXlQcm90by5zb21lLFxuICAgIG5hdGl2ZUluZGV4T2YgICAgICA9IEFycmF5UHJvdG8uaW5kZXhPZixcbiAgICBuYXRpdmVMYXN0SW5kZXhPZiAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mLFxuICAgIG5hdGl2ZUlzQXJyYXkgICAgICA9IEFycmF5LmlzQXJyYXksXG4gICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsXG4gICAgbmF0aXZlQmluZCAgICAgICAgID0gRnVuY1Byb3RvLmJpbmQ7XG5cbiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgaW5cbiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0IHZpYSBhIHN0cmluZyBpZGVudGlmaWVyLFxuICAvLyBmb3IgQ2xvc3VyZSBDb21waWxlciBcImFkdmFuY2VkXCIgbW9kZS5cbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXztcbiAgICB9XG4gICAgZXhwb3J0cy5fID0gXztcbiAgfSBlbHNlIHtcbiAgICByb290WydfJ10gPSBfO1xuICB9XG5cbiAgLy8gQ3VycmVudCB2ZXJzaW9uLlxuICBfLlZFUlNJT04gPSAnMS40LjInO1xuXG4gIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4gIC8vIEhhbmRsZXMgb2JqZWN0cyB3aXRoIHRoZSBidWlsdC1pbiBgZm9yRWFjaGAsIGFycmF5cywgYW5kIHJhdyBvYmplY3RzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZm9yRWFjaGAgaWYgYXZhaWxhYmxlLlxuICB2YXIgZWFjaCA9IF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybjtcbiAgICBpZiAobmF0aXZlRm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gbmF0aXZlRm9yRWFjaCkge1xuICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikgPT09IGJyZWFrZXIpIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoXy5oYXMob2JqLCBrZXkpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0b3IgdG8gZWFjaCBlbGVtZW50LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgbWFwYCBpZiBhdmFpbGFibGUuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgICBpZiAobmF0aXZlTWFwICYmIG9iai5tYXAgPT09IG5hdGl2ZU1hcCkgcmV0dXJuIG9iai5tYXAoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJlc3VsdHNbcmVzdWx0cy5sZW5ndGhdID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vICoqUmVkdWNlKiogYnVpbGRzIHVwIGEgc2luZ2xlIHJlc3VsdCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMsIGFrYSBgaW5qZWN0YCxcbiAgLy8gb3IgYGZvbGRsYC4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZWAgaWYgYXZhaWxhYmxlLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIG1lbW8sIGNvbnRleHQpIHtcbiAgICB2YXIgaW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIGlmIChvYmogPT0gbnVsbCkgb2JqID0gW107XG4gICAgaWYgKG5hdGl2ZVJlZHVjZSAmJiBvYmoucmVkdWNlID09PSBuYXRpdmVSZWR1Y2UpIHtcbiAgICAgIGlmIChjb250ZXh0KSBpdGVyYXRvciA9IF8uYmluZChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgICByZXR1cm4gaW5pdGlhbCA/IG9iai5yZWR1Y2UoaXRlcmF0b3IsIG1lbW8pIDogb2JqLnJlZHVjZShpdGVyYXRvcik7XG4gICAgfVxuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgICBtZW1vID0gdmFsdWU7XG4gICAgICAgIGluaXRpYWwgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVtbyA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgbWVtbywgdmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWluaXRpYWwpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZVJpZ2h0YCBpZiBhdmFpbGFibGUuXG4gIF8ucmVkdWNlUmlnaHQgPSBfLmZvbGRyID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgbWVtbywgY29udGV4dCkge1xuICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTtcbiAgICBpZiAobmF0aXZlUmVkdWNlUmlnaHQgJiYgb2JqLnJlZHVjZVJpZ2h0ID09PSBuYXRpdmVSZWR1Y2VSaWdodCkge1xuICAgICAgaWYgKGNvbnRleHQpIGl0ZXJhdG9yID0gXy5iaW5kKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMiA/IG9iai5yZWR1Y2VSaWdodChpdGVyYXRvciwgbWVtbykgOiBvYmoucmVkdWNlUmlnaHQoaXRlcmF0b3IpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICE9PSArbGVuZ3RoKSB7XG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgfVxuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGluZGV4ID0ga2V5cyA/IGtleXNbLS1sZW5ndGhdIDogLS1sZW5ndGg7XG4gICAgICBpZiAoIWluaXRpYWwpIHtcbiAgICAgICAgbWVtbyA9IG9ialtpbmRleF07XG4gICAgICAgIGluaXRpYWwgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVtbyA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgbWVtbywgb2JqW2luZGV4XSwgaW5kZXgsIGxpc3QpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghaW5pdGlhbCkgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIHJldHVybiBtZW1vO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBhbnkob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBwYXNzIGEgdHJ1dGggdGVzdC5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGZpbHRlcmAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgICBpZiAobmF0aXZlRmlsdGVyICYmIG9iai5maWx0ZXIgPT09IG5hdGl2ZUZpbHRlcikgcmV0dXJuIG9iai5maWx0ZXIoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHNbcmVzdWx0cy5sZW5ndGhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmICghaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoXSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIERldGVybWluZSB3aGV0aGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgbWF0Y2ggYSB0cnV0aCB0ZXN0LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZXZlcnlgIGlmIGF2YWlsYWJsZS5cbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cbiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGl0ZXJhdG9yIHx8IChpdGVyYXRvciA9IF8uaWRlbnRpdHkpO1xuICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAobmF0aXZlRXZlcnkgJiYgb2JqLmV2ZXJ5ID09PSBuYXRpdmVFdmVyeSkgcmV0dXJuIG9iai5ldmVyeShpdGVyYXRvciwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgaWYgKCEocmVzdWx0ID0gcmVzdWx0ICYmIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkpIHJldHVybiBicmVha2VyO1xuICAgIH0pO1xuICAgIHJldHVybiAhIXJlc3VsdDtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIG9iamVjdCBtYXRjaGVzIGEgdHJ1dGggdGVzdC5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHNvbWVgIGlmIGF2YWlsYWJsZS5cbiAgLy8gQWxpYXNlZCBhcyBgYW55YC5cbiAgdmFyIGFueSA9IF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGl0ZXJhdG9yIHx8IChpdGVyYXRvciA9IF8uaWRlbnRpdHkpO1xuICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gICAgaWYgKG5hdGl2ZVNvbWUgJiYgb2JqLnNvbWUgPT09IG5hdGl2ZVNvbWUpIHJldHVybiBvYmouc29tZShpdGVyYXRvciwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgaWYgKHJlc3VsdCB8fCAocmVzdWx0ID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSkgcmV0dXJuIGJyZWFrZXI7XG4gICAgfSk7XG4gICAgcmV0dXJuICEhcmVzdWx0O1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gdmFsdWUgKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGUgPSBmdW5jdGlvbihvYmosIHRhcmdldCkge1xuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZvdW5kO1xuICAgIGlmIChuYXRpdmVJbmRleE9mICYmIG9iai5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gb2JqLmluZGV4T2YodGFyZ2V0KSAhPSAtMTtcbiAgICBmb3VuZCA9IGFueShvYmosIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRhcmdldDtcbiAgICB9KTtcbiAgICByZXR1cm4gZm91bmQ7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIChfLmlzRnVuY3Rpb24obWV0aG9kKSA/IG1ldGhvZCA6IHZhbHVlW21ldGhvZF0pLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LlxuICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSl7IHJldHVybiB2YWx1ZVtrZXldOyB9KTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXG4gIC8vIHdpdGggc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ud2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgaWYgKF8uaXNFbXB0eShhdHRycykpIHJldHVybiBbXTtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGlmIChhdHRyc1trZXldICE9PSB2YWx1ZVtrZXldKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCBvciAoZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIC8vIENhbid0IG9wdGltaXplIGFycmF5cyBvZiBpbnRlZ2VycyBsb25nZXIgdGhhbiA2NSw1MzUgZWxlbWVudHMuXG4gIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTgwNzk3XG4gIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0FycmF5KG9iaikgJiYgb2JqWzBdID09PSArb2JqWzBdICYmIG9iai5sZW5ndGggPCA2NTUzNSkge1xuICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIG9iaik7XG4gICAgfVxuICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0VtcHR5KG9iaikpIHJldHVybiAtSW5maW5pdHk7XG4gICAgdmFyIHJlc3VsdCA9IHtjb21wdXRlZCA6IC1JbmZpbml0eX07XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTtcbiAgICAgIGNvbXB1dGVkID49IHJlc3VsdC5jb21wdXRlZCAmJiAocmVzdWx0ID0ge3ZhbHVlIDogdmFsdWUsIGNvbXB1dGVkIDogY29tcHV0ZWR9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaWYgKCFpdGVyYXRvciAmJiBfLmlzQXJyYXkob2JqKSAmJiBvYmpbMF0gPT09ICtvYmpbMF0gJiYgb2JqLmxlbmd0aCA8IDY1NTM1KSB7XG4gICAgICByZXR1cm4gTWF0aC5taW4uYXBwbHkoTWF0aCwgb2JqKTtcbiAgICB9XG4gICAgaWYgKCFpdGVyYXRvciAmJiBfLmlzRW1wdHkob2JqKSkgcmV0dXJuIEluZmluaXR5O1xuICAgIHZhciByZXN1bHQgPSB7Y29tcHV0ZWQgOiBJbmZpbml0eX07XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTtcbiAgICAgIGNvbXB1dGVkIDwgcmVzdWx0LmNvbXB1dGVkICYmIChyZXN1bHQgPSB7dmFsdWUgOiB2YWx1ZSwgY29tcHV0ZWQgOiBjb21wdXRlZH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gIH07XG5cbiAgLy8gU2h1ZmZsZSBhbiBhcnJheS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJhbmQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgc2h1ZmZsZWQgPSBbXTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJhbmQgPSBfLnJhbmRvbShpbmRleCsrKTtcbiAgICAgIHNodWZmbGVkW2luZGV4IC0gMV0gPSBzaHVmZmxlZFtyYW5kXTtcbiAgICAgIHNodWZmbGVkW3JhbmRdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNodWZmbGVkO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGxvb2t1cCBpdGVyYXRvcnMuXG4gIHZhciBsb29rdXBJdGVyYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IGZ1bmN0aW9uKG9iail7IHJldHVybiBvYmpbdmFsdWVdOyB9O1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRvci5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IodmFsdWUpO1xuICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSA6IHZhbHVlLFxuICAgICAgICBpbmRleCA6IGluZGV4LFxuICAgICAgICBjcml0ZXJpYSA6IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IDwgcmlnaHQuaW5kZXggPyAtMSA6IDE7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24ob2JqLCB2YWx1ZSwgY29udGV4dCwgYmVoYXZpb3IpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IodmFsdWUpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIHZhciBrZXkgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgIGJlaGF2aW9yKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXG4gIC8vIHRvIGdyb3VwIGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3JpdGVyaW9uLlxuICBfLmdyb3VwQnkgPSBmdW5jdGlvbihvYmosIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGdyb3VwKG9iaiwgdmFsdWUsIGNvbnRleHQsIGZ1bmN0aW9uKHJlc3VsdCwga2V5LCB2YWx1ZSkge1xuICAgICAgKF8uaGFzKHJlc3VsdCwga2V5KSA/IHJlc3VsdFtrZXldIDogKHJlc3VsdFtrZXldID0gW10pKS5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBDb3VudHMgaW5zdGFuY2VzIG9mIGFuIG9iamVjdCB0aGF0IGdyb3VwIGJ5IGEgY2VydGFpbiBjcml0ZXJpb24uIFBhc3NcbiAgLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gIC8vIGNyaXRlcmlvbi5cbiAgXy5jb3VudEJ5ID0gZnVuY3Rpb24ob2JqLCB2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBncm91cChvYmosIHZhbHVlLCBjb250ZXh0LCBmdW5jdGlvbihyZXN1bHQsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICghXy5oYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XSA9IDA7XG4gICAgICByZXN1bHRba2V5XSsrO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2hcbiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLlxuICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yID09IG51bGwgPyBfLmlkZW50aXR5IDogbG9va3VwSXRlcmF0b3IoaXRlcmF0b3IpO1xuICAgIHZhciB2YWx1ZSA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMTtcbiAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgYXJyYXlbbWlkXSkgPCB2YWx1ZSA/IGxvdyA9IG1pZCArIDEgOiBoaWdoID0gbWlkO1xuICAgIH1cbiAgICByZXR1cm4gbG93O1xuICB9O1xuXG4gIC8vIFNhZmVseSBjb252ZXJ0IGFueXRoaW5nIGl0ZXJhYmxlIGludG8gYSByZWFsLCBsaXZlIGFycmF5LlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICByZXR1cm4gXy52YWx1ZXMob2JqKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBvYmplY3QuXG4gIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDtcbiAgfTtcblxuICAvLyBBcnJheSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gR2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYGhlYWRgIGFuZCBgdGFrZWAuIFRoZSAqKmd1YXJkKiogY2hlY2tcbiAgLy8gYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLmZpcnN0ID0gXy5oZWFkID0gXy50YWtlID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIChuICE9IG51bGwpICYmICFndWFyZCA/IHNsaWNlLmNhbGwoYXJyYXksIDAsIG4pIDogYXJyYXlbMF07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4gIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4gIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aFxuICAvLyBgXy5tYXBgLlxuICBfLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgYXJyYXkubGVuZ3RoIC0gKChuID09IG51bGwpIHx8IGd1YXJkID8gMSA6IG4pKTtcbiAgfTtcblxuICAvLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgbGFzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoKG4gIT0gbnVsbCkgJiYgIWd1YXJkKSB7XG4gICAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgTWF0aC5tYXgoYXJyYXkubGVuZ3RoIC0gbiwgMCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC5cbiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm5cbiAgLy8gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqXG4gIC8vIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5yZXN0ID0gXy50YWlsID0gXy5kcm9wID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIChuID09IG51bGwpIHx8IGd1YXJkID8gMSA6IG4pO1xuICB9O1xuXG4gIC8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuICEhdmFsdWU7IH0pO1xuICB9O1xuXG4gIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgb3V0cHV0KSB7XG4gICAgZWFjaChpbnB1dCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmIChfLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHNoYWxsb3cgPyBwdXNoLmFwcGx5KG91dHB1dCwgdmFsdWUpIDogZmxhdHRlbih2YWx1ZSwgc2hhbGxvdywgb3V0cHV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIC8vIFJldHVybiBhIGNvbXBsZXRlbHkgZmxhdHRlbmVkIHZlcnNpb24gb2YgYW4gYXJyYXkuXG4gIF8uZmxhdHRlbiA9IGZ1bmN0aW9uKGFycmF5LCBzaGFsbG93KSB7XG4gICAgcmV0dXJuIGZsYXR0ZW4oYXJyYXksIHNoYWxsb3csIFtdKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS5cbiAgXy53aXRob3V0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5kaWZmZXJlbmNlKGFycmF5LCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIHRoZSBhcnJheS4gSWYgdGhlIGFycmF5IGhhcyBhbHJlYWR5XG4gIC8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS5cbiAgLy8gQWxpYXNlZCBhcyBgdW5pcXVlYC5cbiAgXy51bmlxID0gXy51bmlxdWUgPSBmdW5jdGlvbihhcnJheSwgaXNTb3J0ZWQsIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIGluaXRpYWwgPSBpdGVyYXRvciA/IF8ubWFwKGFycmF5LCBpdGVyYXRvciwgY29udGV4dCkgOiBhcnJheTtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHZhciBzZWVuID0gW107XG4gICAgZWFjaChpbml0aWFsLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIGlmIChpc1NvcnRlZCA/ICghaW5kZXggfHwgc2VlbltzZWVuLmxlbmd0aCAtIDFdICE9PSB2YWx1ZSkgOiAhXy5jb250YWlucyhzZWVuLCB2YWx1ZSkpIHtcbiAgICAgICAgc2Vlbi5wdXNoKHZhbHVlKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGFycmF5W2luZGV4XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mXG4gIC8vIHRoZSBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLnVuaW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF8udW5pcShjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxuICAvLyBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3QgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIF8uZmlsdGVyKF8udW5pcShhcnJheSksIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBfLmV2ZXJ5KHJlc3QsIGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBfLmluZGV4T2Yob3RoZXIsIGl0ZW0pID49IDA7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhIG51bWJlciBvZiBvdGhlciBhcnJheXMuXG4gIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uXG4gIF8uZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3QgPSBjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTsgfSk7XG4gIH07XG5cbiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZVxuICAvLyBhbiBpbmRleCBnbyB0b2dldGhlci5cbiAgXy56aXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICB2YXIgbGVuZ3RoID0gXy5tYXgoXy5wbHVjayhhcmdzLCAnbGVuZ3RoJykpO1xuICAgIHZhciByZXN1bHRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0c1tpXSA9IF8ucGx1Y2soYXJncywgXCJcIiArIGkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgcmVzdWx0W2xpc3RbaV1dID0gdmFsdWVzW2ldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W2xpc3RbaV1bMF1dID0gbGlzdFtpXVsxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBJZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBseSB1cyB3aXRoIGluZGV4T2YgKEknbSBsb29raW5nIGF0IHlvdSwgKipNU0lFKiopLFxuICAvLyB3ZSBuZWVkIHRoaXMgZnVuY3Rpb24uIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW5cbiAgLy8gaXRlbSBpbiBhbiBhcnJheSwgb3IgLTEgaWYgdGhlIGl0ZW0gaXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheS5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGluZGV4T2ZgIGlmIGF2YWlsYWJsZS5cbiAgLy8gSWYgdGhlIGFycmF5IGlzIGxhcmdlIGFuZCBhbHJlYWR5IGluIHNvcnQgb3JkZXIsIHBhc3MgYHRydWVgXG4gIC8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guXG4gIF8uaW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBpc1NvcnRlZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7XG4gICAgdmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpc1NvcnRlZCkge1xuICAgICAgaWYgKHR5cGVvZiBpc1NvcnRlZCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpID0gKGlzU29ydGVkIDwgMCA/IE1hdGgubWF4KDAsIGwgKyBpc1NvcnRlZCkgOiBpc1NvcnRlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpID0gXy5zb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpXSA9PT0gaXRlbSA/IGkgOiAtMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgYXJyYXkuaW5kZXhPZiA9PT0gbmF0aXZlSW5kZXhPZikgcmV0dXJuIGFycmF5LmluZGV4T2YoaXRlbSwgaXNTb3J0ZWQpO1xuICAgIGZvciAoOyBpIDwgbDsgaSsrKSBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHJldHVybiBpO1xuICAgIHJldHVybiAtMTtcbiAgfTtcblxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgbGFzdEluZGV4T2ZgIGlmIGF2YWlsYWJsZS5cbiAgXy5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBmcm9tKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTtcbiAgICB2YXIgaGFzSW5kZXggPSBmcm9tICE9IG51bGw7XG4gICAgaWYgKG5hdGl2ZUxhc3RJbmRleE9mICYmIGFycmF5Lmxhc3RJbmRleE9mID09PSBuYXRpdmVMYXN0SW5kZXhPZikge1xuICAgICAgcmV0dXJuIGhhc0luZGV4ID8gYXJyYXkubGFzdEluZGV4T2YoaXRlbSwgZnJvbSkgOiBhcnJheS5sYXN0SW5kZXhPZihpdGVtKTtcbiAgICB9XG4gICAgdmFyIGkgPSAoaGFzSW5kZXggPyBmcm9tIDogYXJyYXkubGVuZ3RoKTtcbiAgICB3aGlsZSAoaS0tKSBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHJldHVybiBpO1xuICAgIHJldHVybiAtMTtcbiAgfTtcblxuICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXG4gIC8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlXG4gIC8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuXG4gIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDEpIHtcbiAgICAgIHN0b3AgPSBzdGFydCB8fCAwO1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBzdGVwID0gYXJndW1lbnRzWzJdIHx8IDE7XG5cbiAgICB2YXIgbGVuID0gTWF0aC5tYXgoTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCksIDApO1xuICAgIHZhciBpZHggPSAwO1xuICAgIHZhciByYW5nZSA9IG5ldyBBcnJheShsZW4pO1xuXG4gICAgd2hpbGUoaWR4IDwgbGVuKSB7XG4gICAgICByYW5nZVtpZHgrK10gPSBzdGFydDtcbiAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIChhaGVtKSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUmV1c2FibGUgY29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHByb3RvdHlwZSBzZXR0aW5nLlxuICB2YXIgY3RvciA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cyxcbiAgLy8gb3B0aW9uYWxseSkuIEJpbmRpbmcgd2l0aCBhcmd1bWVudHMgaXMgYWxzbyBrbm93biBhcyBgY3VycnlgLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWYgYXZhaWxhYmxlLlxuICAvLyBXZSBjaGVjayBmb3IgYGZ1bmMuYmluZGAgZmlyc3QsIHRvIGZhaWwgZmFzdCB3aGVuIGBmdW5jYCBpcyB1bmRlZmluZWQuXG4gIF8uYmluZCA9IGZ1bmN0aW9uIGJpbmQoZnVuYywgY29udGV4dCkge1xuICAgIHZhciBib3VuZCwgYXJncztcbiAgICBpZiAoZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kICYmIG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gYm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkpIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgY3Rvci5wcm90b3R5cGUgPSBmdW5jLnByb3RvdHlwZTtcbiAgICAgIHZhciBzZWxmID0gbmV3IGN0b3I7XG4gICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcbiAgfTtcblxuICAvLyBCaW5kIGFsbCBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXRcbiAgLy8gYWxsIGNhbGxiYWNrcyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBmdW5jcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBpZiAoZnVuY3MubGVuZ3RoID09IDApIGZ1bmNzID0gXy5mdW5jdGlvbnMob2JqKTtcbiAgICBlYWNoKGZ1bmNzLCBmdW5jdGlvbihmKSB7IG9ialtmXSA9IF8uYmluZChvYmpbZl0sIG9iaik7IH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy5cbiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7XG4gICAgdmFyIG1lbW8gPSB7fTtcbiAgICBoYXNoZXIgfHwgKGhhc2hlciA9IF8uaWRlbnRpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrZXkgPSBoYXNoZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBfLmhhcyhtZW1vLCBrZXkpID8gbWVtb1trZXldIDogKG1lbW9ba2V5XSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4gIC8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC5cbiAgXy5kZWxheSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpeyByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTsgfSwgd2FpdCk7XG4gIH07XG5cbiAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4gIC8vIGNsZWFyZWQuXG4gIF8uZGVmZXIgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgcmV0dXJuIF8uZGVsYXkuYXBwbHkoXywgW2Z1bmMsIDFdLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2VcbiAgLy8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuXG4gIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgdmFyIGNvbnRleHQsIGFyZ3MsIHRpbWVvdXQsIHRocm90dGxpbmcsIG1vcmUsIHJlc3VsdDtcbiAgICB2YXIgd2hlbkRvbmUgPSBfLmRlYm91bmNlKGZ1bmN0aW9uKCl7IG1vcmUgPSB0aHJvdHRsaW5nID0gZmFsc2U7IH0sIHdhaXQpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnRleHQgPSB0aGlzOyBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICBpZiAobW9yZSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgd2hlbkRvbmUoKTtcbiAgICAgIH07XG4gICAgICBpZiAoIXRpbWVvdXQpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIGlmICh0aHJvdHRsaW5nKSB7XG4gICAgICAgIG1vcmUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3R0bGluZyA9IHRydWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgICB3aGVuRG9uZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0LCByZXN1bHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICBpZiAoIWltbWVkaWF0ZSkgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIH07XG4gICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIGlmIChjYWxsTm93KSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvd1xuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuICBfLm9uY2UgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIHJhbiA9IGZhbHNlLCBtZW1vO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChyYW4pIHJldHVybiBtZW1vO1xuICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsXG4gIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmRcbiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gW2Z1bmNdO1xuICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHdyYXBwZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBmb3IgKHZhciBpID0gZnVuY3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXJncyA9IFtmdW5jc1tpXS5hcHBseSh0aGlzLCBhcmdzKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnc1swXTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBhZnRlciBiZWluZyBjYWxsZWQgTiB0aW1lcy5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgaWYgKHRpbWVzIDw9IDApIHJldHVybiBmdW5jKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYFxuICBfLmtleXMgPSBuYXRpdmVLZXlzIHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogIT09IE9iamVjdChvYmopKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG9iamVjdCcpO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5c1trZXlzLmxlbmd0aF0gPSBrZXk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSB2YWx1ZXMucHVzaChvYmpba2V5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAgXy5wYWlycyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBwYWlycyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHBhaXJzLnB1c2goW2tleSwgb2JqW2tleV1dKTtcbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSByZXN1bHRbb2JqW2tleV1dID0ga2V5O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYFxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGNvcHkgPSB7fTtcbiAgICB2YXIga2V5cyA9IGNvbmNhdC5hcHBseShBcnJheVByb3RvLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIGVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoa2V5IGluIG9iaikgY29weVtrZXldID0gb2JqW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvcHk7XG4gIH07XG5cbiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgY29weSA9IHt9O1xuICAgIHZhciBrZXlzID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKCFfLmNvbnRhaW5zKGtleXMsIGtleSkpIGNvcHlba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbiAgfTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKG9ialtwcm9wXSA9PSBudWxsKSBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBIYXJtb255IGBlZ2FsYCBwcm9wb3NhbDogaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsLlxuICAgIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PSAxIC8gYjtcbiAgICAvLyBBIHN0cmljdCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGBudWxsID09IHVuZGVmaW5lZGAuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBhID09PSBiO1xuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICAgIGlmIChjbGFzc05hbWUgIT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgcmV0dXJuIGEgPT0gU3RyaW5nKGIpO1xuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS4gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvclxuICAgICAgICAvLyBvdGhlciBudW1lcmljIHZhbHVlcy5cbiAgICAgICAgcmV0dXJuIGEgIT0gK2EgPyBiICE9ICtiIDogKGEgPT0gMCA/IDEgLyBhID09IDEgLyBiIDogYSA9PSArYik7XG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgICByZXR1cm4gK2EgPT0gK2I7XG4gICAgICAvLyBSZWdFeHBzIGFyZSBjb21wYXJlZCBieSB0aGVpciBzb3VyY2UgcGF0dGVybnMgYW5kIGZsYWdzLlxuICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgICAgcmV0dXJuIGEuc291cmNlID09IGIuc291cmNlICYmXG4gICAgICAgICAgICAgICBhLmdsb2JhbCA9PSBiLmdsb2JhbCAmJlxuICAgICAgICAgICAgICAgYS5tdWx0aWxpbmUgPT0gYi5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgICAgIGEuaWdub3JlQ2FzZSA9PSBiLmlnbm9yZUNhc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cbiAgICB2YXIgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aDtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxuICAgICAgLy8gdW5pcXVlIG5lc3RlZCBzdHJ1Y3R1cmVzLlxuICAgICAgaWYgKGFTdGFja1tsZW5ndGhdID09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PSBiO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG4gICAgdmFyIHNpemUgPSAwLCByZXN1bHQgPSB0cnVlO1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChjbGFzc05hbWUgPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICBzaXplID0gYS5sZW5ndGg7XG4gICAgICByZXN1bHQgPSBzaXplID09IGIubGVuZ3RoO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID0gZXEoYVtzaXplXSwgYltzaXplXSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgKGFDdG9yIGluc3RhbmNlb2YgYUN0b3IpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiAoYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgZm9yICh2YXIga2V5IGluIGEpIHtcbiAgICAgICAgaWYgKF8uaGFzKGEsIGtleSkpIHtcbiAgICAgICAgICAvLyBDb3VudCB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlci5cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBfLmhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGZvciAoa2V5IGluIGIpIHtcbiAgICAgICAgICBpZiAoXy5oYXMoYiwga2V5KSAmJiAhKHNpemUtLSkpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9ICFzaXplO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucG9wKCk7XG4gICAgYlN0YWNrLnBvcCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbiB0byBjaGVjayBpZiB0d28gb2JqZWN0cyBhcmUgZXF1YWwuXG4gIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gZXEoYSwgYiwgW10sIFtdKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD9cbiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IE9iamVjdChvYmopO1xuICB9O1xuXG4gIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLlxuICBlYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiAhIShvYmogJiYgXy5oYXMob2JqLCAnY2FsbGVlJykpO1xuICAgIH07XG4gIH1cblxuICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuXG4gIGlmICh0eXBlb2YgKC8uLykgIT09ICdmdW5jdGlvbicpIHtcbiAgICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIGlzRmluaXRlKG9iaik7XG4gIH07XG5cbiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gPyAoTmFOIGlzIHRoZSBvbmx5IG51bWJlciB3aGljaCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYpLlxuICBfLmlzTmFOID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBvYmogIT0gK29iajtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj9cbiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IEJvb2xlYW5dJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGVxdWFsIHRvIG51bGw/XG4gIF8uaXNOdWxsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gbnVsbDtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIHVuZGVmaW5lZD9cbiAgXy5pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHZvaWQgMDtcbiAgfTtcblxuICAvLyBTaG9ydGN1dCBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHByb3BlcnR5IGRpcmVjdGx5XG4gIC8vIG9uIGl0c2VsZiAoaW4gb3RoZXIgd29yZHMsIG5vdCBvbiBhIHByb3RvdHlwZSkuXG4gIF8uaGFzID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG4gIH07XG5cbiAgLy8gVXRpbGl0eSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSdW4gVW5kZXJzY29yZS5qcyBpbiAqbm9Db25mbGljdCogbW9kZSwgcmV0dXJuaW5nIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzXG4gIC8vIHByZXZpb3VzIG93bmVyLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcm9vdC5fID0gcHJldmlvdXNVbmRlcnNjb3JlO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEtlZXAgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGFyb3VuZCBmb3IgZGVmYXVsdCBpdGVyYXRvcnMuXG4gIF8uaWRlbnRpdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICAvLyBSdW4gYSBmdW5jdGlvbiAqKm4qKiB0aW1lcy5cbiAgXy50aW1lcyA9IGZ1bmN0aW9uKG4sIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgaSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gYW5kIG1heCAoaW5jbHVzaXZlKS5cbiAgXy5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgIGlmIChtYXggPT0gbnVsbCkge1xuICAgICAgbWF4ID0gbWluO1xuICAgICAgbWluID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIG1pbiArICgwIHwgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG4gIH07XG5cbiAgLy8gTGlzdCBvZiBIVE1MIGVudGl0aWVzIGZvciBlc2NhcGluZy5cbiAgdmFyIGVudGl0eU1hcCA9IHtcbiAgICBlc2NhcGU6IHtcbiAgICAgICcmJzogJyZhbXA7JyxcbiAgICAgICc8JzogJyZsdDsnLFxuICAgICAgJz4nOiAnJmd0OycsXG4gICAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICAgIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgICAgICcvJzogJyYjeDJGOydcbiAgICB9XG4gIH07XG4gIGVudGl0eU1hcC51bmVzY2FwZSA9IF8uaW52ZXJ0KGVudGl0eU1hcC5lc2NhcGUpO1xuXG4gIC8vIFJlZ2V4ZXMgY29udGFpbmluZyB0aGUga2V5cyBhbmQgdmFsdWVzIGxpc3RlZCBpbW1lZGlhdGVseSBhYm92ZS5cbiAgdmFyIGVudGl0eVJlZ2V4ZXMgPSB7XG4gICAgZXNjYXBlOiAgIG5ldyBSZWdFeHAoJ1snICsgXy5rZXlzKGVudGl0eU1hcC5lc2NhcGUpLmpvaW4oJycpICsgJ10nLCAnZycpLFxuICAgIHVuZXNjYXBlOiBuZXcgUmVnRXhwKCcoJyArIF8ua2V5cyhlbnRpdHlNYXAudW5lc2NhcGUpLmpvaW4oJ3wnKSArICcpJywgJ2cnKVxuICB9O1xuXG4gIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbiAgXy5lYWNoKFsnZXNjYXBlJywgJ3VuZXNjYXBlJ10sIGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIF9bbWV0aG9kXSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgaWYgKHN0cmluZyA9PSBudWxsKSByZXR1cm4gJyc7XG4gICAgICByZXR1cm4gKCcnICsgc3RyaW5nKS5yZXBsYWNlKGVudGl0eVJlZ2V4ZXNbbWV0aG9kXSwgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGVudGl0eU1hcFttZXRob2RdW21hdGNoXTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgcHJvcGVydHkgaXMgYSBmdW5jdGlvbiB0aGVuIGludm9rZSBpdDtcbiAgLy8gb3RoZXJ3aXNlLCByZXR1cm4gaXQuXG4gIF8ucmVzdWx0ID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICB9O1xuXG4gIC8vIEFkZCB5b3VyIG93biBjdXN0b20gZnVuY3Rpb25zIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5taXhpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGVhY2goXy5mdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSl7XG4gICAgICB2YXIgZnVuYyA9IF9bbmFtZV0gPSBvYmpbbmFtZV07XG4gICAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IFt0aGlzLl93cmFwcGVkXTtcbiAgICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4gIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICBfLnVuaXF1ZUlkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGlkID0gaWRDb3VudGVyKys7XG4gICAgcmV0dXJuIHByZWZpeCA/IHByZWZpeCArIGlkIDogaWQ7XG4gIH07XG5cbiAgLy8gQnkgZGVmYXVsdCwgVW5kZXJzY29yZSB1c2VzIEVSQi1zdHlsZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLCBjaGFuZ2UgdGhlXG4gIC8vIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgXy50ZW1wbGF0ZVNldHRpbmdzID0ge1xuICAgIGV2YWx1YXRlICAgIDogLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICBpbnRlcnBvbGF0ZSA6IC88JT0oW1xcc1xcU10rPyklPi9nLFxuICAgIGVzY2FwZSAgICAgIDogLzwlLShbXFxzXFxTXSs/KSU+L2dcbiAgfTtcblxuICAvLyBXaGVuIGN1c3RvbWl6aW5nIGB0ZW1wbGF0ZVNldHRpbmdzYCwgaWYgeW91IGRvbid0IHdhbnQgdG8gZGVmaW5lIGFuXG4gIC8vIGludGVycG9sYXRpb24sIGV2YWx1YXRpb24gb3IgZXNjYXBpbmcgcmVnZXgsIHdlIG5lZWQgb25lIHRoYXQgaXNcbiAgLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guXG4gIHZhciBub01hdGNoID0gLyguKV4vO1xuXG4gIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhXG4gIC8vIHN0cmluZyBsaXRlcmFsLlxuICB2YXIgZXNjYXBlcyA9IHtcbiAgICBcIidcIjogICAgICBcIidcIixcbiAgICAnXFxcXCc6ICAgICAnXFxcXCcsXG4gICAgJ1xccic6ICAgICAncicsXG4gICAgJ1xcbic6ICAgICAnbicsXG4gICAgJ1xcdCc6ICAgICAndCcsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIHZhciBlc2NhcGVyID0gL1xcXFx8J3xcXHJ8XFxufFxcdHxcXHUyMDI4fFxcdTIwMjkvZztcblxuICAvLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuICBfLnRlbXBsYXRlID0gZnVuY3Rpb24odGV4dCwgZGF0YSwgc2V0dGluZ3MpIHtcbiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xuXG4gICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgICAgICAucmVwbGFjZShlc2NhcGVyLCBmdW5jdGlvbihtYXRjaCkgeyByZXR1cm4gJ1xcXFwnICsgZXNjYXBlc1ttYXRjaF07IH0pO1xuICAgICAgc291cmNlICs9XG4gICAgICAgIGVzY2FwZSA/IFwiJytcXG4oKF9fdD0oXCIgKyBlc2NhcGUgKyBcIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xcbidcIiA6XG4gICAgICAgIGludGVycG9sYXRlID8gXCInK1xcbigoX190PShcIiArIGludGVycG9sYXRlICsgXCIpKT09bnVsbD8nJzpfX3QpK1xcbidcIiA6XG4gICAgICAgIGV2YWx1YXRlID8gXCInO1xcblwiICsgZXZhbHVhdGUgKyBcIlxcbl9fcCs9J1wiIDogJyc7XG4gICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcbiAgICB9KTtcbiAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS5cbiAgICBpZiAoIXNldHRpbmdzLnZhcmlhYmxlKSBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXG4nICsgc291cmNlICsgJ31cXG4nO1xuXG4gICAgc291cmNlID0gXCJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sXCIgK1xuICAgICAgXCJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xcblwiICtcbiAgICAgIHNvdXJjZSArIFwicmV0dXJuIF9fcDtcXG5cIjtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgcmVuZGVyID0gbmV3IEZ1bmN0aW9uKHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonLCAnXycsIHNvdXJjZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIGlmIChkYXRhKSByZXR1cm4gcmVuZGVyKGRhdGEsIF8pO1xuICAgIHZhciB0ZW1wbGF0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBkYXRhLCBfKTtcbiAgICB9O1xuXG4gICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24gc291cmNlIGFzIGEgY29udmVuaWVuY2UgZm9yIHByZWNvbXBpbGF0aW9uLlxuICAgIHRlbXBsYXRlLnNvdXJjZSA9ICdmdW5jdGlvbignICsgKHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonKSArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy8gQWRkIGEgXCJjaGFpblwiIGZ1bmN0aW9uLCB3aGljaCB3aWxsIGRlbGVnYXRlIHRvIHRoZSB3cmFwcGVyLlxuICBfLmNoYWluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8ob2JqKS5jaGFpbigpO1xuICB9O1xuXG4gIC8vIE9PUFxuICAvLyAtLS0tLS0tLS0tLS0tLS1cbiAgLy8gSWYgVW5kZXJzY29yZSBpcyBjYWxsZWQgYXMgYSBmdW5jdGlvbiwgaXQgcmV0dXJucyBhIHdyYXBwZWQgb2JqZWN0IHRoYXRcbiAgLy8gY2FuIGJlIHVzZWQgT08tc3R5bGUuIFRoaXMgd3JhcHBlciBob2xkcyBhbHRlcmVkIHZlcnNpb25zIG9mIGFsbCB0aGVcbiAgLy8gdW5kZXJzY29yZSBmdW5jdGlvbnMuIFdyYXBwZWQgb2JqZWN0cyBtYXkgYmUgY2hhaW5lZC5cblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udGludWUgY2hhaW5pbmcgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gIHZhciByZXN1bHQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajtcbiAgfTtcblxuICAvLyBBZGQgYWxsIG9mIHRoZSBVbmRlcnNjb3JlIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlciBvYmplY3QuXG4gIF8ubWl4aW4oXyk7XG5cbiAgLy8gQWRkIGFsbCBtdXRhdG9yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgZWFjaChbJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLl93cmFwcGVkO1xuICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICAgIGlmICgobmFtZSA9PSAnc2hpZnQnIHx8IG5hbWUgPT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07XG4gICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgb2JqKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcblxuICBfLmV4dGVuZChfLnByb3RvdHlwZSwge1xuXG4gICAgLy8gU3RhcnQgY2hhaW5pbmcgYSB3cmFwcGVkIFVuZGVyc2NvcmUgb2JqZWN0LlxuICAgIGNoYWluOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2NoYWluID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBFeHRyYWN0cyB0aGUgcmVzdWx0IGZyb20gYSB3cmFwcGVkIGFuZCBjaGFpbmVkIG9iamVjdC5cbiAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDtcbiAgICB9XG5cbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbn0pKCkiLCIoZnVuY3Rpb24oKXsvLyAgICAgQmFja2JvbmUuanMgMS4wLjBcblxuLy8gICAgIChjKSAyMDEwLTIwMTMgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIEluYy5cbi8vICAgICBCYWNrYm9uZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8vICAgICBGb3IgYWxsIGRldGFpbHMgYW5kIGRvY3VtZW50YXRpb246XG4vLyAgICAgaHR0cDovL2JhY2tib25lanMub3JnXG5cbihmdW5jdGlvbigpe1xuXG4gIC8vIEluaXRpYWwgU2V0dXBcbiAgLy8gLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBgZXhwb3J0c2BcbiAgLy8gb24gdGhlIHNlcnZlcikuXG4gIHZhciByb290ID0gdGhpcztcblxuICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYEJhY2tib25lYCB2YXJpYWJsZSwgc28gdGhhdCBpdCBjYW4gYmVcbiAgLy8gcmVzdG9yZWQgbGF0ZXIgb24sIGlmIGBub0NvbmZsaWN0YCBpcyB1c2VkLlxuICB2YXIgcHJldmlvdXNCYWNrYm9uZSA9IHJvb3QuQmFja2JvbmU7XG5cbiAgLy8gQ3JlYXRlIGxvY2FsIHJlZmVyZW5jZXMgdG8gYXJyYXkgbWV0aG9kcyB3ZSdsbCB3YW50IHRvIHVzZSBsYXRlci5cbiAgdmFyIGFycmF5ID0gW107XG4gIHZhciBwdXNoID0gYXJyYXkucHVzaDtcbiAgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4gIHZhciBzcGxpY2UgPSBhcnJheS5zcGxpY2U7XG5cbiAgLy8gVGhlIHRvcC1sZXZlbCBuYW1lc3BhY2UuIEFsbCBwdWJsaWMgQmFja2JvbmUgY2xhc3NlcyBhbmQgbW9kdWxlcyB3aWxsXG4gIC8vIGJlIGF0dGFjaGVkIHRvIHRoaXMuIEV4cG9ydGVkIGZvciBib3RoIHRoZSBicm93c2VyIGFuZCB0aGUgc2VydmVyLlxuICB2YXIgQmFja2JvbmU7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBCYWNrYm9uZSA9IGV4cG9ydHM7XG4gIH0gZWxzZSB7XG4gICAgQmFja2JvbmUgPSByb290LkJhY2tib25lID0ge307XG4gIH1cblxuICAvLyBDdXJyZW50IHZlcnNpb24gb2YgdGhlIGxpYnJhcnkuIEtlZXAgaW4gc3luYyB3aXRoIGBwYWNrYWdlLmpzb25gLlxuICBCYWNrYm9uZS5WRVJTSU9OID0gJzEuMC4wJztcblxuICAvLyBSZXF1aXJlIFVuZGVyc2NvcmUsIGlmIHdlJ3JlIG9uIHRoZSBzZXJ2ZXIsIGFuZCBpdCdzIG5vdCBhbHJlYWR5IHByZXNlbnQuXG4gIHZhciBfID0gcm9vdC5fO1xuICBpZiAoIV8gJiYgKHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJykpIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5cbiAgLy8gRm9yIEJhY2tib25lJ3MgcHVycG9zZXMsIGpRdWVyeSwgWmVwdG8sIEVuZGVyLCBvciBNeSBMaWJyYXJ5IChraWRkaW5nKSBvd25zXG4gIC8vIHRoZSBgJGAgdmFyaWFibGUuXG4gIEJhY2tib25lLiQgPSByb290LmpRdWVyeSB8fCByb290LlplcHRvIHx8IHJvb3QuZW5kZXIgfHwgcm9vdC4kO1xuXG4gIC8vIFJ1bnMgQmFja2JvbmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYEJhY2tib25lYCB2YXJpYWJsZVxuICAvLyB0byBpdHMgcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhpcyBCYWNrYm9uZSBvYmplY3QuXG4gIEJhY2tib25lLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290LkJhY2tib25lID0gcHJldmlvdXNCYWNrYm9uZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBUdXJuIG9uIGBlbXVsYXRlSFRUUGAgdG8gc3VwcG9ydCBsZWdhY3kgSFRUUCBzZXJ2ZXJzLiBTZXR0aW5nIHRoaXMgb3B0aW9uXG4gIC8vIHdpbGwgZmFrZSBgXCJQVVRcImAgYW5kIGBcIkRFTEVURVwiYCByZXF1ZXN0cyB2aWEgdGhlIGBfbWV0aG9kYCBwYXJhbWV0ZXIgYW5kXG4gIC8vIHNldCBhIGBYLUh0dHAtTWV0aG9kLU92ZXJyaWRlYCBoZWFkZXIuXG4gIEJhY2tib25lLmVtdWxhdGVIVFRQID0gZmFsc2U7XG5cbiAgLy8gVHVybiBvbiBgZW11bGF0ZUpTT05gIHRvIHN1cHBvcnQgbGVnYWN5IHNlcnZlcnMgdGhhdCBjYW4ndCBkZWFsIHdpdGggZGlyZWN0XG4gIC8vIGBhcHBsaWNhdGlvbi9qc29uYCByZXF1ZXN0cyAuLi4gd2lsbCBlbmNvZGUgdGhlIGJvZHkgYXNcbiAgLy8gYGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZGAgaW5zdGVhZCBhbmQgd2lsbCBzZW5kIHRoZSBtb2RlbCBpbiBhXG4gIC8vIGZvcm0gcGFyYW0gbmFtZWQgYG1vZGVsYC5cbiAgQmFja2JvbmUuZW11bGF0ZUpTT04gPSBmYWxzZTtcblxuICAvLyBCYWNrYm9uZS5FdmVudHNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gQSBtb2R1bGUgdGhhdCBjYW4gYmUgbWl4ZWQgaW4gdG8gKmFueSBvYmplY3QqIGluIG9yZGVyIHRvIHByb3ZpZGUgaXQgd2l0aFxuICAvLyBjdXN0b20gZXZlbnRzLiBZb3UgbWF5IGJpbmQgd2l0aCBgb25gIG9yIHJlbW92ZSB3aXRoIGBvZmZgIGNhbGxiYWNrXG4gIC8vIGZ1bmN0aW9ucyB0byBhbiBldmVudDsgYHRyaWdnZXJgLWluZyBhbiBldmVudCBmaXJlcyBhbGwgY2FsbGJhY2tzIGluXG4gIC8vIHN1Y2Nlc3Npb24uXG4gIC8vXG4gIC8vICAgICB2YXIgb2JqZWN0ID0ge307XG4gIC8vICAgICBfLmV4dGVuZChvYmplY3QsIEJhY2tib25lLkV2ZW50cyk7XG4gIC8vICAgICBvYmplY3Qub24oJ2V4cGFuZCcsIGZ1bmN0aW9uKCl7IGFsZXJ0KCdleHBhbmRlZCcpOyB9KTtcbiAgLy8gICAgIG9iamVjdC50cmlnZ2VyKCdleHBhbmQnKTtcbiAgLy9cbiAgdmFyIEV2ZW50cyA9IEJhY2tib25lLkV2ZW50cyA9IHtcblxuICAgIC8vIEJpbmQgYW4gZXZlbnQgdG8gYSBgY2FsbGJhY2tgIGZ1bmN0aW9uLiBQYXNzaW5nIGBcImFsbFwiYCB3aWxsIGJpbmRcbiAgICAvLyB0aGUgY2FsbGJhY2sgdG8gYWxsIGV2ZW50cyBmaXJlZC5cbiAgICBvbjogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgIGlmICghZXZlbnRzQXBpKHRoaXMsICdvbicsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pIHx8ICFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gICAgICB0aGlzLl9ldmVudHMgfHwgKHRoaXMuX2V2ZW50cyA9IHt9KTtcbiAgICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNbbmFtZV0gfHwgKHRoaXMuX2V2ZW50c1tuYW1lXSA9IFtdKTtcbiAgICAgIGV2ZW50cy5wdXNoKHtjYWxsYmFjazogY2FsbGJhY2ssIGNvbnRleHQ6IGNvbnRleHQsIGN0eDogY29udGV4dCB8fCB0aGlzfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gQmluZCBhbiBldmVudCB0byBvbmx5IGJlIHRyaWdnZXJlZCBhIHNpbmdsZSB0aW1lLiBBZnRlciB0aGUgZmlyc3QgdGltZVxuICAgIC8vIHRoZSBjYWxsYmFjayBpcyBpbnZva2VkLCBpdCB3aWxsIGJlIHJlbW92ZWQuXG4gICAgb25jZTogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgIGlmICghZXZlbnRzQXBpKHRoaXMsICdvbmNlJywgbmFtZSwgW2NhbGxiYWNrLCBjb250ZXh0XSkgfHwgIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBvbmNlID0gXy5vbmNlKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLm9mZihuYW1lLCBvbmNlKTtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgICAgb25jZS5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIG9uY2UsIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICAvLyBSZW1vdmUgb25lIG9yIG1hbnkgY2FsbGJhY2tzLiBJZiBgY29udGV4dGAgaXMgbnVsbCwgcmVtb3ZlcyBhbGxcbiAgICAvLyBjYWxsYmFja3Mgd2l0aCB0aGF0IGZ1bmN0aW9uLiBJZiBgY2FsbGJhY2tgIGlzIG51bGwsIHJlbW92ZXMgYWxsXG4gICAgLy8gY2FsbGJhY2tzIGZvciB0aGUgZXZlbnQuIElmIGBuYW1lYCBpcyBudWxsLCByZW1vdmVzIGFsbCBib3VuZFxuICAgIC8vIGNhbGxiYWNrcyBmb3IgYWxsIGV2ZW50cy5cbiAgICBvZmY6IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmV0YWluLCBldiwgZXZlbnRzLCBuYW1lcywgaSwgbCwgaiwgaztcbiAgICAgIGlmICghdGhpcy5fZXZlbnRzIHx8ICFldmVudHNBcGkodGhpcywgJ29mZicsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pKSByZXR1cm4gdGhpcztcbiAgICAgIGlmICghbmFtZSAmJiAhY2FsbGJhY2sgJiYgIWNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBuYW1lcyA9IG5hbWUgPyBbbmFtZV0gOiBfLmtleXModGhpcy5fZXZlbnRzKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBuYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbmFtZSA9IG5hbWVzW2ldO1xuICAgICAgICBpZiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzW25hbWVdID0gcmV0YWluID0gW107XG4gICAgICAgICAgaWYgKGNhbGxiYWNrIHx8IGNvbnRleHQpIHtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGsgPSBldmVudHMubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICAgIGV2ID0gZXZlbnRzW2pdO1xuICAgICAgICAgICAgICBpZiAoKGNhbGxiYWNrICYmIGNhbGxiYWNrICE9PSBldi5jYWxsYmFjayAmJiBjYWxsYmFjayAhPT0gZXYuY2FsbGJhY2suX2NhbGxiYWNrKSB8fFxuICAgICAgICAgICAgICAgICAgKGNvbnRleHQgJiYgY29udGV4dCAhPT0gZXYuY29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICByZXRhaW4ucHVzaChldik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFyZXRhaW4ubGVuZ3RoKSBkZWxldGUgdGhpcy5fZXZlbnRzW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBUcmlnZ2VyIG9uZSBvciBtYW55IGV2ZW50cywgZmlyaW5nIGFsbCBib3VuZCBjYWxsYmFja3MuIENhbGxiYWNrcyBhcmVcbiAgICAvLyBwYXNzZWQgdGhlIHNhbWUgYXJndW1lbnRzIGFzIGB0cmlnZ2VyYCBpcywgYXBhcnQgZnJvbSB0aGUgZXZlbnQgbmFtZVxuICAgIC8vICh1bmxlc3MgeW91J3JlIGxpc3RlbmluZyBvbiBgXCJhbGxcImAsIHdoaWNoIHdpbGwgY2F1c2UgeW91ciBjYWxsYmFjayB0b1xuICAgIC8vIHJlY2VpdmUgdGhlIHRydWUgbmFtZSBvZiB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50KS5cbiAgICB0cmlnZ2VyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBpZiAoIXRoaXMuX2V2ZW50cykgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIGlmICghZXZlbnRzQXBpKHRoaXMsICd0cmlnZ2VyJywgbmFtZSwgYXJncykpIHJldHVybiB0aGlzO1xuICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tuYW1lXTtcbiAgICAgIHZhciBhbGxFdmVudHMgPSB0aGlzLl9ldmVudHMuYWxsO1xuICAgICAgaWYgKGV2ZW50cykgdHJpZ2dlckV2ZW50cyhldmVudHMsIGFyZ3MpO1xuICAgICAgaWYgKGFsbEV2ZW50cykgdHJpZ2dlckV2ZW50cyhhbGxFdmVudHMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gVGVsbCB0aGlzIG9iamVjdCB0byBzdG9wIGxpc3RlbmluZyB0byBlaXRoZXIgc3BlY2lmaWMgZXZlbnRzIC4uLiBvclxuICAgIC8vIHRvIGV2ZXJ5IG9iamVjdCBpdCdzIGN1cnJlbnRseSBsaXN0ZW5pbmcgdG8uXG4gICAgc3RvcExpc3RlbmluZzogZnVuY3Rpb24ob2JqLCBuYW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICAgIGlmICghbGlzdGVuZXJzKSByZXR1cm4gdGhpcztcbiAgICAgIHZhciBkZWxldGVMaXN0ZW5lciA9ICFuYW1lICYmICFjYWxsYmFjaztcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIGNhbGxiYWNrID0gdGhpcztcbiAgICAgIGlmIChvYmopIChsaXN0ZW5lcnMgPSB7fSlbb2JqLl9saXN0ZW5lcklkXSA9IG9iajtcbiAgICAgIGZvciAodmFyIGlkIGluIGxpc3RlbmVycykge1xuICAgICAgICBsaXN0ZW5lcnNbaWRdLm9mZihuYW1lLCBjYWxsYmFjaywgdGhpcyk7XG4gICAgICAgIGlmIChkZWxldGVMaXN0ZW5lcikgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tpZF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgfTtcblxuICAvLyBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byBzcGxpdCBldmVudCBzdHJpbmdzLlxuICB2YXIgZXZlbnRTcGxpdHRlciA9IC9cXHMrLztcblxuICAvLyBJbXBsZW1lbnQgZmFuY3kgZmVhdHVyZXMgb2YgdGhlIEV2ZW50cyBBUEkgc3VjaCBhcyBtdWx0aXBsZSBldmVudFxuICAvLyBuYW1lcyBgXCJjaGFuZ2UgYmx1clwiYCBhbmQgalF1ZXJ5LXN0eWxlIGV2ZW50IG1hcHMgYHtjaGFuZ2U6IGFjdGlvbn1gXG4gIC8vIGluIHRlcm1zIG9mIHRoZSBleGlzdGluZyBBUEkuXG4gIHZhciBldmVudHNBcGkgPSBmdW5jdGlvbihvYmosIGFjdGlvbiwgbmFtZSwgcmVzdCkge1xuICAgIGlmICghbmFtZSkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBIYW5kbGUgZXZlbnQgbWFwcy5cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xuICAgICAgICBvYmpbYWN0aW9uXS5hcHBseShvYmosIFtrZXksIG5hbWVba2V5XV0uY29uY2F0KHJlc3QpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgc3BhY2Ugc2VwYXJhdGVkIGV2ZW50IG5hbWVzLlxuICAgIGlmIChldmVudFNwbGl0dGVyLnRlc3QobmFtZSkpIHtcbiAgICAgIHZhciBuYW1lcyA9IG5hbWUuc3BsaXQoZXZlbnRTcGxpdHRlcik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBvYmpbYWN0aW9uXS5hcHBseShvYmosIFtuYW1lc1tpXV0uY29uY2F0KHJlc3QpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBBIGRpZmZpY3VsdC10by1iZWxpZXZlLCBidXQgb3B0aW1pemVkIGludGVybmFsIGRpc3BhdGNoIGZ1bmN0aW9uIGZvclxuICAvLyB0cmlnZ2VyaW5nIGV2ZW50cy4gVHJpZXMgdG8ga2VlcCB0aGUgdXN1YWwgY2FzZXMgc3BlZWR5IChtb3N0IGludGVybmFsXG4gIC8vIEJhY2tib25lIGV2ZW50cyBoYXZlIDMgYXJndW1lbnRzKS5cbiAgdmFyIHRyaWdnZXJFdmVudHMgPSBmdW5jdGlvbihldmVudHMsIGFyZ3MpIHtcbiAgICB2YXIgZXYsIGkgPSAtMSwgbCA9IGV2ZW50cy5sZW5ndGgsIGExID0gYXJnc1swXSwgYTIgPSBhcmdzWzFdLCBhMyA9IGFyZ3NbMl07XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCk7IHJldHVybjtcbiAgICAgIGNhc2UgMTogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExKTsgcmV0dXJuO1xuICAgICAgY2FzZSAyOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEsIGEyKTsgcmV0dXJuO1xuICAgICAgY2FzZSAzOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEsIGEyLCBhMyk7IHJldHVybjtcbiAgICAgIGRlZmF1bHQ6IHdoaWxlICgrK2kgPCBsKSAoZXYgPSBldmVudHNbaV0pLmNhbGxiYWNrLmFwcGx5KGV2LmN0eCwgYXJncyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5NZXRob2RzID0ge2xpc3RlblRvOiAnb24nLCBsaXN0ZW5Ub09uY2U6ICdvbmNlJ307XG5cbiAgLy8gSW52ZXJzaW9uLW9mLWNvbnRyb2wgdmVyc2lvbnMgb2YgYG9uYCBhbmQgYG9uY2VgLiBUZWxsICp0aGlzKiBvYmplY3QgdG9cbiAgLy8gbGlzdGVuIHRvIGFuIGV2ZW50IGluIGFub3RoZXIgb2JqZWN0IC4uLiBrZWVwaW5nIHRyYWNrIG9mIHdoYXQgaXQnc1xuICAvLyBsaXN0ZW5pbmcgdG8uXG4gIF8uZWFjaChsaXN0ZW5NZXRob2RzLCBmdW5jdGlvbihpbXBsZW1lbnRhdGlvbiwgbWV0aG9kKSB7XG4gICAgRXZlbnRzW21ldGhvZF0gPSBmdW5jdGlvbihvYmosIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzIHx8ICh0aGlzLl9saXN0ZW5lcnMgPSB7fSk7XG4gICAgICB2YXIgaWQgPSBvYmouX2xpc3RlbmVySWQgfHwgKG9iai5fbGlzdGVuZXJJZCA9IF8udW5pcXVlSWQoJ2wnKSk7XG4gICAgICBsaXN0ZW5lcnNbaWRdID0gb2JqO1xuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgY2FsbGJhY2sgPSB0aGlzO1xuICAgICAgb2JqW2ltcGxlbWVudGF0aW9uXShuYW1lLCBjYWxsYmFjaywgdGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICB9KTtcblxuICAvLyBBbGlhc2VzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgRXZlbnRzLmJpbmQgICA9IEV2ZW50cy5vbjtcbiAgRXZlbnRzLnVuYmluZCA9IEV2ZW50cy5vZmY7XG5cbiAgLy8gQWxsb3cgdGhlIGBCYWNrYm9uZWAgb2JqZWN0IHRvIHNlcnZlIGFzIGEgZ2xvYmFsIGV2ZW50IGJ1cywgZm9yIGZvbGtzIHdob1xuICAvLyB3YW50IGdsb2JhbCBcInB1YnN1YlwiIGluIGEgY29udmVuaWVudCBwbGFjZS5cbiAgXy5leHRlbmQoQmFja2JvbmUsIEV2ZW50cyk7XG5cbiAgLy8gQmFja2JvbmUuTW9kZWxcbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICAvLyBCYWNrYm9uZSAqKk1vZGVscyoqIGFyZSB0aGUgYmFzaWMgZGF0YSBvYmplY3QgaW4gdGhlIGZyYW1ld29yayAtLVxuICAvLyBmcmVxdWVudGx5IHJlcHJlc2VudGluZyBhIHJvdyBpbiBhIHRhYmxlIGluIGEgZGF0YWJhc2Ugb24geW91ciBzZXJ2ZXIuXG4gIC8vIEEgZGlzY3JldGUgY2h1bmsgb2YgZGF0YSBhbmQgYSBidW5jaCBvZiB1c2VmdWwsIHJlbGF0ZWQgbWV0aG9kcyBmb3JcbiAgLy8gcGVyZm9ybWluZyBjb21wdXRhdGlvbnMgYW5kIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGF0IGRhdGEuXG5cbiAgLy8gQ3JlYXRlIGEgbmV3IG1vZGVsIHdpdGggdGhlIHNwZWNpZmllZCBhdHRyaWJ1dGVzLiBBIGNsaWVudCBpZCAoYGNpZGApXG4gIC8vIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGFuZCBhc3NpZ25lZCBmb3IgeW91LlxuICB2YXIgTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbCA9IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGVmYXVsdHM7XG4gICAgdmFyIGF0dHJzID0gYXR0cmlidXRlcyB8fCB7fTtcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIHRoaXMuY2lkID0gXy51bmlxdWVJZCgnYycpO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgIF8uZXh0ZW5kKHRoaXMsIF8ucGljayhvcHRpb25zLCBtb2RlbE9wdGlvbnMpKTtcbiAgICBpZiAob3B0aW9ucy5wYXJzZSkgYXR0cnMgPSB0aGlzLnBhcnNlKGF0dHJzLCBvcHRpb25zKSB8fCB7fTtcbiAgICBpZiAoZGVmYXVsdHMgPSBfLnJlc3VsdCh0aGlzLCAnZGVmYXVsdHMnKSkge1xuICAgICAgYXR0cnMgPSBfLmRlZmF1bHRzKHt9LCBhdHRycywgZGVmYXVsdHMpO1xuICAgIH1cbiAgICB0aGlzLnNldChhdHRycywgb3B0aW9ucyk7XG4gICAgdGhpcy5jaGFuZ2VkID0ge307XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQSBsaXN0IG9mIG9wdGlvbnMgdG8gYmUgYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlIG1vZGVsLCBpZiBwcm92aWRlZC5cbiAgdmFyIG1vZGVsT3B0aW9ucyA9IFsndXJsJywgJ3VybFJvb3QnLCAnY29sbGVjdGlvbiddO1xuXG4gIC8vIEF0dGFjaCBhbGwgaW5oZXJpdGFibGUgbWV0aG9kcyB0byB0aGUgTW9kZWwgcHJvdG90eXBlLlxuICBfLmV4dGVuZChNb2RlbC5wcm90b3R5cGUsIEV2ZW50cywge1xuXG4gICAgLy8gQSBoYXNoIG9mIGF0dHJpYnV0ZXMgd2hvc2UgY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWUgZGlmZmVyLlxuICAgIGNoYW5nZWQ6IG51bGwsXG5cbiAgICAvLyBUaGUgdmFsdWUgcmV0dXJuZWQgZHVyaW5nIHRoZSBsYXN0IGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgIHZhbGlkYXRpb25FcnJvcjogbnVsbCxcblxuICAgIC8vIFRoZSBkZWZhdWx0IG5hbWUgZm9yIHRoZSBKU09OIGBpZGAgYXR0cmlidXRlIGlzIGBcImlkXCJgLiBNb25nb0RCIGFuZFxuICAgIC8vIENvdWNoREIgdXNlcnMgbWF5IHdhbnQgdG8gc2V0IHRoaXMgdG8gYFwiX2lkXCJgLlxuICAgIGlkQXR0cmlidXRlOiAnaWQnLFxuXG4gICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duXG4gICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LFxuXG4gICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgbW9kZWwncyBgYXR0cmlidXRlc2Agb2JqZWN0LlxuICAgIHRvSlNPTjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICB9LFxuXG4gICAgLy8gUHJveHkgYEJhY2tib25lLnN5bmNgIGJ5IGRlZmF1bHQgLS0gYnV0IG92ZXJyaWRlIHRoaXMgaWYgeW91IG5lZWRcbiAgICAvLyBjdXN0b20gc3luY2luZyBzZW1hbnRpY3MgZm9yICp0aGlzKiBwYXJ0aWN1bGFyIG1vZGVsLlxuICAgIHN5bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIEJhY2tib25lLnN5bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLy8gR2V0IHRoZSB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUuXG4gICAgZ2V0OiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJdO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgdGhlIEhUTUwtZXNjYXBlZCB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUuXG4gICAgZXNjYXBlOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICByZXR1cm4gXy5lc2NhcGUodGhpcy5nZXQoYXR0cikpO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXR0cmlidXRlIGNvbnRhaW5zIGEgdmFsdWUgdGhhdCBpcyBub3QgbnVsbFxuICAgIC8vIG9yIHVuZGVmaW5lZC5cbiAgICBoYXM6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChhdHRyKSAhPSBudWxsO1xuICAgIH0sXG5cbiAgICAvLyBTZXQgYSBoYXNoIG9mIG1vZGVsIGF0dHJpYnV0ZXMgb24gdGhlIG9iamVjdCwgZmlyaW5nIGBcImNoYW5nZVwiYC4gVGhpcyBpc1xuICAgIC8vIHRoZSBjb3JlIHByaW1pdGl2ZSBvcGVyYXRpb24gb2YgYSBtb2RlbCwgdXBkYXRpbmcgdGhlIGRhdGEgYW5kIG5vdGlmeWluZ1xuICAgIC8vIGFueW9uZSB3aG8gbmVlZHMgdG8ga25vdyBhYm91dCB0aGUgY2hhbmdlIGluIHN0YXRlLiBUaGUgaGVhcnQgb2YgdGhlIGJlYXN0LlxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWwsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBhdHRyLCBhdHRycywgdW5zZXQsIGNoYW5nZXMsIHNpbGVudCwgY2hhbmdpbmcsIHByZXYsIGN1cnJlbnQ7XG4gICAgICBpZiAoa2V5ID09IG51bGwpIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBIYW5kbGUgYm90aCBgXCJrZXlcIiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGF0dHJzID0ga2V5O1xuICAgICAgICBvcHRpb25zID0gdmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKGF0dHJzID0ge30pW2tleV0gPSB2YWw7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG5cbiAgICAgIC8vIFJ1biB2YWxpZGF0aW9uLlxuICAgICAgaWYgKCF0aGlzLl92YWxpZGF0ZShhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gRXh0cmFjdCBhdHRyaWJ1dGVzIGFuZCBvcHRpb25zLlxuICAgICAgdW5zZXQgICAgICAgICAgID0gb3B0aW9ucy51bnNldDtcbiAgICAgIHNpbGVudCAgICAgICAgICA9IG9wdGlvbnMuc2lsZW50O1xuICAgICAgY2hhbmdlcyAgICAgICAgID0gW107XG4gICAgICBjaGFuZ2luZyAgICAgICAgPSB0aGlzLl9jaGFuZ2luZztcbiAgICAgIHRoaXMuX2NoYW5naW5nICA9IHRydWU7XG5cbiAgICAgIGlmICghY2hhbmdpbmcpIHtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzID0gXy5jbG9uZSh0aGlzLmF0dHJpYnV0ZXMpO1xuICAgICAgICB0aGlzLmNoYW5nZWQgPSB7fTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSB0aGlzLmF0dHJpYnV0ZXMsIHByZXYgPSB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXM7XG5cbiAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIG9mIGBpZGAuXG4gICAgICBpZiAodGhpcy5pZEF0dHJpYnV0ZSBpbiBhdHRycykgdGhpcy5pZCA9IGF0dHJzW3RoaXMuaWRBdHRyaWJ1dGVdO1xuXG4gICAgICAvLyBGb3IgZWFjaCBgc2V0YCBhdHRyaWJ1dGUsIHVwZGF0ZSBvciBkZWxldGUgdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICBmb3IgKGF0dHIgaW4gYXR0cnMpIHtcbiAgICAgICAgdmFsID0gYXR0cnNbYXR0cl07XG4gICAgICAgIGlmICghXy5pc0VxdWFsKGN1cnJlbnRbYXR0cl0sIHZhbCkpIGNoYW5nZXMucHVzaChhdHRyKTtcbiAgICAgICAgaWYgKCFfLmlzRXF1YWwocHJldlthdHRyXSwgdmFsKSkge1xuICAgICAgICAgIHRoaXMuY2hhbmdlZFthdHRyXSA9IHZhbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5jaGFuZ2VkW2F0dHJdO1xuICAgICAgICB9XG4gICAgICAgIHVuc2V0ID8gZGVsZXRlIGN1cnJlbnRbYXR0cl0gOiBjdXJyZW50W2F0dHJdID0gdmFsO1xuICAgICAgfVxuXG4gICAgICAvLyBUcmlnZ2VyIGFsbCByZWxldmFudCBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgIGlmICghc2lsZW50KSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCkgdGhpcy5fcGVuZGluZyA9IHRydWU7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hhbmdlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZTonICsgY2hhbmdlc1tpXSwgdGhpcywgY3VycmVudFtjaGFuZ2VzW2ldXSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gWW91IG1pZ2h0IGJlIHdvbmRlcmluZyB3aHkgdGhlcmUncyBhIGB3aGlsZWAgbG9vcCBoZXJlLiBDaGFuZ2VzIGNhblxuICAgICAgLy8gYmUgcmVjdXJzaXZlbHkgbmVzdGVkIHdpdGhpbiBgXCJjaGFuZ2VcImAgZXZlbnRzLlxuICAgICAgaWYgKGNoYW5naW5nKSByZXR1cm4gdGhpcztcbiAgICAgIGlmICghc2lsZW50KSB7XG4gICAgICAgIHdoaWxlICh0aGlzLl9wZW5kaW5nKSB7XG4gICAgICAgICAgdGhpcy5fcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgdGhpcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2NoYW5naW5nID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIGFuIGF0dHJpYnV0ZSBmcm9tIHRoZSBtb2RlbCwgZmlyaW5nIGBcImNoYW5nZVwiYC4gYHVuc2V0YCBpcyBhIG5vb3BcbiAgICAvLyBpZiB0aGUgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3QuXG4gICAgdW5zZXQ6IGZ1bmN0aW9uKGF0dHIsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldChhdHRyLCB2b2lkIDAsIF8uZXh0ZW5kKHt9LCBvcHRpb25zLCB7dW5zZXQ6IHRydWV9KSk7XG4gICAgfSxcblxuICAgIC8vIENsZWFyIGFsbCBhdHRyaWJ1dGVzIG9uIHRoZSBtb2RlbCwgZmlyaW5nIGBcImNoYW5nZVwiYC5cbiAgICBjbGVhcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGF0dHJzID0ge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSBhdHRyc1trZXldID0gdm9pZCAwO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHJzLCBfLmV4dGVuZCh7fSwgb3B0aW9ucywge3Vuc2V0OiB0cnVlfSkpO1xuICAgIH0sXG5cbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIG1vZGVsIGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGBcImNoYW5nZVwiYCBldmVudC5cbiAgICAvLyBJZiB5b3Ugc3BlY2lmeSBhbiBhdHRyaWJ1dGUgbmFtZSwgZGV0ZXJtaW5lIGlmIHRoYXQgYXR0cmlidXRlIGhhcyBjaGFuZ2VkLlxuICAgIGhhc0NoYW5nZWQ6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIGlmIChhdHRyID09IG51bGwpIHJldHVybiAhXy5pc0VtcHR5KHRoaXMuY2hhbmdlZCk7XG4gICAgICByZXR1cm4gXy5oYXModGhpcy5jaGFuZ2VkLCBhdHRyKTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgYXR0cmlidXRlcyB0aGF0IGhhdmUgY2hhbmdlZCwgb3JcbiAgICAvLyBmYWxzZSBpZiB0aGVyZSBhcmUgbm8gY2hhbmdlZCBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIGRldGVybWluaW5nIHdoYXRcbiAgICAvLyBwYXJ0cyBvZiBhIHZpZXcgbmVlZCB0byBiZSB1cGRhdGVkIGFuZC9vciB3aGF0IGF0dHJpYnV0ZXMgbmVlZCB0byBiZVxuICAgIC8vIHBlcnNpc3RlZCB0byB0aGUgc2VydmVyLiBVbnNldCBhdHRyaWJ1dGVzIHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAgICAvLyBZb3UgY2FuIGFsc28gcGFzcyBhbiBhdHRyaWJ1dGVzIG9iamVjdCB0byBkaWZmIGFnYWluc3QgdGhlIG1vZGVsLFxuICAgIC8vIGRldGVybWluaW5nIGlmIHRoZXJlICp3b3VsZCBiZSogYSBjaGFuZ2UuXG4gICAgY2hhbmdlZEF0dHJpYnV0ZXM6IGZ1bmN0aW9uKGRpZmYpIHtcbiAgICAgIGlmICghZGlmZikgcmV0dXJuIHRoaXMuaGFzQ2hhbmdlZCgpID8gXy5jbG9uZSh0aGlzLmNoYW5nZWQpIDogZmFsc2U7XG4gICAgICB2YXIgdmFsLCBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICB2YXIgb2xkID0gdGhpcy5fY2hhbmdpbmcgPyB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMgOiB0aGlzLmF0dHJpYnV0ZXM7XG4gICAgICBmb3IgKHZhciBhdHRyIGluIGRpZmYpIHtcbiAgICAgICAgaWYgKF8uaXNFcXVhbChvbGRbYXR0cl0sICh2YWwgPSBkaWZmW2F0dHJdKSkpIGNvbnRpbnVlO1xuICAgICAgICAoY2hhbmdlZCB8fCAoY2hhbmdlZCA9IHt9KSlbYXR0cl0gPSB2YWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9LFxuXG4gICAgLy8gR2V0IHRoZSBwcmV2aW91cyB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUsIHJlY29yZGVkIGF0IHRoZSB0aW1lIHRoZSBsYXN0XG4gICAgLy8gYFwiY2hhbmdlXCJgIGV2ZW50IHdhcyBmaXJlZC5cbiAgICBwcmV2aW91czogZnVuY3Rpb24oYXR0cikge1xuICAgICAgaWYgKGF0dHIgPT0gbnVsbCB8fCAhdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXNbYXR0cl07XG4gICAgfSxcblxuICAgIC8vIEdldCBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIG1vZGVsIGF0IHRoZSB0aW1lIG9mIHRoZSBwcmV2aW91c1xuICAgIC8vIGBcImNoYW5nZVwiYCBldmVudC5cbiAgICBwcmV2aW91c0F0dHJpYnV0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF8uY2xvbmUodGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzKTtcbiAgICB9LFxuXG4gICAgLy8gRmV0Y2ggdGhlIG1vZGVsIGZyb20gdGhlIHNlcnZlci4gSWYgdGhlIHNlcnZlcidzIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuICAgIC8vIG1vZGVsIGRpZmZlcnMgZnJvbSBpdHMgY3VycmVudCBhdHRyaWJ1dGVzLCB0aGV5IHdpbGwgYmUgb3ZlcnJpZGRlbixcbiAgICAvLyB0cmlnZ2VyaW5nIGEgYFwiY2hhbmdlXCJgIGV2ZW50LlxuICAgIGZldGNoOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTtcbiAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlO1xuICAgICAgdmFyIG1vZGVsID0gdGhpcztcbiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICBpZiAoIW1vZGVsLnNldChtb2RlbC5wYXJzZShyZXNwLCBvcHRpb25zKSwgb3B0aW9ucykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBFcnJvcih0aGlzLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLy8gU2V0IGEgaGFzaCBvZiBtb2RlbCBhdHRyaWJ1dGVzLCBhbmQgc3luYyB0aGUgbW9kZWwgdG8gdGhlIHNlcnZlci5cbiAgICAvLyBJZiB0aGUgc2VydmVyIHJldHVybnMgYW4gYXR0cmlidXRlcyBoYXNoIHRoYXQgZGlmZmVycywgdGhlIG1vZGVsJ3NcbiAgICAvLyBzdGF0ZSB3aWxsIGJlIGBzZXRgIGFnYWluLlxuICAgIHNhdmU6IGZ1bmN0aW9uKGtleSwgdmFsLCBvcHRpb25zKSB7XG4gICAgICB2YXIgYXR0cnMsIG1ldGhvZCwgeGhyLCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuXG4gICAgICAvLyBIYW5kbGUgYm90aCBgXCJrZXlcIiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLlxuICAgICAgaWYgKGtleSA9PSBudWxsIHx8IHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGF0dHJzID0ga2V5O1xuICAgICAgICBvcHRpb25zID0gdmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKGF0dHJzID0ge30pW2tleV0gPSB2YWw7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIGFuZCBhdHRyaWJ1dGVzIGV4aXN0LCBzYXZlIGFjdHMgYXMgYHNldChhdHRyKS5zYXZlKG51bGwsIG9wdHMpYC5cbiAgICAgIGlmIChhdHRycyAmJiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMud2FpdCkgJiYgIXRoaXMuc2V0KGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBvcHRpb25zID0gXy5leHRlbmQoe3ZhbGlkYXRlOiB0cnVlfSwgb3B0aW9ucyk7XG5cbiAgICAgIC8vIERvIG5vdCBwZXJzaXN0IGludmFsaWQgbW9kZWxzLlxuICAgICAgaWYgKCF0aGlzLl92YWxpZGF0ZShhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gU2V0IHRlbXBvcmFyeSBhdHRyaWJ1dGVzIGlmIGB7d2FpdDogdHJ1ZX1gLlxuICAgICAgaWYgKGF0dHJzICYmIG9wdGlvbnMud2FpdCkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBfLmV4dGVuZCh7fSwgYXR0cmlidXRlcywgYXR0cnMpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZnRlciBhIHN1Y2Nlc3NmdWwgc2VydmVyLXNpZGUgc2F2ZSwgdGhlIGNsaWVudCBpcyAob3B0aW9uYWxseSlcbiAgICAgIC8vIHVwZGF0ZWQgd2l0aCB0aGUgc2VydmVyLXNpZGUgc3RhdGUuXG4gICAgICBpZiAob3B0aW9ucy5wYXJzZSA9PT0gdm9pZCAwKSBvcHRpb25zLnBhcnNlID0gdHJ1ZTtcbiAgICAgIHZhciBtb2RlbCA9IHRoaXM7XG4gICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgLy8gRW5zdXJlIGF0dHJpYnV0ZXMgYXJlIHJlc3RvcmVkIGR1cmluZyBzeW5jaHJvbm91cyBzYXZlcy5cbiAgICAgICAgbW9kZWwuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIHZhciBzZXJ2ZXJBdHRycyA9IG1vZGVsLnBhcnNlKHJlc3AsIG9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucy53YWl0KSBzZXJ2ZXJBdHRycyA9IF8uZXh0ZW5kKGF0dHJzIHx8IHt9LCBzZXJ2ZXJBdHRycyk7XG4gICAgICAgIGlmIChfLmlzT2JqZWN0KHNlcnZlckF0dHJzKSAmJiAhbW9kZWwuc2V0KHNlcnZlckF0dHJzLCBvcHRpb25zKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICAgIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgd3JhcEVycm9yKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICBtZXRob2QgPSB0aGlzLmlzTmV3KCkgPyAnY3JlYXRlJyA6IChvcHRpb25zLnBhdGNoID8gJ3BhdGNoJyA6ICd1cGRhdGUnKTtcbiAgICAgIGlmIChtZXRob2QgPT09ICdwYXRjaCcpIG9wdGlvbnMuYXR0cnMgPSBhdHRycztcbiAgICAgIHhociA9IHRoaXMuc3luYyhtZXRob2QsIHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICAvLyBSZXN0b3JlIGF0dHJpYnV0ZXMuXG4gICAgICBpZiAoYXR0cnMgJiYgb3B0aW9ucy53YWl0KSB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuXG4gICAgICByZXR1cm4geGhyO1xuICAgIH0sXG5cbiAgICAvLyBEZXN0cm95IHRoaXMgbW9kZWwgb24gdGhlIHNlcnZlciBpZiBpdCB3YXMgYWxyZWFkeSBwZXJzaXN0ZWQuXG4gICAgLy8gT3B0aW1pc3RpY2FsbHkgcmVtb3ZlcyB0aGUgbW9kZWwgZnJvbSBpdHMgY29sbGVjdGlvbiwgaWYgaXQgaGFzIG9uZS5cbiAgICAvLyBJZiBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCB3YWl0cyBmb3IgdGhlIHNlcnZlciB0byByZXNwb25kIGJlZm9yZSByZW1vdmFsLlxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgICAgdmFyIG1vZGVsID0gdGhpcztcbiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuXG4gICAgICB2YXIgZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBtb2RlbC50cmlnZ2VyKCdkZXN0cm95JywgbW9kZWwsIG1vZGVsLmNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgfTtcblxuICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICBpZiAob3B0aW9ucy53YWl0IHx8IG1vZGVsLmlzTmV3KCkpIGRlc3Ryb3koKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoIW1vZGVsLmlzTmV3KCkpIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5pc05ldygpKSB7XG4gICAgICAgIG9wdGlvbnMuc3VjY2VzcygpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7XG5cbiAgICAgIHZhciB4aHIgPSB0aGlzLnN5bmMoJ2RlbGV0ZScsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgaWYgKCFvcHRpb25zLndhaXQpIGRlc3Ryb3koKTtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfSxcblxuICAgIC8vIERlZmF1bHQgVVJMIGZvciB0aGUgbW9kZWwncyByZXByZXNlbnRhdGlvbiBvbiB0aGUgc2VydmVyIC0tIGlmIHlvdSdyZVxuICAgIC8vIHVzaW5nIEJhY2tib25lJ3MgcmVzdGZ1bCBtZXRob2RzLCBvdmVycmlkZSB0aGlzIHRvIGNoYW5nZSB0aGUgZW5kcG9pbnRcbiAgICAvLyB0aGF0IHdpbGwgYmUgY2FsbGVkLlxuICAgIHVybDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmFzZSA9IF8ucmVzdWx0KHRoaXMsICd1cmxSb290JykgfHwgXy5yZXN1bHQodGhpcy5jb2xsZWN0aW9uLCAndXJsJykgfHwgdXJsRXJyb3IoKTtcbiAgICAgIGlmICh0aGlzLmlzTmV3KCkpIHJldHVybiBiYXNlO1xuICAgICAgcmV0dXJuIGJhc2UgKyAoYmFzZS5jaGFyQXQoYmFzZS5sZW5ndGggLSAxKSA9PT0gJy8nID8gJycgOiAnLycpICsgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuaWQpO1xuICAgIH0sXG5cbiAgICAvLyAqKnBhcnNlKiogY29udmVydHMgYSByZXNwb25zZSBpbnRvIHRoZSBoYXNoIG9mIGF0dHJpYnV0ZXMgdG8gYmUgYHNldGAgb25cbiAgICAvLyB0aGUgbW9kZWwuIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGlzIGp1c3QgdG8gcGFzcyB0aGUgcmVzcG9uc2UgYWxvbmcuXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiByZXNwO1xuICAgIH0sXG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgbW9kZWwgd2l0aCBpZGVudGljYWwgYXR0cmlidXRlcyB0byB0aGlzIG9uZS5cbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICB9LFxuXG4gICAgLy8gQSBtb2RlbCBpcyBuZXcgaWYgaXQgaGFzIG5ldmVyIGJlZW4gc2F2ZWQgdG8gdGhlIHNlcnZlciwgYW5kIGxhY2tzIGFuIGlkLlxuICAgIGlzTmV3OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmlkID09IG51bGw7XG4gICAgfSxcblxuICAgIC8vIENoZWNrIGlmIHRoZSBtb2RlbCBpcyBjdXJyZW50bHkgaW4gYSB2YWxpZCBzdGF0ZS5cbiAgICBpc1ZhbGlkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGUoe30sIF8uZXh0ZW5kKG9wdGlvbnMgfHwge30sIHsgdmFsaWRhdGU6IHRydWUgfSkpO1xuICAgIH0sXG5cbiAgICAvLyBSdW4gdmFsaWRhdGlvbiBhZ2FpbnN0IHRoZSBuZXh0IGNvbXBsZXRlIHNldCBvZiBtb2RlbCBhdHRyaWJ1dGVzLFxuICAgIC8vIHJldHVybmluZyBgdHJ1ZWAgaWYgYWxsIGlzIHdlbGwuIE90aGVyd2lzZSwgZmlyZSBhbiBgXCJpbnZhbGlkXCJgIGV2ZW50LlxuICAgIF92YWxpZGF0ZTogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucy52YWxpZGF0ZSB8fCAhdGhpcy52YWxpZGF0ZSkgcmV0dXJuIHRydWU7XG4gICAgICBhdHRycyA9IF8uZXh0ZW5kKHt9LCB0aGlzLmF0dHJpYnV0ZXMsIGF0dHJzKTtcbiAgICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGlvbkVycm9yID0gdGhpcy52YWxpZGF0ZShhdHRycywgb3B0aW9ucykgfHwgbnVsbDtcbiAgICAgIGlmICghZXJyb3IpIHJldHVybiB0cnVlO1xuICAgICAgdGhpcy50cmlnZ2VyKCdpbnZhbGlkJywgdGhpcywgZXJyb3IsIF8uZXh0ZW5kKG9wdGlvbnMgfHwge30sIHt2YWxpZGF0aW9uRXJyb3I6IGVycm9yfSkpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICB9KTtcblxuICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB3ZSB3YW50IHRvIGltcGxlbWVudCBvbiB0aGUgTW9kZWwuXG4gIHZhciBtb2RlbE1ldGhvZHMgPSBbJ2tleXMnLCAndmFsdWVzJywgJ3BhaXJzJywgJ2ludmVydCcsICdwaWNrJywgJ29taXQnXTtcblxuICAvLyBNaXggaW4gZWFjaCBVbmRlcnNjb3JlIG1ldGhvZCBhcyBhIHByb3h5IHRvIGBNb2RlbCNhdHRyaWJ1dGVzYC5cbiAgXy5lYWNoKG1vZGVsTWV0aG9kcywgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgTW9kZWwucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgYXJncy51bnNoaWZ0KHRoaXMuYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIGFyZ3MpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEJhY2tib25lLkNvbGxlY3Rpb25cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIElmIG1vZGVscyB0ZW5kIHRvIHJlcHJlc2VudCBhIHNpbmdsZSByb3cgb2YgZGF0YSwgYSBCYWNrYm9uZSBDb2xsZWN0aW9uIGlzXG4gIC8vIG1vcmUgYW5hbGFnb3VzIHRvIGEgdGFibGUgZnVsbCBvZiBkYXRhIC4uLiBvciBhIHNtYWxsIHNsaWNlIG9yIHBhZ2Ugb2YgdGhhdFxuICAvLyB0YWJsZSwgb3IgYSBjb2xsZWN0aW9uIG9mIHJvd3MgdGhhdCBiZWxvbmcgdG9nZXRoZXIgZm9yIGEgcGFydGljdWxhciByZWFzb25cbiAgLy8gLS0gYWxsIG9mIHRoZSBtZXNzYWdlcyBpbiB0aGlzIHBhcnRpY3VsYXIgZm9sZGVyLCBhbGwgb2YgdGhlIGRvY3VtZW50c1xuICAvLyBiZWxvbmdpbmcgdG8gdGhpcyBwYXJ0aWN1bGFyIGF1dGhvciwgYW5kIHNvIG9uLiBDb2xsZWN0aW9ucyBtYWludGFpblxuICAvLyBpbmRleGVzIG9mIHRoZWlyIG1vZGVscywgYm90aCBpbiBvcmRlciwgYW5kIGZvciBsb29rdXAgYnkgYGlkYC5cblxuICAvLyBDcmVhdGUgYSBuZXcgKipDb2xsZWN0aW9uKiosIHBlcmhhcHMgdG8gY29udGFpbiBhIHNwZWNpZmljIHR5cGUgb2YgYG1vZGVsYC5cbiAgLy8gSWYgYSBgY29tcGFyYXRvcmAgaXMgc3BlY2lmaWVkLCB0aGUgQ29sbGVjdGlvbiB3aWxsIG1haW50YWluXG4gIC8vIGl0cyBtb2RlbHMgaW4gc29ydCBvcmRlciwgYXMgdGhleSdyZSBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAgdmFyIENvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uID0gZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICBpZiAob3B0aW9ucy51cmwpIHRoaXMudXJsID0gb3B0aW9ucy51cmw7XG4gICAgaWYgKG9wdGlvbnMubW9kZWwpIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmF0b3IgIT09IHZvaWQgMCkgdGhpcy5jb21wYXJhdG9yID0gb3B0aW9ucy5jb21wYXJhdG9yO1xuICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKG1vZGVscykgdGhpcy5yZXNldChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7XG4gIH07XG5cbiAgLy8gRGVmYXVsdCBvcHRpb25zIGZvciBgQ29sbGVjdGlvbiNzZXRgLlxuICB2YXIgc2V0T3B0aW9ucyA9IHthZGQ6IHRydWUsIHJlbW92ZTogdHJ1ZSwgbWVyZ2U6IHRydWV9O1xuICB2YXIgYWRkT3B0aW9ucyA9IHthZGQ6IHRydWUsIG1lcmdlOiBmYWxzZSwgcmVtb3ZlOiBmYWxzZX07XG5cbiAgLy8gRGVmaW5lIHRoZSBDb2xsZWN0aW9uJ3MgaW5oZXJpdGFibGUgbWV0aG9kcy5cbiAgXy5leHRlbmQoQ29sbGVjdGlvbi5wcm90b3R5cGUsIEV2ZW50cywge1xuXG4gICAgLy8gVGhlIGRlZmF1bHQgbW9kZWwgZm9yIGEgY29sbGVjdGlvbiBpcyBqdXN0IGEgKipCYWNrYm9uZS5Nb2RlbCoqLlxuICAgIC8vIFRoaXMgc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW4gbW9zdCBjYXNlcy5cbiAgICBtb2RlbDogTW9kZWwsXG5cbiAgICAvLyBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd25cbiAgICAvLyBpbml0aWFsaXphdGlvbiBsb2dpYy5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sXG5cbiAgICAvLyBUaGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhIENvbGxlY3Rpb24gaXMgYW4gYXJyYXkgb2YgdGhlXG4gICAgLy8gbW9kZWxzJyBhdHRyaWJ1dGVzLlxuICAgIHRvSlNPTjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKG1vZGVsKXsgcmV0dXJuIG1vZGVsLnRvSlNPTihvcHRpb25zKTsgfSk7XG4gICAgfSxcblxuICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0LlxuICAgIHN5bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIEJhY2tib25lLnN5bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLy8gQWRkIGEgbW9kZWwsIG9yIGxpc3Qgb2YgbW9kZWxzIHRvIHRoZSBzZXQuXG4gICAgYWRkOiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldChtb2RlbHMsIF8uZGVmYXVsdHMob3B0aW9ucyB8fCB7fSwgYWRkT3B0aW9ucykpO1xuICAgIH0sXG5cbiAgICAvLyBSZW1vdmUgYSBtb2RlbCwgb3IgYSBsaXN0IG9mIG1vZGVscyBmcm9tIHRoZSBzZXQuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIG1vZGVscyA9IF8uaXNBcnJheShtb2RlbHMpID8gbW9kZWxzLnNsaWNlKCkgOiBbbW9kZWxzXTtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICB2YXIgaSwgbCwgaW5kZXgsIG1vZGVsO1xuICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbW9kZWwgPSB0aGlzLmdldChtb2RlbHNbaV0pO1xuICAgICAgICBpZiAoIW1vZGVsKSBjb250aW51ZTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2J5SWRbbW9kZWwuaWRdO1xuICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFttb2RlbC5jaWRdO1xuICAgICAgICBpbmRleCA9IHRoaXMuaW5kZXhPZihtb2RlbCk7XG4gICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICBvcHRpb25zLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbW9kZWwudHJpZ2dlcigncmVtb3ZlJywgbW9kZWwsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZShtb2RlbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gVXBkYXRlIGEgY29sbGVjdGlvbiBieSBgc2V0YC1pbmcgYSBuZXcgbGlzdCBvZiBtb2RlbHMsIGFkZGluZyBuZXcgb25lcyxcbiAgICAvLyByZW1vdmluZyBtb2RlbHMgdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnQsIGFuZCBtZXJnaW5nIG1vZGVscyB0aGF0XG4gICAgLy8gYWxyZWFkeSBleGlzdCBpbiB0aGUgY29sbGVjdGlvbiwgYXMgbmVjZXNzYXJ5LiBTaW1pbGFyIHRvICoqTW9kZWwjc2V0KiosXG4gICAgLy8gdGhlIGNvcmUgb3BlcmF0aW9uIGZvciB1cGRhdGluZyB0aGUgZGF0YSBjb250YWluZWQgYnkgdGhlIGNvbGxlY3Rpb24uXG4gICAgc2V0OiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBfLmRlZmF1bHRzKG9wdGlvbnMgfHwge30sIHNldE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMucGFyc2UpIG1vZGVscyA9IHRoaXMucGFyc2UobW9kZWxzLCBvcHRpb25zKTtcbiAgICAgIGlmICghXy5pc0FycmF5KG1vZGVscykpIG1vZGVscyA9IG1vZGVscyA/IFttb2RlbHNdIDogW107XG4gICAgICB2YXIgaSwgbCwgbW9kZWwsIGF0dHJzLCBleGlzdGluZywgc29ydDtcbiAgICAgIHZhciBhdCA9IG9wdGlvbnMuYXQ7XG4gICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmNvbXBhcmF0b3IgJiYgKGF0ID09IG51bGwpICYmIG9wdGlvbnMuc29ydCAhPT0gZmFsc2U7XG4gICAgICB2YXIgc29ydEF0dHIgPSBfLmlzU3RyaW5nKHRoaXMuY29tcGFyYXRvcikgPyB0aGlzLmNvbXBhcmF0b3IgOiBudWxsO1xuICAgICAgdmFyIHRvQWRkID0gW10sIHRvUmVtb3ZlID0gW10sIG1vZGVsTWFwID0ge307XG5cbiAgICAgIC8vIFR1cm4gYmFyZSBvYmplY3RzIGludG8gbW9kZWwgcmVmZXJlbmNlcywgYW5kIHByZXZlbnQgaW52YWxpZCBtb2RlbHNcbiAgICAgIC8vIGZyb20gYmVpbmcgYWRkZWQuXG4gICAgICBmb3IgKGkgPSAwLCBsID0gbW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoIShtb2RlbCA9IHRoaXMuX3ByZXBhcmVNb2RlbChtb2RlbHNbaV0sIG9wdGlvbnMpKSkgY29udGludWU7XG5cbiAgICAgICAgLy8gSWYgYSBkdXBsaWNhdGUgaXMgZm91bmQsIHByZXZlbnQgaXQgZnJvbSBiZWluZyBhZGRlZCBhbmRcbiAgICAgICAgLy8gb3B0aW9uYWxseSBtZXJnZSBpdCBpbnRvIHRoZSBleGlzdGluZyBtb2RlbC5cbiAgICAgICAgaWYgKGV4aXN0aW5nID0gdGhpcy5nZXQobW9kZWwpKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMucmVtb3ZlKSBtb2RlbE1hcFtleGlzdGluZy5jaWRdID0gdHJ1ZTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5tZXJnZSkge1xuICAgICAgICAgICAgZXhpc3Rpbmcuc2V0KG1vZGVsLmF0dHJpYnV0ZXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHNvcnRhYmxlICYmICFzb3J0ICYmIGV4aXN0aW5nLmhhc0NoYW5nZWQoc29ydEF0dHIpKSBzb3J0ID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBpcyBhIG5ldyBtb2RlbCwgcHVzaCBpdCB0byB0aGUgYHRvQWRkYCBsaXN0LlxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuYWRkKSB7XG4gICAgICAgICAgdG9BZGQucHVzaChtb2RlbCk7XG5cbiAgICAgICAgICAvLyBMaXN0ZW4gdG8gYWRkZWQgbW9kZWxzJyBldmVudHMsIGFuZCBpbmRleCBtb2RlbHMgZm9yIGxvb2t1cCBieVxuICAgICAgICAgIC8vIGBpZGAgYW5kIGJ5IGBjaWRgLlxuICAgICAgICAgIG1vZGVsLm9uKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuX2J5SWRbbW9kZWwuY2lkXSA9IG1vZGVsO1xuICAgICAgICAgIGlmIChtb2RlbC5pZCAhPSBudWxsKSB0aGlzLl9ieUlkW21vZGVsLmlkXSA9IG1vZGVsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBub25leGlzdGVudCBtb2RlbHMgaWYgYXBwcm9wcmlhdGUuXG4gICAgICBpZiAob3B0aW9ucy5yZW1vdmUpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgaWYgKCFtb2RlbE1hcFsobW9kZWwgPSB0aGlzLm1vZGVsc1tpXSkuY2lkXSkgdG9SZW1vdmUucHVzaChtb2RlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvUmVtb3ZlLmxlbmd0aCkgdGhpcy5yZW1vdmUodG9SZW1vdmUsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWUgaWYgc29ydGluZyBpcyBuZWVkZWQsIHVwZGF0ZSBgbGVuZ3RoYCBhbmQgc3BsaWNlIGluIG5ldyBtb2RlbHMuXG4gICAgICBpZiAodG9BZGQubGVuZ3RoKSB7XG4gICAgICAgIGlmIChzb3J0YWJsZSkgc29ydCA9IHRydWU7XG4gICAgICAgIHRoaXMubGVuZ3RoICs9IHRvQWRkLmxlbmd0aDtcbiAgICAgICAgaWYgKGF0ICE9IG51bGwpIHtcbiAgICAgICAgICBzcGxpY2UuYXBwbHkodGhpcy5tb2RlbHMsIFthdCwgMF0uY29uY2F0KHRvQWRkKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaC5hcHBseSh0aGlzLm1vZGVscywgdG9BZGQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFNpbGVudGx5IHNvcnQgdGhlIGNvbGxlY3Rpb24gaWYgYXBwcm9wcmlhdGUuXG4gICAgICBpZiAoc29ydCkgdGhpcy5zb3J0KHtzaWxlbnQ6IHRydWV9KTtcblxuICAgICAgaWYgKG9wdGlvbnMuc2lsZW50KSByZXR1cm4gdGhpcztcblxuICAgICAgLy8gVHJpZ2dlciBgYWRkYCBldmVudHMuXG4gICAgICBmb3IgKGkgPSAwLCBsID0gdG9BZGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIChtb2RlbCA9IHRvQWRkW2ldKS50cmlnZ2VyKCdhZGQnLCBtb2RlbCwgdGhpcywgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyaWdnZXIgYHNvcnRgIGlmIHRoZSBjb2xsZWN0aW9uIHdhcyBzb3J0ZWQuXG4gICAgICBpZiAoc29ydCkgdGhpcy50cmlnZ2VyKCdzb3J0JywgdGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gV2hlbiB5b3UgaGF2ZSBtb3JlIGl0ZW1zIHRoYW4geW91IHdhbnQgdG8gYWRkIG9yIHJlbW92ZSBpbmRpdmlkdWFsbHksXG4gICAgLy8geW91IGNhbiByZXNldCB0aGUgZW50aXJlIHNldCB3aXRoIGEgbmV3IGxpc3Qgb2YgbW9kZWxzLCB3aXRob3V0IGZpcmluZ1xuICAgIC8vIGFueSBncmFudWxhciBgYWRkYCBvciBgcmVtb3ZlYCBldmVudHMuIEZpcmVzIGByZXNldGAgd2hlbiBmaW5pc2hlZC5cbiAgICAvLyBVc2VmdWwgZm9yIGJ1bGsgb3BlcmF0aW9ucyBhbmQgb3B0aW1pemF0aW9ucy5cbiAgICByZXNldDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLm1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlUmVmZXJlbmNlKHRoaXMubW9kZWxzW2ldKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMucHJldmlvdXNNb2RlbHMgPSB0aGlzLm1vZGVscztcbiAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICB0aGlzLmFkZChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7XG4gICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLnRyaWdnZXIoJ3Jlc2V0JywgdGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gQWRkIGEgbW9kZWwgdG8gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICBwdXNoOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgICAgbW9kZWwgPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5hZGQobW9kZWwsIF8uZXh0ZW5kKHthdDogdGhpcy5sZW5ndGh9LCBvcHRpb25zKSk7XG4gICAgICByZXR1cm4gbW9kZWw7XG4gICAgfSxcblxuICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICBwb3A6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBtb2RlbCA9IHRoaXMuYXQodGhpcy5sZW5ndGggLSAxKTtcbiAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9LFxuXG4gICAgLy8gQWRkIGEgbW9kZWwgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICB1bnNoaWZ0OiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgICAgbW9kZWwgPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5hZGQobW9kZWwsIF8uZXh0ZW5kKHthdDogMH0sIG9wdGlvbnMpKTtcbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIGEgbW9kZWwgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgIHNoaWZ0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgbW9kZWwgPSB0aGlzLmF0KDApO1xuICAgICAgdGhpcy5yZW1vdmUobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH0sXG5cbiAgICAvLyBTbGljZSBvdXQgYSBzdWItYXJyYXkgb2YgbW9kZWxzIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAgc2xpY2U6IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcbiAgICAgIHJldHVybiB0aGlzLm1vZGVscy5zbGljZShiZWdpbiwgZW5kKTtcbiAgICB9LFxuXG4gICAgLy8gR2V0IGEgbW9kZWwgZnJvbSB0aGUgc2V0IGJ5IGlkLlxuICAgIGdldDogZnVuY3Rpb24ob2JqKSB7XG4gICAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgICByZXR1cm4gdGhpcy5fYnlJZFtvYmouaWQgIT0gbnVsbCA/IG9iai5pZCA6IG9iai5jaWQgfHwgb2JqXTtcbiAgICB9LFxuXG4gICAgLy8gR2V0IHRoZSBtb2RlbCBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAgYXQ6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbHNbaW5kZXhdO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm4gbW9kZWxzIHdpdGggbWF0Y2hpbmcgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBzaW1wbGUgY2FzZXMgb2ZcbiAgICAvLyBgZmlsdGVyYC5cbiAgICB3aGVyZTogZnVuY3Rpb24oYXR0cnMsIGZpcnN0KSB7XG4gICAgICBpZiAoXy5pc0VtcHR5KGF0dHJzKSkgcmV0dXJuIGZpcnN0ID8gdm9pZCAwIDogW107XG4gICAgICByZXR1cm4gdGhpc1tmaXJzdCA/ICdmaW5kJyA6ICdmaWx0ZXInXShmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgICBpZiAoYXR0cnNba2V5XSAhPT0gbW9kZWwuZ2V0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm4gdGhlIGZpcnN0IG1vZGVsIHdpdGggbWF0Y2hpbmcgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBzaW1wbGUgY2FzZXNcbiAgICAvLyBvZiBgZmluZGAuXG4gICAgZmluZFdoZXJlOiBmdW5jdGlvbihhdHRycykge1xuICAgICAgcmV0dXJuIHRoaXMud2hlcmUoYXR0cnMsIHRydWUpO1xuICAgIH0sXG5cbiAgICAvLyBGb3JjZSB0aGUgY29sbGVjdGlvbiB0byByZS1zb3J0IGl0c2VsZi4gWW91IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzIHVuZGVyXG4gICAgLy8gbm9ybWFsIGNpcmN1bXN0YW5jZXMsIGFzIHRoZSBzZXQgd2lsbCBtYWludGFpbiBzb3J0IG9yZGVyIGFzIGVhY2ggaXRlbVxuICAgIC8vIGlzIGFkZGVkLlxuICAgIHNvcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICghdGhpcy5jb21wYXJhdG9yKSB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzb3J0IGEgc2V0IHdpdGhvdXQgYSBjb21wYXJhdG9yJyk7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuXG4gICAgICAvLyBSdW4gc29ydCBiYXNlZCBvbiB0eXBlIG9mIGBjb21wYXJhdG9yYC5cbiAgICAgIGlmIChfLmlzU3RyaW5nKHRoaXMuY29tcGFyYXRvcikgfHwgdGhpcy5jb21wYXJhdG9yLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0aGlzLm1vZGVscyA9IHRoaXMuc29ydEJ5KHRoaXMuY29tcGFyYXRvciwgdGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1vZGVscy5zb3J0KF8uYmluZCh0aGlzLmNvbXBhcmF0b3IsIHRoaXMpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy50cmlnZ2VyKCdzb3J0JywgdGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gRmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2ggYSBtb2RlbCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXNcbiAgICAvLyB0byBtYWludGFpbiBvcmRlci5cbiAgICBzb3J0ZWRJbmRleDogZnVuY3Rpb24obW9kZWwsIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgICB2YWx1ZSB8fCAodmFsdWUgPSB0aGlzLmNvbXBhcmF0b3IpO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlIDogZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsLmdldCh2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIF8uc29ydGVkSW5kZXgodGhpcy5tb2RlbHMsIG1vZGVsLCBpdGVyYXRvciwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIC8vIFBsdWNrIGFuIGF0dHJpYnV0ZSBmcm9tIGVhY2ggbW9kZWwgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAgcGx1Y2s6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIHJldHVybiBfLmludm9rZSh0aGlzLm1vZGVscywgJ2dldCcsIGF0dHIpO1xuICAgIH0sXG5cbiAgICAvLyBGZXRjaCB0aGUgZGVmYXVsdCBzZXQgb2YgbW9kZWxzIGZvciB0aGlzIGNvbGxlY3Rpb24sIHJlc2V0dGluZyB0aGVcbiAgICAvLyBjb2xsZWN0aW9uIHdoZW4gdGhleSBhcnJpdmUuIElmIGByZXNldDogdHJ1ZWAgaXMgcGFzc2VkLCB0aGUgcmVzcG9uc2VcbiAgICAvLyBkYXRhIHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdGhlIGByZXNldGAgbWV0aG9kIGluc3RlYWQgb2YgYHNldGAuXG4gICAgZmV0Y2g6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7XG4gICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcbiAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IG9wdGlvbnMucmVzZXQgPyAncmVzZXQnIDogJ3NldCc7XG4gICAgICAgIGNvbGxlY3Rpb25bbWV0aG9kXShyZXNwLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MoY29sbGVjdGlvbiwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbGxlY3Rpb24udHJpZ2dlcignc3luYycsIGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBFcnJvcih0aGlzLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgbW9kZWwgaW4gdGhpcyBjb2xsZWN0aW9uLiBBZGQgdGhlIG1vZGVsIHRvIHRoZVxuICAgIC8vIGNvbGxlY3Rpb24gaW1tZWRpYXRlbHksIHVubGVzcyBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCBpbiB3aGljaCBjYXNlIHdlXG4gICAgLy8gd2FpdCBmb3IgdGhlIHNlcnZlciB0byBhZ3JlZS5cbiAgICBjcmVhdGU6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTtcbiAgICAgIGlmICghKG1vZGVsID0gdGhpcy5fcHJlcGFyZU1vZGVsKG1vZGVsLCBvcHRpb25zKSkpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICghb3B0aW9ucy53YWl0KSB0aGlzLmFkZChtb2RlbCwgb3B0aW9ucyk7XG4gICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgaWYgKG9wdGlvbnMud2FpdCkgY29sbGVjdGlvbi5hZGQobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgbW9kZWwuc2F2ZShudWxsLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9LFxuXG4gICAgLy8gKipwYXJzZSoqIGNvbnZlcnRzIGEgcmVzcG9uc2UgaW50byBhIGxpc3Qgb2YgbW9kZWxzIHRvIGJlIGFkZGVkIHRvIHRoZVxuICAgIC8vIGNvbGxlY3Rpb24uIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGlzIGp1c3QgdG8gcGFzcyBpdCB0aHJvdWdoLlxuICAgIHBhcnNlOiBmdW5jdGlvbihyZXNwLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gcmVzcDtcbiAgICB9LFxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGNvbGxlY3Rpb24gd2l0aCBhbiBpZGVudGljYWwgbGlzdCBvZiBtb2RlbHMgYXMgdGhpcyBvbmUuXG4gICAgY2xvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubW9kZWxzKTtcbiAgICB9LFxuXG4gICAgLy8gUHJpdmF0ZSBtZXRob2QgdG8gcmVzZXQgYWxsIGludGVybmFsIHN0YXRlLiBDYWxsZWQgd2hlbiB0aGUgY29sbGVjdGlvblxuICAgIC8vIGlzIGZpcnN0IGluaXRpYWxpemVkIG9yIHJlc2V0LlxuICAgIF9yZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLm1vZGVscyA9IFtdO1xuICAgICAgdGhpcy5fYnlJZCAgPSB7fTtcbiAgICB9LFxuXG4gICAgLy8gUHJlcGFyZSBhIGhhc2ggb2YgYXR0cmlidXRlcyAob3Igb3RoZXIgbW9kZWwpIHRvIGJlIGFkZGVkIHRvIHRoaXNcbiAgICAvLyBjb2xsZWN0aW9uLlxuICAgIF9wcmVwYXJlTW9kZWw6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7XG4gICAgICBpZiAoYXR0cnMgaW5zdGFuY2VvZiBNb2RlbCkge1xuICAgICAgICBpZiAoIWF0dHJzLmNvbGxlY3Rpb24pIGF0dHJzLmNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgICByZXR1cm4gYXR0cnM7XG4gICAgICB9XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgICAgb3B0aW9ucy5jb2xsZWN0aW9uID0gdGhpcztcbiAgICAgIHZhciBtb2RlbCA9IG5ldyB0aGlzLm1vZGVsKGF0dHJzLCBvcHRpb25zKTtcbiAgICAgIGlmICghbW9kZWwuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2ludmFsaWQnLCB0aGlzLCBhdHRycywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9LFxuXG4gICAgLy8gSW50ZXJuYWwgbWV0aG9kIHRvIHNldmVyIGEgbW9kZWwncyB0aWVzIHRvIGEgY29sbGVjdGlvbi5cbiAgICBfcmVtb3ZlUmVmZXJlbmNlOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgaWYgKHRoaXMgPT09IG1vZGVsLmNvbGxlY3Rpb24pIGRlbGV0ZSBtb2RlbC5jb2xsZWN0aW9uO1xuICAgICAgbW9kZWwub2ZmKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpO1xuICAgIH0sXG5cbiAgICAvLyBJbnRlcm5hbCBtZXRob2QgY2FsbGVkIGV2ZXJ5IHRpbWUgYSBtb2RlbCBpbiB0aGUgc2V0IGZpcmVzIGFuIGV2ZW50LlxuICAgIC8vIFNldHMgbmVlZCB0byB1cGRhdGUgdGhlaXIgaW5kZXhlcyB3aGVuIG1vZGVscyBjaGFuZ2UgaWRzLiBBbGwgb3RoZXJcbiAgICAvLyBldmVudHMgc2ltcGx5IHByb3h5IHRocm91Z2guIFwiYWRkXCIgYW5kIFwicmVtb3ZlXCIgZXZlbnRzIHRoYXQgb3JpZ2luYXRlXG4gICAgLy8gaW4gb3RoZXIgY29sbGVjdGlvbnMgYXJlIGlnbm9yZWQuXG4gICAgX29uTW9kZWxFdmVudDogZnVuY3Rpb24oZXZlbnQsIG1vZGVsLCBjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICBpZiAoKGV2ZW50ID09PSAnYWRkJyB8fCBldmVudCA9PT0gJ3JlbW92ZScpICYmIGNvbGxlY3Rpb24gIT09IHRoaXMpIHJldHVybjtcbiAgICAgIGlmIChldmVudCA9PT0gJ2Rlc3Ryb3knKSB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7XG4gICAgICBpZiAobW9kZWwgJiYgZXZlbnQgPT09ICdjaGFuZ2U6JyArIG1vZGVsLmlkQXR0cmlidXRlKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLnByZXZpb3VzKG1vZGVsLmlkQXR0cmlidXRlKV07XG4gICAgICAgIGlmIChtb2RlbC5pZCAhPSBudWxsKSB0aGlzLl9ieUlkW21vZGVsLmlkXSA9IG1vZGVsO1xuICAgICAgfVxuICAgICAgdGhpcy50cmlnZ2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHdlIHdhbnQgdG8gaW1wbGVtZW50IG9uIHRoZSBDb2xsZWN0aW9uLlxuICAvLyA5MCUgb2YgdGhlIGNvcmUgdXNlZnVsbmVzcyBvZiBCYWNrYm9uZSBDb2xsZWN0aW9ucyBpcyBhY3R1YWxseSBpbXBsZW1lbnRlZFxuICAvLyByaWdodCBoZXJlOlxuICB2YXIgbWV0aG9kcyA9IFsnZm9yRWFjaCcsICdlYWNoJywgJ21hcCcsICdjb2xsZWN0JywgJ3JlZHVjZScsICdmb2xkbCcsXG4gICAgJ2luamVjdCcsICdyZWR1Y2VSaWdodCcsICdmb2xkcicsICdmaW5kJywgJ2RldGVjdCcsICdmaWx0ZXInLCAnc2VsZWN0JyxcbiAgICAncmVqZWN0JywgJ2V2ZXJ5JywgJ2FsbCcsICdzb21lJywgJ2FueScsICdpbmNsdWRlJywgJ2NvbnRhaW5zJywgJ2ludm9rZScsXG4gICAgJ21heCcsICdtaW4nLCAndG9BcnJheScsICdzaXplJywgJ2ZpcnN0JywgJ2hlYWQnLCAndGFrZScsICdpbml0aWFsJywgJ3Jlc3QnLFxuICAgICd0YWlsJywgJ2Ryb3AnLCAnbGFzdCcsICd3aXRob3V0JywgJ2luZGV4T2YnLCAnc2h1ZmZsZScsICdsYXN0SW5kZXhPZicsXG4gICAgJ2lzRW1wdHknLCAnY2hhaW4nXTtcblxuICAvLyBNaXggaW4gZWFjaCBVbmRlcnNjb3JlIG1ldGhvZCBhcyBhIHByb3h5IHRvIGBDb2xsZWN0aW9uI21vZGVsc2AuXG4gIF8uZWFjaChtZXRob2RzLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzLm1vZGVscyk7XG4gICAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIGFyZ3MpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHRha2UgYSBwcm9wZXJ0eSBuYW1lIGFzIGFuIGFyZ3VtZW50LlxuICB2YXIgYXR0cmlidXRlTWV0aG9kcyA9IFsnZ3JvdXBCeScsICdjb3VudEJ5JywgJ3NvcnRCeSddO1xuXG4gIC8vIFVzZSBhdHRyaWJ1dGVzIGluc3RlYWQgb2YgcHJvcGVydGllcy5cbiAgXy5lYWNoKGF0dHJpYnV0ZU1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlIDogZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsLmdldCh2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9bbWV0aG9kXSh0aGlzLm1vZGVscywgaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEJhY2tib25lLlZpZXdcbiAgLy8gLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEJhY2tib25lIFZpZXdzIGFyZSBhbG1vc3QgbW9yZSBjb252ZW50aW9uIHRoYW4gdGhleSBhcmUgYWN0dWFsIGNvZGUuIEEgVmlld1xuICAvLyBpcyBzaW1wbHkgYSBKYXZhU2NyaXB0IG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsb2dpY2FsIGNodW5rIG9mIFVJIGluIHRoZVxuICAvLyBET00uIFRoaXMgbWlnaHQgYmUgYSBzaW5nbGUgaXRlbSwgYW4gZW50aXJlIGxpc3QsIGEgc2lkZWJhciBvciBwYW5lbCwgb3JcbiAgLy8gZXZlbiB0aGUgc3Vycm91bmRpbmcgZnJhbWUgd2hpY2ggd3JhcHMgeW91ciB3aG9sZSBhcHAuIERlZmluaW5nIGEgY2h1bmsgb2ZcbiAgLy8gVUkgYXMgYSAqKlZpZXcqKiBhbGxvd3MgeW91IHRvIGRlZmluZSB5b3VyIERPTSBldmVudHMgZGVjbGFyYXRpdmVseSwgd2l0aG91dFxuICAvLyBoYXZpbmcgdG8gd29ycnkgYWJvdXQgcmVuZGVyIG9yZGVyIC4uLiBhbmQgbWFrZXMgaXQgZWFzeSBmb3IgdGhlIHZpZXcgdG9cbiAgLy8gcmVhY3QgdG8gc3BlY2lmaWMgY2hhbmdlcyBpbiB0aGUgc3RhdGUgb2YgeW91ciBtb2RlbHMuXG5cbiAgLy8gQ3JlYXRpbmcgYSBCYWNrYm9uZS5WaWV3IGNyZWF0ZXMgaXRzIGluaXRpYWwgZWxlbWVudCBvdXRzaWRlIG9mIHRoZSBET00sXG4gIC8vIGlmIGFuIGV4aXN0aW5nIGVsZW1lbnQgaXMgbm90IHByb3ZpZGVkLi4uXG4gIHZhciBWaWV3ID0gQmFja2JvbmUuVmlldyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ3ZpZXcnKTtcbiAgICB0aGlzLl9jb25maWd1cmUob3B0aW9ucyB8fCB7fSk7XG4gICAgdGhpcy5fZW5zdXJlRWxlbWVudCgpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgfTtcblxuICAvLyBDYWNoZWQgcmVnZXggdG8gc3BsaXQga2V5cyBmb3IgYGRlbGVnYXRlYC5cbiAgdmFyIGRlbGVnYXRlRXZlbnRTcGxpdHRlciA9IC9eKFxcUyspXFxzKiguKikkLztcblxuICAvLyBMaXN0IG9mIHZpZXcgb3B0aW9ucyB0byBiZSBtZXJnZWQgYXMgcHJvcGVydGllcy5cbiAgdmFyIHZpZXdPcHRpb25zID0gWydtb2RlbCcsICdjb2xsZWN0aW9uJywgJ2VsJywgJ2lkJywgJ2F0dHJpYnV0ZXMnLCAnY2xhc3NOYW1lJywgJ3RhZ05hbWUnLCAnZXZlbnRzJ107XG5cbiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLlZpZXcqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICBfLmV4dGVuZChWaWV3LnByb3RvdHlwZSwgRXZlbnRzLCB7XG5cbiAgICAvLyBUaGUgZGVmYXVsdCBgdGFnTmFtZWAgb2YgYSBWaWV3J3MgZWxlbWVudCBpcyBgXCJkaXZcImAuXG4gICAgdGFnTmFtZTogJ2RpdicsXG5cbiAgICAvLyBqUXVlcnkgZGVsZWdhdGUgZm9yIGVsZW1lbnQgbG9va3VwLCBzY29wZWQgdG8gRE9NIGVsZW1lbnRzIHdpdGhpbiB0aGVcbiAgICAvLyBjdXJyZW50IHZpZXcuIFRoaXMgc2hvdWxkIGJlIHByZWZlcmVkIHRvIGdsb2JhbCBsb29rdXBzIHdoZXJlIHBvc3NpYmxlLlxuICAgICQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChzZWxlY3Rvcik7XG4gICAgfSxcblxuICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93blxuICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSxcblxuICAgIC8vICoqcmVuZGVyKiogaXMgdGhlIGNvcmUgZnVuY3Rpb24gdGhhdCB5b3VyIHZpZXcgc2hvdWxkIG92ZXJyaWRlLCBpbiBvcmRlclxuICAgIC8vIHRvIHBvcHVsYXRlIGl0cyBlbGVtZW50IChgdGhpcy5lbGApLCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBIVE1MLiBUaGVcbiAgICAvLyBjb252ZW50aW9uIGlzIGZvciAqKnJlbmRlcioqIHRvIGFsd2F5cyByZXR1cm4gYHRoaXNgLlxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIHRoaXMgdmlldyBieSB0YWtpbmcgdGhlIGVsZW1lbnQgb3V0IG9mIHRoZSBET00sIGFuZCByZW1vdmluZyBhbnlcbiAgICAvLyBhcHBsaWNhYmxlIEJhY2tib25lLkV2ZW50cyBsaXN0ZW5lcnMuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZSgpO1xuICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gQ2hhbmdlIHRoZSB2aWV3J3MgZWxlbWVudCAoYHRoaXMuZWxgIHByb3BlcnR5KSwgaW5jbHVkaW5nIGV2ZW50XG4gICAgLy8gcmUtZGVsZWdhdGlvbi5cbiAgICBzZXRFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBkZWxlZ2F0ZSkge1xuICAgICAgaWYgKHRoaXMuJGVsKSB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgIHRoaXMuJGVsID0gZWxlbWVudCBpbnN0YW5jZW9mIEJhY2tib25lLiQgPyBlbGVtZW50IDogQmFja2JvbmUuJChlbGVtZW50KTtcbiAgICAgIHRoaXMuZWwgPSB0aGlzLiRlbFswXTtcbiAgICAgIGlmIChkZWxlZ2F0ZSAhPT0gZmFsc2UpIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBTZXQgY2FsbGJhY2tzLCB3aGVyZSBgdGhpcy5ldmVudHNgIGlzIGEgaGFzaCBvZlxuICAgIC8vXG4gICAgLy8gKntcImV2ZW50IHNlbGVjdG9yXCI6IFwiY2FsbGJhY2tcIn0qXG4gICAgLy9cbiAgICAvLyAgICAge1xuICAgIC8vICAgICAgICdtb3VzZWRvd24gLnRpdGxlJzogICdlZGl0JyxcbiAgICAvLyAgICAgICAnY2xpY2sgLmJ1dHRvbic6ICAgICAnc2F2ZSdcbiAgICAvLyAgICAgICAnY2xpY2sgLm9wZW4nOiAgICAgICBmdW5jdGlvbihlKSB7IC4uLiB9XG4gICAgLy8gICAgIH1cbiAgICAvL1xuICAgIC8vIHBhaXJzLiBDYWxsYmFja3Mgd2lsbCBiZSBib3VuZCB0byB0aGUgdmlldywgd2l0aCBgdGhpc2Agc2V0IHByb3Blcmx5LlxuICAgIC8vIFVzZXMgZXZlbnQgZGVsZWdhdGlvbiBmb3IgZWZmaWNpZW5jeS5cbiAgICAvLyBPbWl0dGluZyB0aGUgc2VsZWN0b3IgYmluZHMgdGhlIGV2ZW50IHRvIGB0aGlzLmVsYC5cbiAgICAvLyBUaGlzIG9ubHkgd29ya3MgZm9yIGRlbGVnYXRlLWFibGUgZXZlbnRzOiBub3QgYGZvY3VzYCwgYGJsdXJgLCBhbmRcbiAgICAvLyBub3QgYGNoYW5nZWAsIGBzdWJtaXRgLCBhbmQgYHJlc2V0YCBpbiBJbnRlcm5ldCBFeHBsb3Jlci5cbiAgICBkZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7XG4gICAgICBpZiAoIShldmVudHMgfHwgKGV2ZW50cyA9IF8ucmVzdWx0KHRoaXMsICdldmVudHMnKSkpKSByZXR1cm4gdGhpcztcbiAgICAgIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpO1xuICAgICAgZm9yICh2YXIga2V5IGluIGV2ZW50cykge1xuICAgICAgICB2YXIgbWV0aG9kID0gZXZlbnRzW2tleV07XG4gICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKG1ldGhvZCkpIG1ldGhvZCA9IHRoaXNbZXZlbnRzW2tleV1dO1xuICAgICAgICBpZiAoIW1ldGhvZCkgY29udGludWU7XG5cbiAgICAgICAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGRlbGVnYXRlRXZlbnRTcGxpdHRlcik7XG4gICAgICAgIHZhciBldmVudE5hbWUgPSBtYXRjaFsxXSwgc2VsZWN0b3IgPSBtYXRjaFsyXTtcbiAgICAgICAgbWV0aG9kID0gXy5iaW5kKG1ldGhvZCwgdGhpcyk7XG4gICAgICAgIGV2ZW50TmFtZSArPSAnLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkO1xuICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICcnKSB7XG4gICAgICAgICAgdGhpcy4kZWwub24oZXZlbnROYW1lLCBtZXRob2QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJGVsLm9uKGV2ZW50TmFtZSwgc2VsZWN0b3IsIG1ldGhvZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBDbGVhcnMgYWxsIGNhbGxiYWNrcyBwcmV2aW91c2x5IGJvdW5kIHRvIHRoZSB2aWV3IHdpdGggYGRlbGVnYXRlRXZlbnRzYC5cbiAgICAvLyBZb3UgdXN1YWxseSBkb24ndCBuZWVkIHRvIHVzZSB0aGlzLCBidXQgbWF5IHdpc2ggdG8gaWYgeW91IGhhdmUgbXVsdGlwbGVcbiAgICAvLyBCYWNrYm9uZSB2aWV3cyBhdHRhY2hlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudC5cbiAgICB1bmRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJGVsLm9mZignLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBQZXJmb3JtcyB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uIG9mIGEgVmlldyB3aXRoIGEgc2V0IG9mIG9wdGlvbnMuXG4gICAgLy8gS2V5cyB3aXRoIHNwZWNpYWwgbWVhbmluZyAqKGUuZy4gbW9kZWwsIGNvbGxlY3Rpb24sIGlkLCBjbGFzc05hbWUpKiBhcmVcbiAgICAvLyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGUgdmlldy4gIFNlZSBgdmlld09wdGlvbnNgIGZvciBhbiBleGhhdXN0aXZlXG4gICAgLy8gbGlzdC5cbiAgICBfY29uZmlndXJlOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zKSBvcHRpb25zID0gXy5leHRlbmQoe30sIF8ucmVzdWx0KHRoaXMsICdvcHRpb25zJyksIG9wdGlvbnMpO1xuICAgICAgXy5leHRlbmQodGhpcywgXy5waWNrKG9wdGlvbnMsIHZpZXdPcHRpb25zKSk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgVmlldyBoYXMgYSBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cbiAgICAvLyBJZiBgdGhpcy5lbGAgaXMgYSBzdHJpbmcsIHBhc3MgaXQgdGhyb3VnaCBgJCgpYCwgdGFrZSB0aGUgZmlyc3RcbiAgICAvLyBtYXRjaGluZyBlbGVtZW50LCBhbmQgcmUtYXNzaWduIGl0IHRvIGBlbGAuIE90aGVyd2lzZSwgY3JlYXRlXG4gICAgLy8gYW4gZWxlbWVudCBmcm9tIHRoZSBgaWRgLCBgY2xhc3NOYW1lYCBhbmQgYHRhZ05hbWVgIHByb3BlcnRpZXMuXG4gICAgX2Vuc3VyZUVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLmVsKSB7XG4gICAgICAgIHZhciBhdHRycyA9IF8uZXh0ZW5kKHt9LCBfLnJlc3VsdCh0aGlzLCAnYXR0cmlidXRlcycpKTtcbiAgICAgICAgaWYgKHRoaXMuaWQpIGF0dHJzLmlkID0gXy5yZXN1bHQodGhpcywgJ2lkJyk7XG4gICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSkgYXR0cnNbJ2NsYXNzJ10gPSBfLnJlc3VsdCh0aGlzLCAnY2xhc3NOYW1lJyk7XG4gICAgICAgIHZhciAkZWwgPSBCYWNrYm9uZS4kKCc8JyArIF8ucmVzdWx0KHRoaXMsICd0YWdOYW1lJykgKyAnPicpLmF0dHIoYXR0cnMpO1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQoJGVsLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQoXy5yZXN1bHQodGhpcywgJ2VsJyksIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gQmFja2JvbmUuc3luY1xuICAvLyAtLS0tLS0tLS0tLS0tXG5cbiAgLy8gT3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiB0byBjaGFuZ2UgdGhlIG1hbm5lciBpbiB3aGljaCBCYWNrYm9uZSBwZXJzaXN0c1xuICAvLyBtb2RlbHMgdG8gdGhlIHNlcnZlci4gWW91IHdpbGwgYmUgcGFzc2VkIHRoZSB0eXBlIG9mIHJlcXVlc3QsIGFuZCB0aGVcbiAgLy8gbW9kZWwgaW4gcXVlc3Rpb24uIEJ5IGRlZmF1bHQsIG1ha2VzIGEgUkVTVGZ1bCBBamF4IHJlcXVlc3RcbiAgLy8gdG8gdGhlIG1vZGVsJ3MgYHVybCgpYC4gU29tZSBwb3NzaWJsZSBjdXN0b21pemF0aW9ucyBjb3VsZCBiZTpcbiAgLy9cbiAgLy8gKiBVc2UgYHNldFRpbWVvdXRgIHRvIGJhdGNoIHJhcGlkLWZpcmUgdXBkYXRlcyBpbnRvIGEgc2luZ2xlIHJlcXVlc3QuXG4gIC8vICogU2VuZCB1cCB0aGUgbW9kZWxzIGFzIFhNTCBpbnN0ZWFkIG9mIEpTT04uXG4gIC8vICogUGVyc2lzdCBtb2RlbHMgdmlhIFdlYlNvY2tldHMgaW5zdGVhZCBvZiBBamF4LlxuICAvL1xuICAvLyBUdXJuIG9uIGBCYWNrYm9uZS5lbXVsYXRlSFRUUGAgaW4gb3JkZXIgdG8gc2VuZCBgUFVUYCBhbmQgYERFTEVURWAgcmVxdWVzdHNcbiAgLy8gYXMgYFBPU1RgLCB3aXRoIGEgYF9tZXRob2RgIHBhcmFtZXRlciBjb250YWluaW5nIHRoZSB0cnVlIEhUVFAgbWV0aG9kLFxuICAvLyBhcyB3ZWxsIGFzIGFsbCByZXF1ZXN0cyB3aXRoIHRoZSBib2R5IGFzIGBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRgXG4gIC8vIGluc3RlYWQgb2YgYGFwcGxpY2F0aW9uL2pzb25gIHdpdGggdGhlIG1vZGVsIGluIGEgcGFyYW0gbmFtZWQgYG1vZGVsYC5cbiAgLy8gVXNlZnVsIHdoZW4gaW50ZXJmYWNpbmcgd2l0aCBzZXJ2ZXItc2lkZSBsYW5ndWFnZXMgbGlrZSAqKlBIUCoqIHRoYXQgbWFrZVxuICAvLyBpdCBkaWZmaWN1bHQgdG8gcmVhZCB0aGUgYm9keSBvZiBgUFVUYCByZXF1ZXN0cy5cbiAgQmFja2JvbmUuc3luYyA9IGZ1bmN0aW9uKG1ldGhvZCwgbW9kZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgdHlwZSA9IG1ldGhvZE1hcFttZXRob2RdO1xuXG4gICAgLy8gRGVmYXVsdCBvcHRpb25zLCB1bmxlc3Mgc3BlY2lmaWVkLlxuICAgIF8uZGVmYXVsdHMob3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KSwge1xuICAgICAgZW11bGF0ZUhUVFA6IEJhY2tib25lLmVtdWxhdGVIVFRQLFxuICAgICAgZW11bGF0ZUpTT046IEJhY2tib25lLmVtdWxhdGVKU09OXG4gICAgfSk7XG5cbiAgICAvLyBEZWZhdWx0IEpTT04tcmVxdWVzdCBvcHRpb25zLlxuICAgIHZhciBwYXJhbXMgPSB7dHlwZTogdHlwZSwgZGF0YVR5cGU6ICdqc29uJ307XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB3ZSBoYXZlIGEgVVJMLlxuICAgIGlmICghb3B0aW9ucy51cmwpIHtcbiAgICAgIHBhcmFtcy51cmwgPSBfLnJlc3VsdChtb2RlbCwgJ3VybCcpIHx8IHVybEVycm9yKCk7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHRoYXQgd2UgaGF2ZSB0aGUgYXBwcm9wcmlhdGUgcmVxdWVzdCBkYXRhLlxuICAgIGlmIChvcHRpb25zLmRhdGEgPT0gbnVsbCAmJiBtb2RlbCAmJiAobWV0aG9kID09PSAnY3JlYXRlJyB8fCBtZXRob2QgPT09ICd1cGRhdGUnIHx8IG1ldGhvZCA9PT0gJ3BhdGNoJykpIHtcbiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgIHBhcmFtcy5kYXRhID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5hdHRycyB8fCBtb2RlbC50b0pTT04ob3B0aW9ucykpO1xuICAgIH1cblxuICAgIC8vIEZvciBvbGRlciBzZXJ2ZXJzLCBlbXVsYXRlIEpTT04gYnkgZW5jb2RpbmcgdGhlIHJlcXVlc3QgaW50byBhbiBIVE1MLWZvcm0uXG4gICAgaWYgKG9wdGlvbnMuZW11bGF0ZUpTT04pIHtcbiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgICAgcGFyYW1zLmRhdGEgPSBwYXJhbXMuZGF0YSA/IHttb2RlbDogcGFyYW1zLmRhdGF9IDoge307XG4gICAgfVxuXG4gICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSFRUUCBieSBtaW1pY2tpbmcgdGhlIEhUVFAgbWV0aG9kIHdpdGggYF9tZXRob2RgXG4gICAgLy8gQW5kIGFuIGBYLUhUVFAtTWV0aG9kLU92ZXJyaWRlYCBoZWFkZXIuXG4gICAgaWYgKG9wdGlvbnMuZW11bGF0ZUhUVFAgJiYgKHR5cGUgPT09ICdQVVQnIHx8IHR5cGUgPT09ICdERUxFVEUnIHx8IHR5cGUgPT09ICdQQVRDSCcpKSB7XG4gICAgICBwYXJhbXMudHlwZSA9ICdQT1NUJztcbiAgICAgIGlmIChvcHRpb25zLmVtdWxhdGVKU09OKSBwYXJhbXMuZGF0YS5fbWV0aG9kID0gdHlwZTtcbiAgICAgIHZhciBiZWZvcmVTZW5kID0gb3B0aW9ucy5iZWZvcmVTZW5kO1xuICAgICAgb3B0aW9ucy5iZWZvcmVTZW5kID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLUhUVFAtTWV0aG9kLU92ZXJyaWRlJywgdHlwZSk7XG4gICAgICAgIGlmIChiZWZvcmVTZW5kKSByZXR1cm4gYmVmb3JlU2VuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBwcm9jZXNzIGRhdGEgb24gYSBub24tR0VUIHJlcXVlc3QuXG4gICAgaWYgKHBhcmFtcy50eXBlICE9PSAnR0VUJyAmJiAhb3B0aW9ucy5lbXVsYXRlSlNPTikge1xuICAgICAgcGFyYW1zLnByb2Nlc3NEYXRhID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgc2VuZGluZyBhIGBQQVRDSGAgcmVxdWVzdCwgYW5kIHdlJ3JlIGluIGFuIG9sZCBJbnRlcm5ldCBFeHBsb3JlclxuICAgIC8vIHRoYXQgc3RpbGwgaGFzIEFjdGl2ZVggZW5hYmxlZCBieSBkZWZhdWx0LCBvdmVycmlkZSBqUXVlcnkgdG8gdXNlIHRoYXRcbiAgICAvLyBmb3IgWEhSIGluc3RlYWQuIFJlbW92ZSB0aGlzIGxpbmUgd2hlbiBqUXVlcnkgc3VwcG9ydHMgYFBBVENIYCBvbiBJRTguXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnUEFUQ0gnICYmIHdpbmRvdy5BY3RpdmVYT2JqZWN0ICYmXG4gICAgICAgICAgISh3aW5kb3cuZXh0ZXJuYWwgJiYgd2luZG93LmV4dGVybmFsLm1zQWN0aXZlWEZpbHRlcmluZ0VuYWJsZWQpKSB7XG4gICAgICBwYXJhbXMueGhyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHRoZSByZXF1ZXN0LCBhbGxvd2luZyB0aGUgdXNlciB0byBvdmVycmlkZSBhbnkgQWpheCBvcHRpb25zLlxuICAgIHZhciB4aHIgPSBvcHRpb25zLnhociA9IEJhY2tib25lLmFqYXgoXy5leHRlbmQocGFyYW1zLCBvcHRpb25zKSk7XG4gICAgbW9kZWwudHJpZ2dlcigncmVxdWVzdCcsIG1vZGVsLCB4aHIsIG9wdGlvbnMpO1xuICAgIHJldHVybiB4aHI7XG4gIH07XG5cbiAgLy8gTWFwIGZyb20gQ1JVRCB0byBIVFRQIGZvciBvdXIgZGVmYXVsdCBgQmFja2JvbmUuc3luY2AgaW1wbGVtZW50YXRpb24uXG4gIHZhciBtZXRob2RNYXAgPSB7XG4gICAgJ2NyZWF0ZSc6ICdQT1NUJyxcbiAgICAndXBkYXRlJzogJ1BVVCcsXG4gICAgJ3BhdGNoJzogICdQQVRDSCcsXG4gICAgJ2RlbGV0ZSc6ICdERUxFVEUnLFxuICAgICdyZWFkJzogICAnR0VUJ1xuICB9O1xuXG4gIC8vIFNldCB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgQmFja2JvbmUuYWpheGAgdG8gcHJveHkgdGhyb3VnaCB0byBgJGAuXG4gIC8vIE92ZXJyaWRlIHRoaXMgaWYgeW91J2QgbGlrZSB0byB1c2UgYSBkaWZmZXJlbnQgbGlicmFyeS5cbiAgQmFja2JvbmUuYWpheCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBCYWNrYm9uZS4kLmFqYXguYXBwbHkoQmFja2JvbmUuJCwgYXJndW1lbnRzKTtcbiAgfTtcblxuICAvLyBCYWNrYm9uZS5Sb3V0ZXJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUm91dGVycyBtYXAgZmF1eC1VUkxzIHRvIGFjdGlvbnMsIGFuZCBmaXJlIGV2ZW50cyB3aGVuIHJvdXRlcyBhcmVcbiAgLy8gbWF0Y2hlZC4gQ3JlYXRpbmcgYSBuZXcgb25lIHNldHMgaXRzIGByb3V0ZXNgIGhhc2gsIGlmIG5vdCBzZXQgc3RhdGljYWxseS5cbiAgdmFyIFJvdXRlciA9IEJhY2tib25lLlJvdXRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIGlmIChvcHRpb25zLnJvdXRlcykgdGhpcy5yb3V0ZXMgPSBvcHRpb25zLnJvdXRlcztcbiAgICB0aGlzLl9iaW5kUm91dGVzKCk7XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm9yIG1hdGNoaW5nIG5hbWVkIHBhcmFtIHBhcnRzIGFuZCBzcGxhdHRlZFxuICAvLyBwYXJ0cyBvZiByb3V0ZSBzdHJpbmdzLlxuICB2YXIgb3B0aW9uYWxQYXJhbSA9IC9cXCgoLio/KVxcKS9nO1xuICB2YXIgbmFtZWRQYXJhbSAgICA9IC8oXFwoXFw/KT86XFx3Ky9nO1xuICB2YXIgc3BsYXRQYXJhbSAgICA9IC9cXCpcXHcrL2c7XG4gIHZhciBlc2NhcGVSZWdFeHAgID0gL1tcXC17fVxcW1xcXSs/LixcXFxcXFxeJHwjXFxzXS9nO1xuXG4gIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5Sb3V0ZXIqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICBfLmV4dGVuZChSb3V0ZXIucHJvdG90eXBlLCBFdmVudHMsIHtcblxuICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93blxuICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSxcblxuICAgIC8vIE1hbnVhbGx5IGJpbmQgYSBzaW5nbGUgbmFtZWQgcm91dGUgdG8gYSBjYWxsYmFjay4gRm9yIGV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyAgICAgdGhpcy5yb3V0ZSgnc2VhcmNoLzpxdWVyeS9wOm51bScsICdzZWFyY2gnLCBmdW5jdGlvbihxdWVyeSwgbnVtKSB7XG4gICAgLy8gICAgICAgLi4uXG4gICAgLy8gICAgIH0pO1xuICAgIC8vXG4gICAgcm91dGU6IGZ1bmN0aW9uKHJvdXRlLCBuYW1lLCBjYWxsYmFjaykge1xuICAgICAgaWYgKCFfLmlzUmVnRXhwKHJvdXRlKSkgcm91dGUgPSB0aGlzLl9yb3V0ZVRvUmVnRXhwKHJvdXRlKTtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuYW1lO1xuICAgICAgICBuYW1lID0gJyc7XG4gICAgICB9XG4gICAgICBpZiAoIWNhbGxiYWNrKSBjYWxsYmFjayA9IHRoaXNbbmFtZV07XG4gICAgICB2YXIgcm91dGVyID0gdGhpcztcbiAgICAgIEJhY2tib25lLmhpc3Rvcnkucm91dGUocm91dGUsIGZ1bmN0aW9uKGZyYWdtZW50KSB7XG4gICAgICAgIHZhciBhcmdzID0gcm91dGVyLl9leHRyYWN0UGFyYW1ldGVycyhyb3V0ZSwgZnJhZ21lbnQpO1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjay5hcHBseShyb3V0ZXIsIGFyZ3MpO1xuICAgICAgICByb3V0ZXIudHJpZ2dlci5hcHBseShyb3V0ZXIsIFsncm91dGU6JyArIG5hbWVdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIHJvdXRlci50cmlnZ2VyKCdyb3V0ZScsIG5hbWUsIGFyZ3MpO1xuICAgICAgICBCYWNrYm9uZS5oaXN0b3J5LnRyaWdnZXIoJ3JvdXRlJywgcm91dGVyLCBuYW1lLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFNpbXBsZSBwcm94eSB0byBgQmFja2JvbmUuaGlzdG9yeWAgdG8gc2F2ZSBhIGZyYWdtZW50IGludG8gdGhlIGhpc3RvcnkuXG4gICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7XG4gICAgICBCYWNrYm9uZS5oaXN0b3J5Lm5hdmlnYXRlKGZyYWdtZW50LCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBCaW5kIGFsbCBkZWZpbmVkIHJvdXRlcyB0byBgQmFja2JvbmUuaGlzdG9yeWAuIFdlIGhhdmUgdG8gcmV2ZXJzZSB0aGVcbiAgICAvLyBvcmRlciBvZiB0aGUgcm91dGVzIGhlcmUgdG8gc3VwcG9ydCBiZWhhdmlvciB3aGVyZSB0aGUgbW9zdCBnZW5lcmFsXG4gICAgLy8gcm91dGVzIGNhbiBiZSBkZWZpbmVkIGF0IHRoZSBib3R0b20gb2YgdGhlIHJvdXRlIG1hcC5cbiAgICBfYmluZFJvdXRlczogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMucm91dGVzKSByZXR1cm47XG4gICAgICB0aGlzLnJvdXRlcyA9IF8ucmVzdWx0KHRoaXMsICdyb3V0ZXMnKTtcbiAgICAgIHZhciByb3V0ZSwgcm91dGVzID0gXy5rZXlzKHRoaXMucm91dGVzKTtcbiAgICAgIHdoaWxlICgocm91dGUgPSByb3V0ZXMucG9wKCkpICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5yb3V0ZShyb3V0ZSwgdGhpcy5yb3V0ZXNbcm91dGVdKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIHJvdXRlIHN0cmluZyBpbnRvIGEgcmVndWxhciBleHByZXNzaW9uLCBzdWl0YWJsZSBmb3IgbWF0Y2hpbmdcbiAgICAvLyBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uIGhhc2guXG4gICAgX3JvdXRlVG9SZWdFeHA6IGZ1bmN0aW9uKHJvdXRlKSB7XG4gICAgICByb3V0ZSA9IHJvdXRlLnJlcGxhY2UoZXNjYXBlUmVnRXhwLCAnXFxcXCQmJylcbiAgICAgICAgICAgICAgICAgICAucmVwbGFjZShvcHRpb25hbFBhcmFtLCAnKD86JDEpPycpXG4gICAgICAgICAgICAgICAgICAgLnJlcGxhY2UobmFtZWRQYXJhbSwgZnVuY3Rpb24obWF0Y2gsIG9wdGlvbmFsKXtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25hbCA/IG1hdGNoIDogJyhbXlxcL10rKSc7XG4gICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAucmVwbGFjZShzcGxhdFBhcmFtLCAnKC4qPyknKTtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHJvdXRlICsgJyQnKTtcbiAgICB9LFxuXG4gICAgLy8gR2l2ZW4gYSByb3V0ZSwgYW5kIGEgVVJMIGZyYWdtZW50IHRoYXQgaXQgbWF0Y2hlcywgcmV0dXJuIHRoZSBhcnJheSBvZlxuICAgIC8vIGV4dHJhY3RlZCBkZWNvZGVkIHBhcmFtZXRlcnMuIEVtcHR5IG9yIHVubWF0Y2hlZCBwYXJhbWV0ZXJzIHdpbGwgYmVcbiAgICAvLyB0cmVhdGVkIGFzIGBudWxsYCB0byBub3JtYWxpemUgY3Jvc3MtYnJvd3NlciBiZWhhdmlvci5cbiAgICBfZXh0cmFjdFBhcmFtZXRlcnM6IGZ1bmN0aW9uKHJvdXRlLCBmcmFnbWVudCkge1xuICAgICAgdmFyIHBhcmFtcyA9IHJvdXRlLmV4ZWMoZnJhZ21lbnQpLnNsaWNlKDEpO1xuICAgICAgcmV0dXJuIF8ubWFwKHBhcmFtcywgZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtID8gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtKSA6IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gQmFja2JvbmUuSGlzdG9yeVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gSGFuZGxlcyBjcm9zcy1icm93c2VyIGhpc3RvcnkgbWFuYWdlbWVudCwgYmFzZWQgb24gZWl0aGVyXG4gIC8vIFtwdXNoU3RhdGVdKGh0dHA6Ly9kaXZlaW50b2h0bWw1LmluZm8vaGlzdG9yeS5odG1sKSBhbmQgcmVhbCBVUkxzLCBvclxuICAvLyBbb25oYXNoY2hhbmdlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS93aW5kb3cub25oYXNoY2hhbmdlKVxuICAvLyBhbmQgVVJMIGZyYWdtZW50cy4gSWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgbmVpdGhlciAob2xkIElFLCBuYXRjaCksXG4gIC8vIGZhbGxzIGJhY2sgdG8gcG9sbGluZy5cbiAgdmFyIEhpc3RvcnkgPSBCYWNrYm9uZS5IaXN0b3J5ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIF8uYmluZEFsbCh0aGlzLCAnY2hlY2tVcmwnKTtcblxuICAgIC8vIEVuc3VyZSB0aGF0IGBIaXN0b3J5YCBjYW4gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBicm93c2VyLlxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5sb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICAgIHRoaXMuaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICAgIH1cbiAgfTtcblxuICAvLyBDYWNoZWQgcmVnZXggZm9yIHN0cmlwcGluZyBhIGxlYWRpbmcgaGFzaC9zbGFzaCBhbmQgdHJhaWxpbmcgc3BhY2UuXG4gIHZhciByb3V0ZVN0cmlwcGVyID0gL15bI1xcL118XFxzKyQvZztcblxuICAvLyBDYWNoZWQgcmVnZXggZm9yIHN0cmlwcGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzLlxuICB2YXIgcm9vdFN0cmlwcGVyID0gL15cXC8rfFxcLyskL2c7XG5cbiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBkZXRlY3RpbmcgTVNJRS5cbiAgdmFyIGlzRXhwbG9yZXIgPSAvbXNpZSBbXFx3Ll0rLztcblxuICAvLyBDYWNoZWQgcmVnZXggZm9yIHJlbW92aW5nIGEgdHJhaWxpbmcgc2xhc2guXG4gIHZhciB0cmFpbGluZ1NsYXNoID0gL1xcLyQvO1xuXG4gIC8vIEhhcyB0aGUgaGlzdG9yeSBoYW5kbGluZyBhbHJlYWR5IGJlZW4gc3RhcnRlZD9cbiAgSGlzdG9yeS5zdGFydGVkID0gZmFsc2U7XG5cbiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLkhpc3RvcnkqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICBfLmV4dGVuZChIaXN0b3J5LnByb3RvdHlwZSwgRXZlbnRzLCB7XG5cbiAgICAvLyBUaGUgZGVmYXVsdCBpbnRlcnZhbCB0byBwb2xsIGZvciBoYXNoIGNoYW5nZXMsIGlmIG5lY2Vzc2FyeSwgaXNcbiAgICAvLyB0d2VudHkgdGltZXMgYSBzZWNvbmQuXG4gICAgaW50ZXJ2YWw6IDUwLFxuXG4gICAgLy8gR2V0cyB0aGUgdHJ1ZSBoYXNoIHZhbHVlLiBDYW5ub3QgdXNlIGxvY2F0aW9uLmhhc2ggZGlyZWN0bHkgZHVlIHRvIGJ1Z1xuICAgIC8vIGluIEZpcmVmb3ggd2hlcmUgbG9jYXRpb24uaGFzaCB3aWxsIGFsd2F5cyBiZSBkZWNvZGVkLlxuICAgIGdldEhhc2g6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgICAgdmFyIG1hdGNoID0gKHdpbmRvdyB8fCB0aGlzKS5sb2NhdGlvbi5ocmVmLm1hdGNoKC8jKC4qKSQvKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJyc7XG4gICAgfSxcblxuICAgIC8vIEdldCB0aGUgY3Jvc3MtYnJvd3NlciBub3JtYWxpemVkIFVSTCBmcmFnbWVudCwgZWl0aGVyIGZyb20gdGhlIFVSTCxcbiAgICAvLyB0aGUgaGFzaCwgb3IgdGhlIG92ZXJyaWRlLlxuICAgIGdldEZyYWdtZW50OiBmdW5jdGlvbihmcmFnbWVudCwgZm9yY2VQdXNoU3RhdGUpIHtcbiAgICAgIGlmIChmcmFnbWVudCA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUgfHwgIXRoaXMuX3dhbnRzSGFzaENoYW5nZSB8fCBmb3JjZVB1c2hTdGF0ZSkge1xuICAgICAgICAgIGZyYWdtZW50ID0gdGhpcy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdC5yZXBsYWNlKHRyYWlsaW5nU2xhc2gsICcnKTtcbiAgICAgICAgICBpZiAoIWZyYWdtZW50LmluZGV4T2Yocm9vdCkpIGZyYWdtZW50ID0gZnJhZ21lbnQuc3Vic3RyKHJvb3QubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZnJhZ21lbnQucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7XG4gICAgfSxcblxuICAgIC8vIFN0YXJ0IHRoZSBoYXNoIGNoYW5nZSBoYW5kbGluZywgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgY3VycmVudCBVUkwgbWF0Y2hlc1xuICAgIC8vIGFuIGV4aXN0aW5nIHJvdXRlLCBhbmQgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmIChIaXN0b3J5LnN0YXJ0ZWQpIHRocm93IG5ldyBFcnJvcihcIkJhY2tib25lLmhpc3RvcnkgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkXCIpO1xuICAgICAgSGlzdG9yeS5zdGFydGVkID0gdHJ1ZTtcblxuICAgICAgLy8gRmlndXJlIG91dCB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uLiBEbyB3ZSBuZWVkIGFuIGlmcmFtZT9cbiAgICAgIC8vIElzIHB1c2hTdGF0ZSBkZXNpcmVkIC4uLiBpcyBpdCBhdmFpbGFibGU/XG4gICAgICB0aGlzLm9wdGlvbnMgICAgICAgICAgPSBfLmV4dGVuZCh7fSwge3Jvb3Q6ICcvJ30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICB0aGlzLnJvb3QgICAgICAgICAgICAgPSB0aGlzLm9wdGlvbnMucm9vdDtcbiAgICAgIHRoaXMuX3dhbnRzSGFzaENoYW5nZSA9IHRoaXMub3B0aW9ucy5oYXNoQ2hhbmdlICE9PSBmYWxzZTtcbiAgICAgIHRoaXMuX3dhbnRzUHVzaFN0YXRlICA9ICEhdGhpcy5vcHRpb25zLnB1c2hTdGF0ZTtcbiAgICAgIHRoaXMuX2hhc1B1c2hTdGF0ZSAgICA9ICEhKHRoaXMub3B0aW9ucy5wdXNoU3RhdGUgJiYgdGhpcy5oaXN0b3J5ICYmIHRoaXMuaGlzdG9yeS5wdXNoU3RhdGUpO1xuICAgICAgdmFyIGZyYWdtZW50ICAgICAgICAgID0gdGhpcy5nZXRGcmFnbWVudCgpO1xuICAgICAgdmFyIGRvY01vZGUgICAgICAgICAgID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuICAgICAgdmFyIG9sZElFICAgICAgICAgICAgID0gKGlzRXhwbG9yZXIuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpICYmICghZG9jTW9kZSB8fCBkb2NNb2RlIDw9IDcpKTtcblxuICAgICAgLy8gTm9ybWFsaXplIHJvb3QgdG8gYWx3YXlzIGluY2x1ZGUgYSBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaC5cbiAgICAgIHRoaXMucm9vdCA9ICgnLycgKyB0aGlzLnJvb3QgKyAnLycpLnJlcGxhY2Uocm9vdFN0cmlwcGVyLCAnLycpO1xuXG4gICAgICBpZiAob2xkSUUgJiYgdGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lID0gQmFja2JvbmUuJCgnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiB0YWJpbmRleD1cIi0xXCIgLz4nKS5oaWRlKCkuYXBwZW5kVG8oJ2JvZHknKVswXS5jb250ZW50V2luZG93O1xuICAgICAgICB0aGlzLm5hdmlnYXRlKGZyYWdtZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gRGVwZW5kaW5nIG9uIHdoZXRoZXIgd2UncmUgdXNpbmcgcHVzaFN0YXRlIG9yIGhhc2hlcywgYW5kIHdoZXRoZXJcbiAgICAgIC8vICdvbmhhc2hjaGFuZ2UnIGlzIHN1cHBvcnRlZCwgZGV0ZXJtaW5lIGhvdyB3ZSBjaGVjayB0aGUgVVJMIHN0YXRlLlxuICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSkge1xuICAgICAgICBCYWNrYm9uZS4kKHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhpcy5jaGVja1VybCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSAmJiAoJ29uaGFzaGNoYW5nZScgaW4gd2luZG93KSAmJiAhb2xkSUUpIHtcbiAgICAgICAgQmFja2JvbmUuJCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSkge1xuICAgICAgICB0aGlzLl9jaGVja1VybEludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5jaGVja1VybCwgdGhpcy5pbnRlcnZhbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVybWluZSBpZiB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgYmFzZSB1cmwsIGZvciBhIHB1c2hTdGF0ZSBsaW5rXG4gICAgICAvLyBvcGVuZWQgYnkgYSBub24tcHVzaFN0YXRlIGJyb3dzZXIuXG4gICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQ7XG4gICAgICB2YXIgbG9jID0gdGhpcy5sb2NhdGlvbjtcbiAgICAgIHZhciBhdFJvb3QgPSBsb2MucGF0aG5hbWUucmVwbGFjZSgvW15cXC9dJC8sICckJi8nKSA9PT0gdGhpcy5yb290O1xuXG4gICAgICAvLyBJZiB3ZSd2ZSBzdGFydGVkIG9mZiB3aXRoIGEgcm91dGUgZnJvbSBhIGBwdXNoU3RhdGVgLWVuYWJsZWQgYnJvd3NlcixcbiAgICAgIC8vIGJ1dCB3ZSdyZSBjdXJyZW50bHkgaW4gYSBicm93c2VyIHRoYXQgZG9lc24ndCBzdXBwb3J0IGl0Li4uXG4gICAgICBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlICYmIHRoaXMuX3dhbnRzUHVzaFN0YXRlICYmICF0aGlzLl9oYXNQdXNoU3RhdGUgJiYgIWF0Um9vdCkge1xuICAgICAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChudWxsLCB0cnVlKTtcbiAgICAgICAgdGhpcy5sb2NhdGlvbi5yZXBsYWNlKHRoaXMucm9vdCArIHRoaXMubG9jYXRpb24uc2VhcmNoICsgJyMnICsgdGhpcy5mcmFnbWVudCk7XG4gICAgICAgIC8vIFJldHVybiBpbW1lZGlhdGVseSBhcyBicm93c2VyIHdpbGwgZG8gcmVkaXJlY3QgdG8gbmV3IHVybFxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgLy8gT3IgaWYgd2UndmUgc3RhcnRlZCBvdXQgd2l0aCBhIGhhc2gtYmFzZWQgcm91dGUsIGJ1dCB3ZSdyZSBjdXJyZW50bHlcbiAgICAgIC8vIGluIGEgYnJvd3NlciB3aGVyZSBpdCBjb3VsZCBiZSBgcHVzaFN0YXRlYC1iYXNlZCBpbnN0ZWFkLi4uXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzUHVzaFN0YXRlICYmIHRoaXMuX2hhc1B1c2hTdGF0ZSAmJiBhdFJvb3QgJiYgbG9jLmhhc2gpIHtcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpLnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpO1xuICAgICAgICB0aGlzLmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBkb2N1bWVudC50aXRsZSwgdGhpcy5yb290ICsgdGhpcy5mcmFnbWVudCArIGxvYy5zZWFyY2gpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaWxlbnQpIHJldHVybiB0aGlzLmxvYWRVcmwoKTtcbiAgICB9LFxuXG4gICAgLy8gRGlzYWJsZSBCYWNrYm9uZS5oaXN0b3J5LCBwZXJoYXBzIHRlbXBvcmFyaWx5LiBOb3QgdXNlZnVsIGluIGEgcmVhbCBhcHAsXG4gICAgLy8gYnV0IHBvc3NpYmx5IHVzZWZ1bCBmb3IgdW5pdCB0ZXN0aW5nIFJvdXRlcnMuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICBCYWNrYm9uZS4kKHdpbmRvdykub2ZmKCdwb3BzdGF0ZScsIHRoaXMuY2hlY2tVcmwpLm9mZignaGFzaGNoYW5nZScsIHRoaXMuY2hlY2tVcmwpO1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9jaGVja1VybEludGVydmFsKTtcbiAgICAgIEhpc3Rvcnkuc3RhcnRlZCA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyBBZGQgYSByb3V0ZSB0byBiZSB0ZXN0ZWQgd2hlbiB0aGUgZnJhZ21lbnQgY2hhbmdlcy4gUm91dGVzIGFkZGVkIGxhdGVyXG4gICAgLy8gbWF5IG92ZXJyaWRlIHByZXZpb3VzIHJvdXRlcy5cbiAgICByb3V0ZTogZnVuY3Rpb24ocm91dGUsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzLnVuc2hpZnQoe3JvdXRlOiByb3V0ZSwgY2FsbGJhY2s6IGNhbGxiYWNrfSk7XG4gICAgfSxcblxuICAgIC8vIENoZWNrcyB0aGUgY3VycmVudCBVUkwgdG8gc2VlIGlmIGl0IGhhcyBjaGFuZ2VkLCBhbmQgaWYgaXQgaGFzLFxuICAgIC8vIGNhbGxzIGBsb2FkVXJsYCwgbm9ybWFsaXppbmcgYWNyb3NzIHRoZSBoaWRkZW4gaWZyYW1lLlxuICAgIGNoZWNrVXJsOiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoKTtcbiAgICAgIGlmIChjdXJyZW50ID09PSB0aGlzLmZyYWdtZW50ICYmIHRoaXMuaWZyYW1lKSB7XG4gICAgICAgIGN1cnJlbnQgPSB0aGlzLmdldEZyYWdtZW50KHRoaXMuZ2V0SGFzaCh0aGlzLmlmcmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZnJhZ21lbnQpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICh0aGlzLmlmcmFtZSkgdGhpcy5uYXZpZ2F0ZShjdXJyZW50KTtcbiAgICAgIHRoaXMubG9hZFVybCgpIHx8IHRoaXMubG9hZFVybCh0aGlzLmdldEhhc2goKSk7XG4gICAgfSxcblxuICAgIC8vIEF0dGVtcHQgdG8gbG9hZCB0aGUgY3VycmVudCBVUkwgZnJhZ21lbnQuIElmIGEgcm91dGUgc3VjY2VlZHMgd2l0aCBhXG4gICAgLy8gbWF0Y2gsIHJldHVybnMgYHRydWVgLiBJZiBubyBkZWZpbmVkIHJvdXRlcyBtYXRjaGVzIHRoZSBmcmFnbWVudCxcbiAgICAvLyByZXR1cm5zIGBmYWxzZWAuXG4gICAgbG9hZFVybDogZnVuY3Rpb24oZnJhZ21lbnRPdmVycmlkZSkge1xuICAgICAgdmFyIGZyYWdtZW50ID0gdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoZnJhZ21lbnRPdmVycmlkZSk7XG4gICAgICB2YXIgbWF0Y2hlZCA9IF8uYW55KHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGhhbmRsZXIucm91dGUudGVzdChmcmFnbWVudCkpIHtcbiAgICAgICAgICBoYW5kbGVyLmNhbGxiYWNrKGZyYWdtZW50KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9LFxuXG4gICAgLy8gU2F2ZSBhIGZyYWdtZW50IGludG8gdGhlIGhhc2ggaGlzdG9yeSwgb3IgcmVwbGFjZSB0aGUgVVJMIHN0YXRlIGlmIHRoZVxuICAgIC8vICdyZXBsYWNlJyBvcHRpb24gaXMgcGFzc2VkLiBZb3UgYXJlIHJlc3BvbnNpYmxlIGZvciBwcm9wZXJseSBVUkwtZW5jb2RpbmdcbiAgICAvLyB0aGUgZnJhZ21lbnQgaW4gYWR2YW5jZS5cbiAgICAvL1xuICAgIC8vIFRoZSBvcHRpb25zIG9iamVjdCBjYW4gY29udGFpbiBgdHJpZ2dlcjogdHJ1ZWAgaWYgeW91IHdpc2ggdG8gaGF2ZSB0aGVcbiAgICAvLyByb3V0ZSBjYWxsYmFjayBiZSBmaXJlZCAobm90IHVzdWFsbHkgZGVzaXJhYmxlKSwgb3IgYHJlcGxhY2U6IHRydWVgLCBpZlxuICAgIC8vIHlvdSB3aXNoIHRvIG1vZGlmeSB0aGUgY3VycmVudCBVUkwgd2l0aG91dCBhZGRpbmcgYW4gZW50cnkgdG8gdGhlIGhpc3RvcnkuXG4gICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7XG4gICAgICBpZiAoIUhpc3Rvcnkuc3RhcnRlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMgPT09IHRydWUpIG9wdGlvbnMgPSB7dHJpZ2dlcjogb3B0aW9uc307XG4gICAgICBmcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoZnJhZ21lbnQgfHwgJycpO1xuICAgICAgaWYgKHRoaXMuZnJhZ21lbnQgPT09IGZyYWdtZW50KSByZXR1cm47XG4gICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQ7XG4gICAgICB2YXIgdXJsID0gdGhpcy5yb290ICsgZnJhZ21lbnQ7XG5cbiAgICAgIC8vIElmIHB1c2hTdGF0ZSBpcyBhdmFpbGFibGUsIHdlIHVzZSBpdCB0byBzZXQgdGhlIGZyYWdtZW50IGFzIGEgcmVhbCBVUkwuXG4gICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlKSB7XG4gICAgICAgIHRoaXMuaGlzdG9yeVtvcHRpb25zLnJlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXSh7fSwgZG9jdW1lbnQudGl0bGUsIHVybCk7XG5cbiAgICAgIC8vIElmIGhhc2ggY2hhbmdlcyBoYXZlbid0IGJlZW4gZXhwbGljaXRseSBkaXNhYmxlZCwgdXBkYXRlIHRoZSBoYXNoXG4gICAgICAvLyBmcmFnbWVudCB0byBzdG9yZSBoaXN0b3J5LlxuICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlSGFzaCh0aGlzLmxvY2F0aW9uLCBmcmFnbWVudCwgb3B0aW9ucy5yZXBsYWNlKTtcbiAgICAgICAgaWYgKHRoaXMuaWZyYW1lICYmIChmcmFnbWVudCAhPT0gdGhpcy5nZXRGcmFnbWVudCh0aGlzLmdldEhhc2godGhpcy5pZnJhbWUpKSkpIHtcbiAgICAgICAgICAvLyBPcGVuaW5nIGFuZCBjbG9zaW5nIHRoZSBpZnJhbWUgdHJpY2tzIElFNyBhbmQgZWFybGllciB0byBwdXNoIGFcbiAgICAgICAgICAvLyBoaXN0b3J5IGVudHJ5IG9uIGhhc2gtdGFnIGNoYW5nZS4gIFdoZW4gcmVwbGFjZSBpcyB0cnVlLCB3ZSBkb24ndFxuICAgICAgICAgIC8vIHdhbnQgdGhpcy5cbiAgICAgICAgICBpZighb3B0aW9ucy5yZXBsYWNlKSB0aGlzLmlmcmFtZS5kb2N1bWVudC5vcGVuKCkuY2xvc2UoKTtcbiAgICAgICAgICB0aGlzLl91cGRhdGVIYXNoKHRoaXMuaWZyYW1lLmxvY2F0aW9uLCBmcmFnbWVudCwgb3B0aW9ucy5yZXBsYWNlKTtcbiAgICAgICAgfVxuXG4gICAgICAvLyBJZiB5b3UndmUgdG9sZCB1cyB0aGF0IHlvdSBleHBsaWNpdGx5IGRvbid0IHdhbnQgZmFsbGJhY2sgaGFzaGNoYW5nZS1cbiAgICAgIC8vIGJhc2VkIGhpc3RvcnksIHRoZW4gYG5hdmlnYXRlYCBiZWNvbWVzIGEgcGFnZSByZWZyZXNoLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy50cmlnZ2VyKSB0aGlzLmxvYWRVcmwoZnJhZ21lbnQpO1xuICAgIH0sXG5cbiAgICAvLyBVcGRhdGUgdGhlIGhhc2ggbG9jYXRpb24sIGVpdGhlciByZXBsYWNpbmcgdGhlIGN1cnJlbnQgZW50cnksIG9yIGFkZGluZ1xuICAgIC8vIGEgbmV3IG9uZSB0byB0aGUgYnJvd3NlciBoaXN0b3J5LlxuICAgIF91cGRhdGVIYXNoOiBmdW5jdGlvbihsb2NhdGlvbiwgZnJhZ21lbnQsIHJlcGxhY2UpIHtcbiAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgIHZhciBocmVmID0gbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8oamF2YXNjcmlwdDp8IykuKiQvLCAnJyk7XG4gICAgICAgIGxvY2F0aW9uLnJlcGxhY2UoaHJlZiArICcjJyArIGZyYWdtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNvbWUgYnJvd3NlcnMgcmVxdWlyZSB0aGF0IGBoYXNoYCBjb250YWlucyBhIGxlYWRpbmcgIy5cbiAgICAgICAgbG9jYXRpb24uaGFzaCA9ICcjJyArIGZyYWdtZW50O1xuICAgICAgfVxuICAgIH1cblxuICB9KTtcblxuICAvLyBDcmVhdGUgdGhlIGRlZmF1bHQgQmFja2JvbmUuaGlzdG9yeS5cbiAgQmFja2JvbmUuaGlzdG9yeSA9IG5ldyBIaXN0b3J5O1xuXG4gIC8vIEhlbHBlcnNcbiAgLy8gLS0tLS0tLVxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb3JyZWN0bHkgc2V0IHVwIHRoZSBwcm90b3R5cGUgY2hhaW4sIGZvciBzdWJjbGFzc2VzLlxuICAvLyBTaW1pbGFyIHRvIGBnb29nLmluaGVyaXRzYCwgYnV0IHVzZXMgYSBoYXNoIG9mIHByb3RvdHlwZSBwcm9wZXJ0aWVzIGFuZFxuICAvLyBjbGFzcyBwcm9wZXJ0aWVzIHRvIGJlIGV4dGVuZGVkLlxuICB2YXIgZXh0ZW5kID0gZnVuY3Rpb24ocHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcztcbiAgICB2YXIgY2hpbGQ7XG5cbiAgICAvLyBUaGUgY29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBuZXcgc3ViY2xhc3MgaXMgZWl0aGVyIGRlZmluZWQgYnkgeW91XG4gICAgLy8gKHRoZSBcImNvbnN0cnVjdG9yXCIgcHJvcGVydHkgaW4geW91ciBgZXh0ZW5kYCBkZWZpbml0aW9uKSwgb3IgZGVmYXVsdGVkXG4gICAgLy8gYnkgdXMgdG8gc2ltcGx5IGNhbGwgdGhlIHBhcmVudCdzIGNvbnN0cnVjdG9yLlxuICAgIGlmIChwcm90b1Byb3BzICYmIF8uaGFzKHByb3RvUHJvcHMsICdjb25zdHJ1Y3RvcicpKSB7XG4gICAgICBjaGlsZCA9IHByb3RvUHJvcHMuY29uc3RydWN0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkID0gZnVuY3Rpb24oKXsgcmV0dXJuIHBhcmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIH1cblxuICAgIC8vIEFkZCBzdGF0aWMgcHJvcGVydGllcyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24sIGlmIHN1cHBsaWVkLlxuICAgIF8uZXh0ZW5kKGNoaWxkLCBwYXJlbnQsIHN0YXRpY1Byb3BzKTtcblxuICAgIC8vIFNldCB0aGUgcHJvdG90eXBlIGNoYWluIHRvIGluaGVyaXQgZnJvbSBgcGFyZW50YCwgd2l0aG91dCBjYWxsaW5nXG4gICAgLy8gYHBhcmVudGAncyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICB2YXIgU3Vycm9nYXRlID0gZnVuY3Rpb24oKXsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9O1xuICAgIFN1cnJvZ2F0ZS5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlO1xuICAgIGNoaWxkLnByb3RvdHlwZSA9IG5ldyBTdXJyb2dhdGU7XG5cbiAgICAvLyBBZGQgcHJvdG90eXBlIHByb3BlcnRpZXMgKGluc3RhbmNlIHByb3BlcnRpZXMpIHRvIHRoZSBzdWJjbGFzcyxcbiAgICAvLyBpZiBzdXBwbGllZC5cbiAgICBpZiAocHJvdG9Qcm9wcykgXy5leHRlbmQoY2hpbGQucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcblxuICAgIC8vIFNldCBhIGNvbnZlbmllbmNlIHByb3BlcnR5IGluIGNhc2UgdGhlIHBhcmVudCdzIHByb3RvdHlwZSBpcyBuZWVkZWRcbiAgICAvLyBsYXRlci5cbiAgICBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlO1xuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9O1xuXG4gIC8vIFNldCB1cCBpbmhlcml0YW5jZSBmb3IgdGhlIG1vZGVsLCBjb2xsZWN0aW9uLCByb3V0ZXIsIHZpZXcgYW5kIGhpc3RvcnkuXG4gIE1vZGVsLmV4dGVuZCA9IENvbGxlY3Rpb24uZXh0ZW5kID0gUm91dGVyLmV4dGVuZCA9IFZpZXcuZXh0ZW5kID0gSGlzdG9yeS5leHRlbmQgPSBleHRlbmQ7XG5cbiAgLy8gVGhyb3cgYW4gZXJyb3Igd2hlbiBhIFVSTCBpcyBuZWVkZWQsIGFuZCBub25lIGlzIHN1cHBsaWVkLlxuICB2YXIgdXJsRXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgXCJ1cmxcIiBwcm9wZXJ0eSBvciBmdW5jdGlvbiBtdXN0IGJlIHNwZWNpZmllZCcpO1xuICB9O1xuXG4gIC8vIFdyYXAgYW4gb3B0aW9uYWwgZXJyb3IgY2FsbGJhY2sgd2l0aCBhIGZhbGxiYWNrIGVycm9yIGV2ZW50LlxuICB2YXIgd3JhcEVycm9yID0gZnVuY3Rpb24gKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgdmFyIGVycm9yID0gb3B0aW9ucy5lcnJvcjtcbiAgICBvcHRpb25zLmVycm9yID0gZnVuY3Rpb24ocmVzcCkge1xuICAgICAgaWYgKGVycm9yKSBlcnJvcihtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICBtb2RlbC50cmlnZ2VyKCdlcnJvcicsIG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICB9O1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuXG59KSgpIiwiKGZ1bmN0aW9uKCl7Ly8gICAgIFVuZGVyc2NvcmUuanMgMS40LjRcbi8vICAgICBodHRwOi8vdW5kZXJzY29yZWpzLm9yZ1xuLy8gICAgIChjKSAyMDA5LTIwMTMgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIEluYy5cbi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgLy8gQmFzZWxpbmUgc2V0dXBcbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICAvLyBFc3RhYmxpc2ggdGhlIHJvb3Qgb2JqZWN0LCBgd2luZG93YCBpbiB0aGUgYnJvd3Nlciwgb3IgYGdsb2JhbGAgb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gRXN0YWJsaXNoIHRoZSBvYmplY3QgdGhhdCBnZXRzIHJldHVybmVkIHRvIGJyZWFrIG91dCBvZiBhIGxvb3AgaXRlcmF0aW9uLlxuICB2YXIgYnJlYWtlciA9IHt9O1xuXG4gIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIEZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbiAgdmFyIHB1c2ggICAgICAgICAgICAgPSBBcnJheVByb3RvLnB1c2gsXG4gICAgICBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSxcbiAgICAgIGNvbmNhdCAgICAgICAgICAgPSBBcnJheVByb3RvLmNvbmNhdCxcbiAgICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAvLyBBbGwgKipFQ01BU2NyaXB0IDUqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2VcbiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuXG4gIHZhclxuICAgIG5hdGl2ZUZvckVhY2ggICAgICA9IEFycmF5UHJvdG8uZm9yRWFjaCxcbiAgICBuYXRpdmVNYXAgICAgICAgICAgPSBBcnJheVByb3RvLm1hcCxcbiAgICBuYXRpdmVSZWR1Y2UgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZSxcbiAgICBuYXRpdmVSZWR1Y2VSaWdodCAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0LFxuICAgIG5hdGl2ZUZpbHRlciAgICAgICA9IEFycmF5UHJvdG8uZmlsdGVyLFxuICAgIG5hdGl2ZUV2ZXJ5ICAgICAgICA9IEFycmF5UHJvdG8uZXZlcnksXG4gICAgbmF0aXZlU29tZSAgICAgICAgID0gQXJyYXlQcm90by5zb21lLFxuICAgIG5hdGl2ZUluZGV4T2YgICAgICA9IEFycmF5UHJvdG8uaW5kZXhPZixcbiAgICBuYXRpdmVMYXN0SW5kZXhPZiAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mLFxuICAgIG5hdGl2ZUlzQXJyYXkgICAgICA9IEFycmF5LmlzQXJyYXksXG4gICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsXG4gICAgbmF0aXZlQmluZCAgICAgICAgID0gRnVuY1Byb3RvLmJpbmQ7XG5cbiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgaW5cbiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0IHZpYSBhIHN0cmluZyBpZGVudGlmaWVyLFxuICAvLyBmb3IgQ2xvc3VyZSBDb21waWxlciBcImFkdmFuY2VkXCIgbW9kZS5cbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXztcbiAgICB9XG4gICAgZXhwb3J0cy5fID0gXztcbiAgfSBlbHNlIHtcbiAgICByb290Ll8gPSBfO1xuICB9XG5cbiAgLy8gQ3VycmVudCB2ZXJzaW9uLlxuICBfLlZFUlNJT04gPSAnMS40LjQnO1xuXG4gIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4gIC8vIEhhbmRsZXMgb2JqZWN0cyB3aXRoIHRoZSBidWlsdC1pbiBgZm9yRWFjaGAsIGFycmF5cywgYW5kIHJhdyBvYmplY3RzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZm9yRWFjaGAgaWYgYXZhaWxhYmxlLlxuICB2YXIgZWFjaCA9IF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybjtcbiAgICBpZiAobmF0aXZlRm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gbmF0aXZlRm9yRWFjaCkge1xuICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikgPT09IGJyZWFrZXIpIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoXy5oYXMob2JqLCBrZXkpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0b3IgdG8gZWFjaCBlbGVtZW50LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgbWFwYCBpZiBhdmFpbGFibGUuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgICBpZiAobmF0aXZlTWFwICYmIG9iai5tYXAgPT09IG5hdGl2ZU1hcCkgcmV0dXJuIG9iai5tYXAoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJlc3VsdHNbcmVzdWx0cy5sZW5ndGhdID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIHZhciByZWR1Y2VFcnJvciA9ICdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJztcblxuICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4gIC8vIG9yIGBmb2xkbGAuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGByZWR1Y2VgIGlmIGF2YWlsYWJsZS5cbiAgXy5yZWR1Y2UgPSBfLmZvbGRsID0gXy5pbmplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgdmFyIGluaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdO1xuICAgIGlmIChuYXRpdmVSZWR1Y2UgJiYgb2JqLnJlZHVjZSA9PT0gbmF0aXZlUmVkdWNlKSB7XG4gICAgICBpZiAoY29udGV4dCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGluaXRpYWwgPyBvYmoucmVkdWNlKGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2UoaXRlcmF0b3IpO1xuICAgIH1cbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoIWluaXRpYWwpIHtcbiAgICAgICAgbWVtbyA9IHZhbHVlO1xuICAgICAgICBpbml0aWFsID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG1lbW8sIHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbml0aWFsKSB0aHJvdyBuZXcgVHlwZUVycm9yKHJlZHVjZUVycm9yKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZVJpZ2h0YCBpZiBhdmFpbGFibGUuXG4gIF8ucmVkdWNlUmlnaHQgPSBfLmZvbGRyID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgbWVtbywgY29udGV4dCkge1xuICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTtcbiAgICBpZiAobmF0aXZlUmVkdWNlUmlnaHQgJiYgb2JqLnJlZHVjZVJpZ2h0ID09PSBuYXRpdmVSZWR1Y2VSaWdodCkge1xuICAgICAgaWYgKGNvbnRleHQpIGl0ZXJhdG9yID0gXy5iaW5kKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBpbml0aWFsID8gb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2VSaWdodChpdGVyYXRvcik7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT09ICtsZW5ndGgpIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB9XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgaW5kZXggPSBrZXlzID8ga2V5c1stLWxlbmd0aF0gOiAtLWxlbmd0aDtcbiAgICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgICBtZW1vID0gb2JqW2luZGV4XTtcbiAgICAgICAgaW5pdGlhbCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZW1vID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCBtZW1vLCBvYmpbaW5kZXhdLCBpbmRleCwgbGlzdCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbml0aWFsKSB0aHJvdyBuZXcgVHlwZUVycm9yKHJlZHVjZUVycm9yKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIGZpcnN0IHZhbHVlIHdoaWNoIHBhc3NlcyBhIHRydXRoIHRlc3QuIEFsaWFzZWQgYXMgYGRldGVjdGAuXG4gIF8uZmluZCA9IF8uZGV0ZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgYW55KG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSB7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBmaWx0ZXJgIGlmIGF2YWlsYWJsZS5cbiAgLy8gQWxpYXNlZCBhcyBgc2VsZWN0YC5cbiAgXy5maWx0ZXIgPSBfLnNlbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdHM7XG4gICAgaWYgKG5hdGl2ZUZpbHRlciAmJiBvYmouZmlsdGVyID09PSBuYXRpdmVGaWx0ZXIpIHJldHVybiBvYmouZmlsdGVyKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoXSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuXG4gIF8ucmVqZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmV0dXJuICFpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgfSwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgYWxsIG9mIHRoZSBlbGVtZW50cyBtYXRjaCBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBldmVyeWAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0b3IgfHwgKGl0ZXJhdG9yID0gXy5pZGVudGl0eSk7XG4gICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChuYXRpdmVFdmVyeSAmJiBvYmouZXZlcnkgPT09IG5hdGl2ZUV2ZXJ5KSByZXR1cm4gb2JqLmV2ZXJ5KGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoIShyZXN1bHQgPSByZXN1bHQgJiYgaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSkgcmV0dXJuIGJyZWFrZXI7XG4gICAgfSk7XG4gICAgcmV0dXJuICEhcmVzdWx0O1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IG1hdGNoZXMgYSB0cnV0aCB0ZXN0LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgc29tZWAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBhbnlgLlxuICB2YXIgYW55ID0gXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0b3IgfHwgKGl0ZXJhdG9yID0gXy5pZGVudGl0eSk7XG4gICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAobmF0aXZlU29tZSAmJiBvYmouc29tZSA9PT0gbmF0aXZlU29tZSkgcmV0dXJuIG9iai5zb21lKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocmVzdWx0IHx8IChyZXN1bHQgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjtcbiAgICB9KTtcbiAgICByZXR1cm4gISFyZXN1bHQ7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBhcnJheSBvciBvYmplY3QgY29udGFpbnMgYSBnaXZlbiB2YWx1ZSAodXNpbmcgYD09PWApLlxuICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlYC5cbiAgXy5jb250YWlucyA9IF8uaW5jbHVkZSA9IGZ1bmN0aW9uKG9iaiwgdGFyZ2V0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgb2JqLmluZGV4T2YgPT09IG5hdGl2ZUluZGV4T2YpIHJldHVybiBvYmouaW5kZXhPZih0YXJnZXQpICE9IC0xO1xuICAgIHJldHVybiBhbnkob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0YXJnZXQ7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiAoaXNGdW5jID8gbWV0aG9kIDogdmFsdWVbbWV0aG9kXSkuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYG1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuXG4gIF8ucGx1Y2sgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuIHZhbHVlW2tleV07IH0pO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMsIGZpcnN0KSB7XG4gICAgaWYgKF8uaXNFbXB0eShhdHRycykpIHJldHVybiBmaXJzdCA/IG51bGwgOiBbXTtcbiAgICByZXR1cm4gX1tmaXJzdCA/ICdmaW5kJyA6ICdmaWx0ZXInXShvYmosIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgaWYgKGF0dHJzW2tleV0gIT09IHZhbHVlW2tleV0pIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbmRgOiBnZXR0aW5nIHRoZSBmaXJzdCBvYmplY3RcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5maW5kV2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8ud2hlcmUob2JqLCBhdHRycywgdHJ1ZSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgb3IgKGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICAvLyBDYW4ndCBvcHRpbWl6ZSBhcnJheXMgb2YgaW50ZWdlcnMgbG9uZ2VyIHRoYW4gNjUsNTM1IGVsZW1lbnRzLlxuICAvLyBTZWU6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD04MDc5N1xuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSAmJiBvYmoubGVuZ3RoIDwgNjU1MzUpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCBvYmopO1xuICAgIH1cbiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNFbXB0eShvYmopKSByZXR1cm4gLUluZmluaXR5O1xuICAgIHZhciByZXN1bHQgPSB7Y29tcHV0ZWQgOiAtSW5maW5pdHksIHZhbHVlOiAtSW5maW5pdHl9O1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7XG4gICAgICBjb21wdXRlZCA+PSByZXN1bHQuY29tcHV0ZWQgJiYgKHJlc3VsdCA9IHt2YWx1ZSA6IHZhbHVlLCBjb21wdXRlZCA6IGNvbXB1dGVkfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWluID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0FycmF5KG9iaikgJiYgb2JqWzBdID09PSArb2JqWzBdICYmIG9iai5sZW5ndGggPCA2NTUzNSkge1xuICAgICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KE1hdGgsIG9iaik7XG4gICAgfVxuICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0VtcHR5KG9iaikpIHJldHVybiBJbmZpbml0eTtcbiAgICB2YXIgcmVzdWx0ID0ge2NvbXB1dGVkIDogSW5maW5pdHksIHZhbHVlOiBJbmZpbml0eX07XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTtcbiAgICAgIGNvbXB1dGVkIDwgcmVzdWx0LmNvbXB1dGVkICYmIChyZXN1bHQgPSB7dmFsdWUgOiB2YWx1ZSwgY29tcHV0ZWQgOiBjb21wdXRlZH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gIH07XG5cbiAgLy8gU2h1ZmZsZSBhbiBhcnJheS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJhbmQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgc2h1ZmZsZWQgPSBbXTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJhbmQgPSBfLnJhbmRvbShpbmRleCsrKTtcbiAgICAgIHNodWZmbGVkW2luZGV4IC0gMV0gPSBzaHVmZmxlZFtyYW5kXTtcbiAgICAgIHNodWZmbGVkW3JhbmRdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNodWZmbGVkO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGxvb2t1cCBpdGVyYXRvcnMuXG4gIHZhciBsb29rdXBJdGVyYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IGZ1bmN0aW9uKG9iail7IHJldHVybiBvYmpbdmFsdWVdOyB9O1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRvci5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IodmFsdWUpO1xuICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSA6IHZhbHVlLFxuICAgICAgICBpbmRleCA6IGluZGV4LFxuICAgICAgICBjcml0ZXJpYSA6IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IDwgcmlnaHQuaW5kZXggPyAtMSA6IDE7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24ob2JqLCB2YWx1ZSwgY29udGV4dCwgYmVoYXZpb3IpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IodmFsdWUgfHwgXy5pZGVudGl0eSk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgdmFyIGtleSA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBvYmopO1xuICAgICAgYmVoYXZpb3IocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGVcbiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG4gIF8uZ3JvdXBCeSA9IGZ1bmN0aW9uKG9iaiwgdmFsdWUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZ3JvdXAob2JqLCB2YWx1ZSwgY29udGV4dCwgZnVuY3Rpb24ocmVzdWx0LCBrZXksIHZhbHVlKSB7XG4gICAgICAoXy5oYXMocmVzdWx0LCBrZXkpID8gcmVzdWx0W2tleV0gOiAocmVzdWx0W2tleV0gPSBbXSkpLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBmdW5jdGlvbihvYmosIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGdyb3VwKG9iaiwgdmFsdWUsIGNvbnRleHQsIGZ1bmN0aW9uKHJlc3VsdCwga2V5KSB7XG4gICAgICBpZiAoIV8uaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0gPSAwO1xuICAgICAgcmVzdWx0W2tleV0rKztcbiAgICB9KTtcbiAgfTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYXRvciA9PSBudWxsID8gXy5pZGVudGl0eSA6IGxvb2t1cEl0ZXJhdG9yKGl0ZXJhdG9yKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9iaik7XG4gICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDE7XG4gICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGFycmF5W21pZF0pIDwgdmFsdWUgPyBsb3cgPSBtaWQgKyAxIDogaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBTYWZlbHkgY29udmVydCBhbnl0aGluZyBpdGVyYWJsZSBpbnRvIGEgcmVhbCwgbGl2ZSBhcnJheS5cbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gICAgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSByZXR1cm4gXy5tYXAob2JqLCBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gXy52YWx1ZXMob2JqKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBvYmplY3QuXG4gIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIDA7XG4gICAgcmV0dXJuIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkgPyBvYmoubGVuZ3RoIDogXy5rZXlzKG9iaikubGVuZ3RoO1xuICB9O1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICByZXR1cm4gKG4gIT0gbnVsbCkgJiYgIWd1YXJkID8gc2xpY2UuY2FsbChhcnJheSwgMCwgbikgOiBhcnJheVswXTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb25cbiAgLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW5cbiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoXG4gIC8vIGBfLm1hcGAuXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBhcnJheS5sZW5ndGggLSAoKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbikpO1xuICB9O1xuXG4gIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmICgobiAhPSBudWxsKSAmJiAhZ3VhcmQpIHtcbiAgICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBNYXRoLm1heChhcnJheS5sZW5ndGggLSBuLCAwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKipcbiAgLy8gY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgXy5pZGVudGl0eSk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBvdXRwdXQpIHtcbiAgICBlYWNoKGlucHV0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgc2hhbGxvdyA/IHB1c2guYXBwbHkob3V0cHV0LCB2YWx1ZSkgOiBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBvdXRwdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29tcGxldGVseSBmbGF0dGVuZWQgdmVyc2lvbiBvZiBhbiBhcnJheS5cbiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHtcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgW10pO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGlzU29ydGVkKSkge1xuICAgICAgY29udGV4dCA9IGl0ZXJhdG9yO1xuICAgICAgaXRlcmF0b3IgPSBpc1NvcnRlZDtcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpbml0aWFsID0gaXRlcmF0b3IgPyBfLm1hcChhcnJheSwgaXRlcmF0b3IsIGNvbnRleHQpIDogYXJyYXk7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGVhY2goaW5pdGlhbCwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICBpZiAoaXNTb3J0ZWQgPyAoIWluZGV4IHx8IHNlZW5bc2Vlbi5sZW5ndGggLSAxXSAhPT0gdmFsdWUpIDogIV8uY29udGFpbnMoc2VlbiwgdmFsdWUpKSB7XG4gICAgICAgIHNlZW4ucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJlc3VsdHMucHVzaChhcnJheVtpbmRleF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuaXEoY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbiAgLy8gcGFzc2VkLWluIGFycmF5cy5cbiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBfLmZpbHRlcihfLnVuaXEoYXJyYXkpLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gXy5ldmVyeShyZXN0LCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICByZXR1cm4gXy5pbmRleE9mKG90aGVyLCBpdGVtKSA+PSAwO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7IHJldHVybiAhXy5jb250YWlucyhyZXN0LCB2YWx1ZSk7IH0pO1xuICB9O1xuXG4gIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmVcbiAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXG4gIF8uemlwID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgdmFyIGxlbmd0aCA9IF8ubWF4KF8ucGx1Y2soYXJncywgJ2xlbmd0aCcpKTtcbiAgICB2YXIgcmVzdWx0cyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdHNbaV0gPSBfLnBsdWNrKGFyZ3MsIFwiXCIgKyBpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ29udmVydHMgbGlzdHMgaW50byBvYmplY3RzLiBQYXNzIGVpdGhlciBhIHNpbmdsZSBhcnJheSBvZiBgW2tleSwgdmFsdWVdYFxuICAvLyBwYWlycywgb3IgdHdvIHBhcmFsbGVsIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5ndGggLS0gb25lIG9mIGtleXMsIGFuZCBvbmUgb2ZcbiAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICBfLm9iamVjdCA9IGZ1bmN0aW9uKGxpc3QsIHZhbHVlcykge1xuICAgIGlmIChsaXN0ID09IG51bGwpIHJldHVybiB7fTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIElmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcGx5IHVzIHdpdGggaW5kZXhPZiAoSSdtIGxvb2tpbmcgYXQgeW91LCAqKk1TSUUqKiksXG4gIC8vIHdlIG5lZWQgdGhpcyBmdW5jdGlvbi4gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhblxuICAvLyBpdGVtIGluIGFuIGFycmF5LCBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgaW5kZXhPZmAgaWYgYXZhaWxhYmxlLlxuICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC5cbiAgXy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlzU29ydGVkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTtcbiAgICB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGlzU29ydGVkKSB7XG4gICAgICBpZiAodHlwZW9mIGlzU29ydGVkID09ICdudW1iZXInKSB7XG4gICAgICAgIGkgPSAoaXNTb3J0ZWQgPCAwID8gTWF0aC5tYXgoMCwgbCArIGlzU29ydGVkKSA6IGlzU29ydGVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgPSBfLnNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBpdGVtID8gaSA6IC0xO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmF0aXZlSW5kZXhPZiAmJiBhcnJheS5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtLCBpc1NvcnRlZCk7XG4gICAgZm9yICg7IGkgPCBsOyBpKyspIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBsYXN0SW5kZXhPZmAgaWYgYXZhaWxhYmxlLlxuICBfLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGZyb20pIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgIHZhciBoYXNJbmRleCA9IGZyb20gIT0gbnVsbDtcbiAgICBpZiAobmF0aXZlTGFzdEluZGV4T2YgJiYgYXJyYXkubGFzdEluZGV4T2YgPT09IG5hdGl2ZUxhc3RJbmRleE9mKSB7XG4gICAgICByZXR1cm4gaGFzSW5kZXggPyBhcnJheS5sYXN0SW5kZXhPZihpdGVtLCBmcm9tKSA6IGFycmF5Lmxhc3RJbmRleE9mKGl0ZW0pO1xuICAgIH1cbiAgICB2YXIgaSA9IChoYXNJbmRleCA/IGZyb20gOiBhcnJheS5sZW5ndGgpO1xuICAgIHdoaWxlIChpLS0pIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2ZcbiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWVcbiAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS5cbiAgXy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkge1xuICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIHN0ZXAgPSBhcmd1bWVudHNbMl0gfHwgMTtcblxuICAgIHZhciBsZW4gPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgdmFyIHJhbmdlID0gbmV3IEFycmF5KGxlbik7XG5cbiAgICB3aGlsZShpZHggPCBsZW4pIHtcbiAgICAgIHJhbmdlW2lkeCsrXSA9IHN0YXJ0O1xuICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cyxcbiAgLy8gb3B0aW9uYWxseSkuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBGdW5jdGlvbi5iaW5kYCBpZlxuICAvLyBhdmFpbGFibGUuXG4gIF8uYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQpIHtcbiAgICBpZiAoZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kICYmIG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBQYXJ0aWFsbHkgYXBwbHkgYSBmdW5jdGlvbiBieSBjcmVhdGluZyBhIHZlcnNpb24gdGhhdCBoYXMgaGFkIHNvbWUgb2YgaXRzXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LlxuICBfLnBhcnRpYWwgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBCaW5kIGFsbCBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXRcbiAgLy8gYWxsIGNhbGxiYWNrcyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBmdW5jcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSBmdW5jcyA9IF8uZnVuY3Rpb25zKG9iaik7XG4gICAgZWFjaChmdW5jcywgZnVuY3Rpb24oZikgeyBvYmpbZl0gPSBfLmJpbmQob2JqW2ZdLCBvYmopOyB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXG4gIF8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGZ1bmMsIGhhc2hlcikge1xuICAgIHZhciBtZW1vID0ge307XG4gICAgaGFzaGVyIHx8IChoYXNoZXIgPSBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5ID0gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gXy5oYXMobWVtbywga2V5KSA/IG1lbW9ba2V5XSA6IChtZW1vW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7IH0sIHdhaXQpO1xuICB9O1xuXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xuICAvLyBjbGVhcmVkLlxuICBfLmRlZmVyID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHJldHVybiBfLmRlbGF5LmFwcGx5KF8sIFtmdW5jLCAxXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgIHZhciBjb250ZXh0LCBhcmdzLCB0aW1lb3V0LCByZXN1bHQ7XG4gICAgdmFyIHByZXZpb3VzID0gMDtcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByZXZpb3VzID0gbmV3IERhdGU7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93ID0gbmV3IERhdGU7XG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDApIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0KSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0LCByZXN1bHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICBpZiAoIWltbWVkaWF0ZSkgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIH07XG4gICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIGlmIChjYWxsTm93KSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvd1xuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuICBfLm9uY2UgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIHJhbiA9IGZhbHNlLCBtZW1vO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChyYW4pIHJldHVybiBtZW1vO1xuICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsXG4gIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmRcbiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gW2Z1bmNdO1xuICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHdyYXBwZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBmb3IgKHZhciBpID0gZnVuY3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXJncyA9IFtmdW5jc1tpXS5hcHBseSh0aGlzLCBhcmdzKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnc1swXTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBhZnRlciBiZWluZyBjYWxsZWQgTiB0aW1lcy5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgaWYgKHRpbWVzIDw9IDApIHJldHVybiBmdW5jKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYFxuICBfLmtleXMgPSBuYXRpdmVLZXlzIHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogIT09IE9iamVjdChvYmopKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG9iamVjdCcpO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5c1trZXlzLmxlbmd0aF0gPSBrZXk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSB2YWx1ZXMucHVzaChvYmpba2V5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAgXy5wYWlycyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBwYWlycyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHBhaXJzLnB1c2goW2tleSwgb2JqW2tleV1dKTtcbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSByZXN1bHRbb2JqW2tleV1dID0ga2V5O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYFxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGNvcHkgPSB7fTtcbiAgICB2YXIga2V5cyA9IGNvbmNhdC5hcHBseShBcnJheVByb3RvLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIGVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoa2V5IGluIG9iaikgY29weVtrZXldID0gb2JqW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvcHk7XG4gIH07XG5cbiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgY29weSA9IHt9O1xuICAgIHZhciBrZXlzID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKCFfLmNvbnRhaW5zKGtleXMsIGtleSkpIGNvcHlba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbiAgfTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChvYmpbcHJvcF0gPT0gbnVsbCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBIYXJtb255IGBlZ2FsYCBwcm9wb3NhbDogaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsLlxuICAgIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PSAxIC8gYjtcbiAgICAvLyBBIHN0cmljdCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGBudWxsID09IHVuZGVmaW5lZGAuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBhID09PSBiO1xuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICAgIGlmIChjbGFzc05hbWUgIT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgcmV0dXJuIGEgPT0gU3RyaW5nKGIpO1xuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS4gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvclxuICAgICAgICAvLyBvdGhlciBudW1lcmljIHZhbHVlcy5cbiAgICAgICAgcmV0dXJuIGEgIT0gK2EgPyBiICE9ICtiIDogKGEgPT0gMCA/IDEgLyBhID09IDEgLyBiIDogYSA9PSArYik7XG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgICByZXR1cm4gK2EgPT0gK2I7XG4gICAgICAvLyBSZWdFeHBzIGFyZSBjb21wYXJlZCBieSB0aGVpciBzb3VyY2UgcGF0dGVybnMgYW5kIGZsYWdzLlxuICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgICAgcmV0dXJuIGEuc291cmNlID09IGIuc291cmNlICYmXG4gICAgICAgICAgICAgICBhLmdsb2JhbCA9PSBiLmdsb2JhbCAmJlxuICAgICAgICAgICAgICAgYS5tdWx0aWxpbmUgPT0gYi5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgICAgIGEuaWdub3JlQ2FzZSA9PSBiLmlnbm9yZUNhc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cbiAgICB2YXIgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aDtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxuICAgICAgLy8gdW5pcXVlIG5lc3RlZCBzdHJ1Y3R1cmVzLlxuICAgICAgaWYgKGFTdGFja1tsZW5ndGhdID09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PSBiO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG4gICAgdmFyIHNpemUgPSAwLCByZXN1bHQgPSB0cnVlO1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChjbGFzc05hbWUgPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICBzaXplID0gYS5sZW5ndGg7XG4gICAgICByZXN1bHQgPSBzaXplID09IGIubGVuZ3RoO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID0gZXEoYVtzaXplXSwgYltzaXplXSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgKGFDdG9yIGluc3RhbmNlb2YgYUN0b3IpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiAoYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgZm9yICh2YXIga2V5IGluIGEpIHtcbiAgICAgICAgaWYgKF8uaGFzKGEsIGtleSkpIHtcbiAgICAgICAgICAvLyBDb3VudCB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlci5cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBfLmhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGZvciAoa2V5IGluIGIpIHtcbiAgICAgICAgICBpZiAoXy5oYXMoYiwga2V5KSAmJiAhKHNpemUtLSkpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9ICFzaXplO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucG9wKCk7XG4gICAgYlN0YWNrLnBvcCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbiB0byBjaGVjayBpZiB0d28gb2JqZWN0cyBhcmUgZXF1YWwuXG4gIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gZXEoYSwgYiwgW10sIFtdKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD9cbiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IE9iamVjdChvYmopO1xuICB9O1xuXG4gIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLlxuICBlYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiAhIShvYmogJiYgXy5oYXMob2JqLCAnY2FsbGVlJykpO1xuICAgIH07XG4gIH1cblxuICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuXG4gIGlmICh0eXBlb2YgKC8uLykgIT09ICdmdW5jdGlvbicpIHtcbiAgICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTtcbiAgfTtcblxuICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IChOYU4gaXMgdGhlIG9ubHkgbnVtYmVyIHdoaWNoIGRvZXMgbm90IGVxdWFsIGl0c2VsZikuXG4gIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIG9iaiAhPSArb2JqO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuP1xuICBfLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSBudWxsO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdG9ycy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLlxuICBfLnRpbWVzID0gZnVuY3Rpb24obiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgYWNjdW0gPSBBcnJheShuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZW50aXR5TWFwID0ge1xuICAgIGVzY2FwZToge1xuICAgICAgJyYnOiAnJmFtcDsnLFxuICAgICAgJzwnOiAnJmx0OycsXG4gICAgICAnPic6ICcmZ3Q7JyxcbiAgICAgICdcIic6ICcmcXVvdDsnLFxuICAgICAgXCInXCI6ICcmI3gyNzsnLFxuICAgICAgJy8nOiAnJiN4MkY7J1xuICAgIH1cbiAgfTtcbiAgZW50aXR5TWFwLnVuZXNjYXBlID0gXy5pbnZlcnQoZW50aXR5TWFwLmVzY2FwZSk7XG5cbiAgLy8gUmVnZXhlcyBjb250YWluaW5nIHRoZSBrZXlzIGFuZCB2YWx1ZXMgbGlzdGVkIGltbWVkaWF0ZWx5IGFib3ZlLlxuICB2YXIgZW50aXR5UmVnZXhlcyA9IHtcbiAgICBlc2NhcGU6ICAgbmV3IFJlZ0V4cCgnWycgKyBfLmtleXMoZW50aXR5TWFwLmVzY2FwZSkuam9pbignJykgKyAnXScsICdnJyksXG4gICAgdW5lc2NhcGU6IG5ldyBSZWdFeHAoJygnICsgXy5rZXlzKGVudGl0eU1hcC51bmVzY2FwZSkuam9pbignfCcpICsgJyknLCAnZycpXG4gIH07XG5cbiAgLy8gRnVuY3Rpb25zIGZvciBlc2NhcGluZyBhbmQgdW5lc2NhcGluZyBzdHJpbmdzIHRvL2Zyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuICBfLmVhY2goWydlc2NhcGUnLCAndW5lc2NhcGUnXSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgX1ttZXRob2RdID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBpZiAoc3RyaW5nID09IG51bGwpIHJldHVybiAnJztcbiAgICAgIHJldHVybiAoJycgKyBzdHJpbmcpLnJlcGxhY2UoZW50aXR5UmVnZXhlc1ttZXRob2RdLCBmdW5jdGlvbihtYXRjaCkge1xuICAgICAgICByZXR1cm4gZW50aXR5TWFwW21ldGhvZF1bbWF0Y2hdO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gSWYgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBwcm9wZXJ0eSBpcyBhIGZ1bmN0aW9uIHRoZW4gaW52b2tlIGl0O1xuICAvLyBvdGhlcndpc2UsIHJldHVybiBpdC5cbiAgXy5yZXN1bHQgPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBvYmplY3RbcHJvcGVydHldO1xuICAgIHJldHVybiBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChfLmZ1bmN0aW9ucyhvYmopLCBmdW5jdGlvbihuYW1lKXtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZSAgICA6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xcc1xcU10rPyklPi9nXG4gIH07XG5cbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzXG4gIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcblxuICAvLyBDZXJ0YWluIGNoYXJhY3RlcnMgbmVlZCB0byBiZSBlc2NhcGVkIHNvIHRoYXQgdGhleSBjYW4gYmUgcHV0IGludG8gYVxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cbiAgdmFyIGVzY2FwZXMgPSB7XG4gICAgXCInXCI6ICAgICAgXCInXCIsXG4gICAgJ1xcXFwnOiAgICAgJ1xcXFwnLFxuICAgICdcXHInOiAgICAgJ3InLFxuICAgICdcXG4nOiAgICAgJ24nLFxuICAgICdcXHQnOiAgICAgJ3QnLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICB2YXIgZXNjYXBlciA9IC9cXFxcfCd8XFxyfFxcbnxcXHR8XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLFxuICAvLyBhbmQgY29ycmVjdGx5IGVzY2FwZXMgcXVvdGVzIHdpdGhpbiBpbnRlcnBvbGF0ZWQgY29kZS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIGRhdGEsIHNldHRpbmdzKSB7XG4gICAgdmFyIHJlbmRlcjtcbiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xuXG4gICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgICAgICAucmVwbGFjZShlc2NhcGVyLCBmdW5jdGlvbihtYXRjaCkgeyByZXR1cm4gJ1xcXFwnICsgZXNjYXBlc1ttYXRjaF07IH0pO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9XG4gICAgICBpZiAoZXZhbHVhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlICsgXCJcXG5fX3ArPSdcIjtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xcbicgKyBzb3VyY2UgKyAnfVxcbic7XG5cbiAgICBzb3VyY2UgPSBcInZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixcIiArXG4gICAgICBcInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XFxuXCIgK1xuICAgICAgc291cmNlICsgXCJyZXR1cm4gX19wO1xcblwiO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlbmRlciA9IG5ldyBGdW5jdGlvbihzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJywgJ18nLCBzb3VyY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSkgcmV0dXJuIHJlbmRlcihkYXRhLCBfKTtcbiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIChzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJykgKyAnKXtcXG4nICsgc291cmNlICsgJ30nO1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9O1xuXG4gIC8vIEFkZCBhIFwiY2hhaW5cIiBmdW5jdGlvbiwgd2hpY2ggd2lsbCBkZWxlZ2F0ZSB0byB0aGUgd3JhcHBlci5cbiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfKG9iaikuY2hhaW4oKTtcbiAgfTtcblxuICAvLyBPT1BcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0XG4gIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLlxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICBfLm1peGluKF8pO1xuXG4gIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIGVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT0gJ3NoaWZ0JyB8fCBuYW1lID09ICdzcGxpY2UnKSAmJiBvYmoubGVuZ3RoID09PSAwKSBkZWxldGUgb2JqWzBdO1xuICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIGVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgXy5leHRlbmQoXy5wcm90b3R5cGUsIHtcblxuICAgIC8vIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbiAgICBjaGFpbjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jaGFpbiA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gICAgfVxuXG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG59KSgpIl19
;